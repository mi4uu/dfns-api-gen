{
  "openapi": "3.0.3",
  "info": {
    "title": "Dfns",
    "version": "1.578.2"
  },
  "paths": {
    "/agreements/latest-unaccepted": {
      "get": {
        "tags": [
          "Agreements"
        ],
        "summary": "Get Latest Unaccepted Agreement",
        "description": "Get the latest unaccepted agreement for a specific agreement type",
        "parameters": [
          {
            "name": "agreementType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "PrivacyPolicy",
                "TermsAndConditions",
                "UniswapTermsOfService",
                "UniswapPrivacyPolicy"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "latestAgreement": {
                      "properties": {
                        "agreementType": {
                          "type": "string",
                          "enum": [
                            "PrivacyPolicy",
                            "TermsAndConditions",
                            "UniswapTermsOfService",
                            "UniswapPrivacyPolicy"
                          ]
                        },
                        "agreementUrl": {
                          "type": "string"
                        },
                        "details": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "details",
                        "agreementType"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "latestAgreement"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Agreements:Acceptance:Read`: Always required."
        }
      }
    },
    "/agreements/{agreementId}/accept": {
      "post": {
        "tags": [
          "Agreements"
        ],
        "summary": "Record Agreement Acceptance",
        "description": "Record the acceptance of a specific agreement by its ID",
        "parameters": [
          {
            "name": "agreementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "agreementId": {
                      "type": "string"
                    },
                    "dateAccepted": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "agreementId",
                    "userId",
                    "dateAccepted"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Agreements:Acceptance:Create`: Always required."
        }
      }
    },
    "/auth/action": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create User Action Signature",
        "description": "Completes the user action signing process and provides a signing token that can be used to verify the user intended to perform the action.\n\nThe type of credentials used to sign the action is determined by the `kind` field in the nested objects (`firstFactor` and `secondFactor`). Supported credential kinds are:\n* `Fido2`: User action is signed by a user's signing device using `WebAuthn`.\n* `Key`: User action is signed by a user's, or token's, private key.\n* `PasswordProtectedKey`: Login challenge is signed by the decrypted user's private key that was sent during [Create User Action Signature Challenge](https://docs.dfns.co/api-reference/auth/create-user-action-challenge) step.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "challengeIdentifier": {
                    "type": "string",
                    "description": "Temporary authentication token returned by the [Create User Action Signature Challenge](https://docs.dfns.co/api-reference/auth/create-user-action-challenge)"
                  },
                  "firstFactor": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "authenticatorData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              },
                              "userHandle": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature",
                              "authenticatorData"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Use a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Use a \"raw\" public/private keypair."
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Password"
                            ]
                          },
                          "password": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "password"
                        ],
                        "title": "<Deprecated> Password",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Password-protected Key",
                        "description": "Use an encrypted private key. "
                      }
                    ],
                    "description": "First factor credential used to sign the user action"
                  },
                  "secondFactor": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "authenticatorData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              },
                              "userHandle": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature",
                              "authenticatorData"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Use a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Use a \"raw\" public/private keypair."
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Totp"
                            ]
                          },
                          "otpCode": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "otpCode"
                        ],
                        "title": "<Deprecated> TOTP",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Password-protected Key",
                        "description": "Use an encrypted private key. "
                      }
                    ],
                    "description": "Second factor credential used to authenticate a user"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "challengeIdentifier",
                  "firstFactor"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "userAction": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "userAction"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/action/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create User Action Challenge",
        "description": "Starts a user action signing session, returning a challenge that will be used to verify the user's intent to perform an action.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userActionHttpMethod": {
                    "type": "string",
                    "minLength": 1
                  },
                  "userActionHttpPath": {
                    "type": "string",
                    "minLength": 1
                  },
                  "userActionPayload": {
                    "type": "string"
                  },
                  "userActionServerKind": {
                    "type": "string",
                    "enum": [
                      "Api",
                      "Staff"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "userActionHttpMethod",
                  "userActionHttpPath",
                  "userActionPayload"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowCredentials": {
                      "properties": {
                        "key": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id"
                            ]
                          },
                          "type": "array"
                        },
                        "passwordProtectedKey": {
                          "items": {
                            "properties": {
                              "encryptedPrivateKey": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id",
                              "encryptedPrivateKey"
                            ]
                          },
                          "type": "array"
                        },
                        "webauthn": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "key",
                        "webauthn"
                      ]
                    },
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "challengeIdentifier": {
                      "type": "string"
                    },
                    "externalAuthenticationUrl": {
                      "type": "string"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "items": {
                        "properties": {
                          "factor": {
                            "type": "string",
                            "enum": [
                              "first",
                              "second",
                              "either"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "requiresSecondFactor": {
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "factor",
                          "requiresSecondFactor"
                        ]
                      },
                      "type": "array"
                    },
                    "userVerification": {
                      "type": "string",
                      "enum": [
                        "required",
                        "preferred",
                        "discouraged"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "challenge",
                    "challengeIdentifier",
                    "supportedCredentialKinds",
                    "userVerification",
                    "attestation",
                    "allowCredentials",
                    "externalAuthenticationUrl"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/action/logs": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Audit Logs",
        "description": "\n  Gets all signature events which have occurred in the over the timeframe.  The max range the API supports is 7 days.\n\nStartTime and EndTime are URL-encoded UTC ISO timestamps:    \n`startTime=2025-08-29T02%3A46%3A40Z`   \n`endTime=2025-09-01T02%3A46%3A40Z`   \n\nAn additional optional query parameter, `userId` can be specified to filter down events to a particular user. The API will return results found in CSV format.\n",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Logs:Read`: Always required."
        }
      }
    },
    "/auth/action/logs/{id}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Audit Log",
        "description": "\n  Gets detailed information for a particular audit log. Specifically, the API returns:\n\n| Name              | Value                                                                       |\n| ----------------- | --------------------------------------------------------------------------- |\n| publicKey         | Public Key which can be used to verify signature                            |\n| signature         | Signature of the clientData and authenticatorData                           |\n| clientData        | Information, including challenge, which you can use to verify the signature |\n| authenticatorData | Used to verify the signature                                                |\n\nDfns maintains a script in this repository which can be used for audit log signature validation.[https://github.com/dfns/example-scripts](https://github.com/dfns/example-scripts)\n  ",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "action": {
                      "type": "string"
                    },
                    "actionToken": {
                      "type": "string"
                    },
                    "datePerformed": {
                      "type": "string"
                    },
                    "firstFactorCredential": {
                      "properties": {
                        "assertion": {
                          "properties": {
                            "authenticatorData": {
                              "type": "string"
                            },
                            "clientData": {
                              "type": "string"
                            },
                            "signature": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "authenticatorData",
                            "clientData",
                            "signature"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string"
                        },
                        "publicKey": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "kind",
                        "publicKey",
                        "assertion"
                      ]
                    },
                    "id": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "action",
                    "actionToken",
                    "userId",
                    "username",
                    "datePerformed",
                    "firstFactorCredential"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Logs:Read`: Always required."
        }
      }
    },
    "/auth/apps": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Applications",
        "description": "<Warning>\n  Applications are deprecated and will be removed in a future release. See details [here](https://docs.dfns.co/developers/guides/applications-deprecation).\n  </Warning>",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "accessTokens": {
                            "items": {
                              "properties": {
                                "accessToken": {
                                  "type": "string"
                                },
                                "credId": {
                                  "type": "string"
                                },
                                "dateCreated": {
                                  "type": "string"
                                },
                                "isActive": {
                                  "type": "boolean"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Pat",
                                    "ServiceAccount",
                                    "Token",
                                    "Code",
                                    "Recovery",
                                    "Temp",
                                    "Application"
                                  ],
                                  "description": "Access token kind."
                                },
                                "linkedAppId": {
                                  "type": "string"
                                },
                                "linkedUserId": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "orgId": {
                                  "type": "string"
                                },
                                "permissionAssignments": {
                                  "items": {
                                    "properties": {
                                      "assignmentId": {
                                        "type": "string"
                                      },
                                      "operations": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "permissionId": {
                                        "type": "string"
                                      },
                                      "permissionName": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "permissionName",
                                      "permissionId",
                                      "assignmentId"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "publicKey": {
                                  "type": "string"
                                },
                                "tokenId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "dateCreated",
                                "credId",
                                "isActive",
                                "kind",
                                "linkedUserId",
                                "linkedAppId",
                                "name",
                                "orgId",
                                "permissionAssignments",
                                "publicKey",
                                "tokenId"
                              ]
                            },
                            "type": "array"
                          },
                          "appId": {
                            "type": "string"
                          },
                          "expectedOrigin": {
                            "type": "string"
                          },
                          "expectedRpId": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "ServerSideApplication",
                              "ClientSideApplication"
                            ]
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object",
                        "required": [
                          "appId",
                          "kind",
                          "orgId",
                          "name",
                          "isActive",
                          "permissionAssignments",
                          "accessTokens"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/apps/{appId}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Application",
        "description": "<Warning>\n  Applications are deprecated and will be removed in a future release. See details [here](https://docs.dfns.co/developers/guides/applications-deprecation).\n  </Warning>",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "appId": {
                      "type": "string"
                    },
                    "expectedOrigin": {
                      "type": "string"
                    },
                    "expectedRpId": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "ServerSideApplication",
                        "ClientSideApplication"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "appId",
                    "kind",
                    "orgId",
                    "name",
                    "isActive",
                    "permissionAssignments",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/credentials": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Credentials",
        "description": "List all credentials for a user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "credentialId": {
                            "type": "string"
                          },
                          "credentialUuid": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "name": {
                            "type": "string"
                          },
                          "origin": {
                            "type": "string"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "relyingPartyId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialId",
                          "credentialUuid",
                          "dateCreated",
                          "isActive",
                          "name",
                          "publicKey",
                          "relyingPartyId",
                          "origin"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Credential",
        "description": "Part of the flow [Create Credential Regular flow](https://docs.dfns.co/api-reference/auth/credentials#regular-flow).\n\nAdds a new credential to a user's account. See [Credential Kinds](https://docs.dfns.co/api-reference/auth/credentials#credential-kinds) for all supported credential types.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Fido2"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Fido2/Passkeys",
                    "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Key"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Public/Private key pair",
                    "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "PasswordProtectedKey"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "encryptedPrivateKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "encryptedPrivateKey",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Password-protected Key",
                    "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "RecoveryKey"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "encryptedPrivateKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Recovery Key",
                    "description": "Register a recovery key. See [Account Recovery](https://docs.dfns.co/api-reference/auth/account-recovery) for more details."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "password": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "password"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Password"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "<Deprecated> Password",
                    "description": "Not supported, will be removed in a future release."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "otpCode": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "otpCode"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Totp"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "<Deprecated> TOTP",
                    "description": "Not supported, will be removed in a future release."
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "credentialId": {
                      "type": "string"
                    },
                    "credentialUuid": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Fido2",
                        "Key",
                        "Password",
                        "Totp",
                        "RecoveryKey",
                        "PasswordProtectedKey"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "origin": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "relyingPartyId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "kind",
                    "credentialId",
                    "credentialUuid",
                    "dateCreated",
                    "isActive",
                    "name",
                    "publicKey",
                    "relyingPartyId",
                    "origin"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/credentials/activate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Activate Credential",
        "description": "Activates a credential that was previously deactivated. If the credential is already activated no action is taken.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialUuid": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "credentialUuid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/credentials/code": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Credential Code",
        "description": "Part of the [Create Credential With Code flow](https://docs.dfns.co/api-reference/auth/credentials#create-credential-with-code-flow).\n\nCreates a one-time-code that can then be used to create a new credential from a place you don't have access to one of your existing credential.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "expiration": {
                    "anyOf": [
                      {
                        "type": "string",
                        "format": "date-time"
                      },
                      {
                        "type": "integer",
                        "exclusiveMinimum": 0
                      }
                    ],
                    "description": "Code expiration, as an ISO-8601 datetime string or a unix timestamp"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "expiration"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "expiration": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "code",
                    "expiration"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/credentials/code/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Credential Challenge With Code",
        "description": "Part of the flow [Create Credential With Code](https://docs.dfns.co/api-reference/auth/credentials#create-credential-with-code-flow).\n\nCreates a credential challenge using a one time code-time-code. This challenge must then be signed by the new credential, before finalizing the flow.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "type": "string",
                    "minLength": 1
                  },
                  "credentialKind": {
                    "type": "string",
                    "enum": [
                      "Fido2",
                      "Key",
                      "Password",
                      "Totp",
                      "RecoveryKey",
                      "PasswordProtectedKey"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "credentialKind",
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "authenticatorSelection": {
                          "properties": {
                            "authenticatorAttachment": {
                              "type": "string",
                              "enum": [
                                "platform",
                                "cross-platform"
                              ]
                            },
                            "requireResidentKey": {
                              "type": "boolean"
                            },
                            "residentKey": {
                              "type": "string",
                              "enum": [
                                "required",
                                "preferred",
                                "discouraged"
                              ]
                            },
                            "userVerification": {
                              "type": "string",
                              "enum": [
                                "required",
                                "preferred",
                                "discouraged"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "residentKey",
                            "requireResidentKey",
                            "userVerification"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "excludeCredentials": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id"
                            ]
                          },
                          "type": "array"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Fido2"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "authenticatorSelection",
                        "attestation",
                        "pubKeyCredParams",
                        "excludeCredentials",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Fido2/Passkeys",
                      "description": "Fido2 Credential, also known as Passkeys or WebauthN credential."
                    },
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Key"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "attestation",
                        "pubKeyCredParams",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Public/Private key pair",
                      "description": "\"raw\" public/private keypair."
                    },
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "PasswordProtectedKey"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "attestation",
                        "pubKeyCredParams",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Password-protected Key",
                      "description": "Encrypted private key. "
                    },
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "RecoveryKey"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "attestation",
                        "pubKeyCredParams",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Recovery Credentials",
                      "description": "Use an recovery key. "
                    },
                    {
                      "properties": {
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Password"
                          ]
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "<Deprecated> Password",
                      "description": "Not supported, will be removed in a future release."
                    },
                    {
                      "properties": {
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Totp"
                          ]
                        },
                        "otpUrl": {
                          "type": "string"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "otpUrl",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "<Deprecated> TOTP",
                      "description": "Not supported, will be removed in a future release."
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/credentials/code/verify": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Credential With Code",
        "description": "Finalizes the flow [Create Credential With Code](https://docs.dfns.co/api-reference/auth/credentials#create-credential-with-code-flow).\n  \nAdds a new credential to a user's account. This endpoint is similar to the [Create Credential](https://docs.dfns.co/api-reference/auth/create-credential) endpoint, except:\n* it does not need the user to be authenticated\n* it does not need user action signing\n* it will only work with the challenge gotten from the [Create Credential Challenge With Code](https://docs.dfns.co/api-reference/auth/create-credential-challenge-with-code) endpoint\n\n  ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Fido2"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Fido2/Passkeys",
                    "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Key"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Public/Private key pair",
                    "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "PasswordProtectedKey"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "encryptedPrivateKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "encryptedPrivateKey",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Password-protected Key",
                    "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "RecoveryKey"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "encryptedPrivateKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "Recovery Key",
                    "description": "Register a recovery key. See [Account Recovery](https://docs.dfns.co/api-reference/auth/account-recovery) for more details."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "password": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "password"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Password"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "<Deprecated> Password",
                    "description": "Not supported, will be removed in a future release."
                  },
                  {
                    "properties": {
                      "challengeIdentifier": {
                        "type": "string",
                        "minLength": 1
                      },
                      "credentialInfo": {
                        "properties": {
                          "otpCode": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "otpCode"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "Totp"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo",
                      "credentialName",
                      "challengeIdentifier"
                    ],
                    "title": "<Deprecated> TOTP",
                    "description": "Not supported, will be removed in a future release."
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "credentialId": {
                      "type": "string"
                    },
                    "credentialUuid": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Fido2",
                        "Key",
                        "Password",
                        "Totp",
                        "RecoveryKey",
                        "PasswordProtectedKey"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "origin": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "relyingPartyId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "kind",
                    "credentialId",
                    "credentialUuid",
                    "dateCreated",
                    "isActive",
                    "name",
                    "publicKey",
                    "relyingPartyId",
                    "origin"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/credentials/deactivate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Deactivate Credential",
        "description": "Deactivates a credential that was previously active. If the credential is already deactivated no action is taken.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialUuid": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "credentialUuid"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/credentials/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Credential Challenge",
        "description": "Part of the flow [Create Credential Regular flow](https://docs.dfns.co/api-reference/auth/credentials#regular-flow).\n  \n  Starts a create user credential session, returning a challenge that will be used to verify the user's identity.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Fido2",
                      "Key",
                      "RecoveryKey",
                      "PasswordProtectedKey"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "authenticatorSelection": {
                          "properties": {
                            "authenticatorAttachment": {
                              "type": "string",
                              "enum": [
                                "platform",
                                "cross-platform"
                              ]
                            },
                            "requireResidentKey": {
                              "type": "boolean"
                            },
                            "residentKey": {
                              "type": "string",
                              "enum": [
                                "required",
                                "preferred",
                                "discouraged"
                              ]
                            },
                            "userVerification": {
                              "type": "string",
                              "enum": [
                                "required",
                                "preferred",
                                "discouraged"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "residentKey",
                            "requireResidentKey",
                            "userVerification"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "excludeCredentials": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id"
                            ]
                          },
                          "type": "array"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Fido2"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "authenticatorSelection",
                        "attestation",
                        "pubKeyCredParams",
                        "excludeCredentials",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Fido2/Passkeys",
                      "description": "Fido2 Credential, also known as Passkeys or WebauthN credential."
                    },
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Key"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "attestation",
                        "pubKeyCredParams",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Public/Private key pair",
                      "description": "\"raw\" public/private keypair."
                    },
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "PasswordProtectedKey"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "attestation",
                        "pubKeyCredParams",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Password-protected Key",
                      "description": "Encrypted private key. "
                    },
                    {
                      "properties": {
                        "attestation": {
                          "type": "string",
                          "enum": [
                            "none",
                            "indirect",
                            "direct",
                            "enterprise"
                          ]
                        },
                        "challenge": {
                          "type": "string"
                        },
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "RecoveryKey"
                          ]
                        },
                        "pubKeyCredParams": {
                          "items": {
                            "properties": {
                              "alg": {
                                "type": "number"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "alg"
                            ]
                          },
                          "type": "array"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "challenge",
                        "attestation",
                        "pubKeyCredParams",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "Recovery Credentials",
                      "description": "Use an recovery key. "
                    },
                    {
                      "properties": {
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Password"
                          ]
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "<Deprecated> Password",
                      "description": "Not supported, will be removed in a future release."
                    },
                    {
                      "properties": {
                        "challengeIdentifier": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Totp"
                          ]
                        },
                        "otpUrl": {
                          "type": "string"
                        },
                        "rp": {
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "name"
                          ]
                        },
                        "temporaryAuthenticationToken": {
                          "type": "string",
                          "description": "@deprecated use challengeIdentifier instead"
                        },
                        "user": {
                          "properties": {
                            "displayName": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "displayName",
                            "name"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "user",
                        "challengeIdentifier",
                        "otpUrl",
                        "temporaryAuthenticationToken"
                      ],
                      "title": "<Deprecated> TOTP",
                      "description": "Not supported, will be removed in a future release."
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Complete User Login",
        "description": "Completes the login process and provides the authenticated user with their authentication token.\n\nThe type of credentials used to login is determined by the `kind` field in the nested objects (`firstFactor` and `secondFactor`). Supported credential kinds are:\n* `Fido2`: Login challenge is signed by a user's signing device using `WebAuthn`.\n* `Key`: Login challenge is signed by a user's private key.\n* `PasswordProtectedKey`: Login challenge is signed by the decrypted user's private key that was sent during [Create User Login Challenge](../registration/inituserregistration) step.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "challengeIdentifier": {
                    "type": "string",
                    "description": "Temporary authentication token returned by the [Create User Action Signature Challenge](https://docs.dfns.co/api-reference/auth/create-user-action-challenge)"
                  },
                  "firstFactor": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "authenticatorData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              },
                              "userHandle": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature",
                              "authenticatorData"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Use a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Use a \"raw\" public/private keypair."
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Password"
                            ]
                          },
                          "password": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "password"
                        ],
                        "title": "<Deprecated> Password",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Password-protected Key",
                        "description": "Use an encrypted private key. "
                      }
                    ],
                    "description": "First factor credential used to sign the user action"
                  },
                  "secondFactor": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "authenticatorData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              },
                              "userHandle": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature",
                              "authenticatorData"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Use a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Use a \"raw\" public/private keypair."
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Totp"
                            ]
                          },
                          "otpCode": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "otpCode"
                        ],
                        "title": "<Deprecated> TOTP",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialAssertion": {
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              },
                              "signature": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "signature"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "credentialAssertion"
                        ],
                        "title": "Password-protected Key",
                        "description": "Use an encrypted private key. "
                      }
                    ],
                    "description": "Second factor credential used to authenticate a user"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "challengeIdentifier",
                  "firstFactor"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "token"
                      ]
                    },
                    {
                      "properties": {
                        "ssoClientId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "ssoClientId"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/login/code": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send Login Code",
        "description": "\n  Sends a temporary one time code to the user that can be used during login flow.\n\nIf the user has a credential of kind `PasswordProtectedKey` a temporary one time code needs to be passed in the `loginCode` field. That's because the [Create Login Challenge](https://docs.dfns.co/api-reference/auth/create-login-challenge) is unauthenticated and returns the encrypted private key of the user. So we need a first step to verify the identity of the user to prevent anybody from fetching the encrypted private key and trying to brute force it offline.\n\n  ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "orgId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "username",
                  "orgId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/login/delegated": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Delegated Login",
        "description": "\n  <Warning>\nOnly a [Service Account](https://docs.dfns.co/api-reference/auth/service-accounts) can use this endpoint.\n</Warning>\n\nLogs a user into an organization without the user's credentials.\n\nIf you want to use your own authentication system, while still using `Delegated Signing`, you can use this endpoint to authenticate a user without needing the user's credentials.\n\nThe user authentication token can be used for read operations within the Dfns API, however, write operations will still require the user to sign the action.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "username": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "username"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "token"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n❌ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Login:Delegated`: Always required."
        }
      }
    },
    "/auth/login/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Login Challenge",
        "description": "Start a user login session, returning a challenge that will be used to verify the user's identity.\n\nIf the user has a credential of kind `PasswordProtectedKey` a temporary one time code needs to be passed in the `loginCode` field.\n\nIf the user has at least one discoverable webauthn credential, `username` is optional (usernamless flow).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "loginCode": {
                    "type": "string"
                  },
                  "orgId": {
                    "type": "string"
                  },
                  "username": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "orgId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowCredentials": {
                      "properties": {
                        "key": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id"
                            ]
                          },
                          "type": "array"
                        },
                        "passwordProtectedKey": {
                          "items": {
                            "properties": {
                              "encryptedPrivateKey": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id",
                              "encryptedPrivateKey"
                            ]
                          },
                          "type": "array"
                        },
                        "webauthn": {
                          "items": {
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string",
                                "enum": [
                                  "public-key"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "type",
                              "id"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "key",
                        "webauthn"
                      ]
                    },
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "challengeIdentifier": {
                      "type": "string"
                    },
                    "externalAuthenticationUrl": {
                      "type": "string"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "items": {
                        "properties": {
                          "factor": {
                            "type": "string",
                            "enum": [
                              "first",
                              "second",
                              "either"
                            ]
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "requiresSecondFactor": {
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "factor",
                          "requiresSecondFactor"
                        ]
                      },
                      "type": "array"
                    },
                    "userVerification": {
                      "type": "string",
                      "enum": [
                        "required",
                        "preferred",
                        "discouraged"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "challenge",
                    "challengeIdentifier",
                    "supportedCredentialKinds",
                    "userVerification",
                    "attestation",
                    "allowCredentials",
                    "externalAuthenticationUrl"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/login/social": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Social Login",
        "description": "Completes the login process and provides the authenticated user with their authentication token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "idToken": {
                    "type": "string"
                  },
                  "orgId": {
                    "type": "string"
                  },
                  "socialLoginProviderKind": {
                    "type": "string",
                    "enum": [
                      "Oidc"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "socialLoginProviderKind",
                  "idToken"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "token"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/login/sso": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Complete SSO Login",
        "description": "Completes the login process and provides the authenticated user with their authentication token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Authorization code obtained from the IdP"
                  },
                  "state": {
                    "type": "string",
                    "description": "State forwarded by the IdP"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "code",
                  "state"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "token"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/login/sso/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Initiate SSO Login",
        "description": "Initialize the login process with SSO by returning the IdP Url to call.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Client Id obtained from the IdP"
                  },
                  "orgId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "or-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Organization id.",
                    "example": "or-30tnh-itmjs-s235s5ontr3r23h2"
                  },
                  "redirectUri": {
                    "type": "string",
                    "format": "uri",
                    "description": "Redirect URI used for the authentication flow"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "orgId",
                  "clientId",
                  "redirectUri"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "ssoRedirectUrl": {
                      "type": "string",
                      "format": "uri",
                      "description": "The URL to redirect the user to authenticate with the IdP"
                    }
                  },
                  "type": "object",
                  "required": [
                    "ssoRedirectUrl"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/logout": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout",
        "description": "Completes the user logout process.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allSessions": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/pats": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Personal Access Tokens",
        "description": "Retrieve the list of your Personal Access Tokens.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Personal Access Token",
        "description": "Create a new Personal Access Token for the caller.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "daysValid": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "permissionId": {
                    "type": "string"
                  },
                  "publicKey": {
                    "type": "string",
                    "pattern": "^-----BEGIN (RSA )?PUBLIC KEY-----[A-Za-z0-9+/=\\n\\r\\\\]+-----END (RSA )?PUBLIC KEY-----\\s?$"
                  },
                  "secondsValid": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "name",
                  "publicKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "credId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Pat",
                        "ServiceAccount",
                        "Token",
                        "Code",
                        "Recovery",
                        "Temp",
                        "Application"
                      ]
                    },
                    "linkedAppId": {
                      "type": "string"
                    },
                    "linkedUserId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "tokenId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "accessToken",
                    "dateCreated",
                    "credId",
                    "isActive",
                    "kind",
                    "linkedUserId",
                    "linkedAppId",
                    "name",
                    "orgId",
                    "publicKey",
                    "tokenId",
                    "permissionAssignments"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\n`Auth:Pats:Create`: Always required."
        }
      }
    },
    "/auth/pats/{tokenId}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Personal Access Token",
        "description": "Retrieve a specific Personal Access Token.",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "credId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Pat",
                        "ServiceAccount",
                        "Token",
                        "Code",
                        "Recovery",
                        "Temp",
                        "Application"
                      ],
                      "description": "Access token kind."
                    },
                    "linkedAppId": {
                      "type": "string"
                    },
                    "linkedUserId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "tokenId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "dateCreated",
                    "credId",
                    "isActive",
                    "kind",
                    "linkedUserId",
                    "linkedAppId",
                    "name",
                    "orgId",
                    "permissionAssignments",
                    "publicKey",
                    "tokenId"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      },
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update Personal Access Token",
        "description": "Update a specific Personal Access Token.",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "externalId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "credId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Pat",
                        "ServiceAccount",
                        "Token",
                        "Code",
                        "Recovery",
                        "Temp",
                        "Application"
                      ],
                      "description": "Access token kind."
                    },
                    "linkedAppId": {
                      "type": "string"
                    },
                    "linkedUserId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "tokenId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "dateCreated",
                    "credId",
                    "isActive",
                    "kind",
                    "linkedUserId",
                    "linkedAppId",
                    "name",
                    "orgId",
                    "permissionAssignments",
                    "publicKey",
                    "tokenId"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete Personal Access Token",
        "description": "Delete a specific Personal Access Token.",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "credId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Pat",
                        "ServiceAccount",
                        "Token",
                        "Code",
                        "Recovery",
                        "Temp",
                        "Application"
                      ],
                      "description": "Access token kind."
                    },
                    "linkedAppId": {
                      "type": "string"
                    },
                    "linkedUserId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "tokenId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "dateCreated",
                    "credId",
                    "isActive",
                    "kind",
                    "linkedUserId",
                    "linkedAppId",
                    "name",
                    "orgId",
                    "permissionAssignments",
                    "publicKey",
                    "tokenId"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/pats/{tokenId}/activate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Activate Personal Access Token",
        "description": "Activate a specific Personal Access Token.",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "credId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Pat",
                        "ServiceAccount",
                        "Token",
                        "Code",
                        "Recovery",
                        "Temp",
                        "Application"
                      ],
                      "description": "Access token kind."
                    },
                    "linkedAppId": {
                      "type": "string"
                    },
                    "linkedUserId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "tokenId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "dateCreated",
                    "credId",
                    "isActive",
                    "kind",
                    "linkedUserId",
                    "linkedAppId",
                    "name",
                    "orgId",
                    "permissionAssignments",
                    "publicKey",
                    "tokenId"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/pats/{tokenId}/deactivate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Deactivate Personal Access Token",
        "description": "Deactivates a credential that was previously active. If the credential is already deactivated no action is taken.",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "credId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "isActive": {
                      "type": "boolean"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Pat",
                        "ServiceAccount",
                        "Token",
                        "Code",
                        "Recovery",
                        "Temp",
                        "Application"
                      ],
                      "description": "Access token kind."
                    },
                    "linkedAppId": {
                      "type": "string"
                    },
                    "linkedUserId": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "orgId": {
                      "type": "string"
                    },
                    "permissionAssignments": {
                      "items": {
                        "properties": {
                          "assignmentId": {
                            "type": "string"
                          },
                          "operations": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array"
                          },
                          "permissionId": {
                            "type": "string"
                          },
                          "permissionName": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "permissionName",
                          "permissionId",
                          "assignmentId"
                        ]
                      },
                      "type": "array"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "tokenId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "dateCreated",
                    "credId",
                    "isActive",
                    "kind",
                    "linkedUserId",
                    "linkedAppId",
                    "name",
                    "orgId",
                    "permissionAssignments",
                    "publicKey",
                    "tokenId"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/recover/user": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Recover User",
        "description": "Recovers a user, using a recovery credential. After successfully recovering the user, all of the user's previous credentials and personal access tokens will be invalidated.\n\nThis flow requires cryptographic validation of newly created credential(s) using a recovery credential. The `recovery.credentialAssertion.clientData` field's challenge must be the _base64url-encoded_ representation of the `newCredential` object.\n\nThe process is as follows:\n\n1. Construct the `newCredential` object, using the challenge obtained from either the [Create Recovery Challenge](https://docs.dfns.co/api-reference/auth/create-recovery-challenge) or [Create Delegated Recovery Challenge](https://docs.dfns.co/api-reference/auth/create-delegated-recovery-challenge) endpoints.\n2. Serialize the `newCredential` object to JSON and then base64url-encode the resulting JSON string. This _base64url-encoded_ string will serve as the challenge for the `recovery.credentialAssertion` object.\n3. Construct the `recovery.credentialAssertion` object, using the _base64url-encoded_ string generated in step 2 as its challenge.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "newCredentials": {
                    "properties": {
                      "firstFactorCredential": {
                        "oneOf": [
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "attestationData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "clientData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "credId": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "credId",
                                  "clientData",
                                  "attestationData"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "Fido2"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo"
                            ],
                            "title": "Fido2/Passkeys",
                            "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                          },
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "attestationData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "clientData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "credId": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "credId",
                                  "clientData",
                                  "attestationData"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "Key"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo"
                            ],
                            "title": "Public/Private key pair",
                            "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                          },
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "password": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "password"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "Password"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo"
                            ],
                            "title": "<Deprecated> Password",
                            "description": "Not supported, will be removed in a future release."
                          },
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "attestationData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "clientData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "credId": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "credId",
                                  "clientData",
                                  "attestationData"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "PasswordProtectedKey"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              },
                              "encryptedPrivateKey": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo",
                              "encryptedPrivateKey"
                            ],
                            "title": "Password-protected Key",
                            "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                          }
                        ]
                      },
                      "recoveryCredential": {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "RecoveryKey"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          },
                          "encryptedPrivateKey": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Recovery Key",
                        "description": "Register a recovery key. See [Account Recovery](https://docs.dfns.co/api-reference/auth/account-recovery) for more details."
                      },
                      "secondFactorCredential": {
                        "oneOf": [
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "attestationData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "clientData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "credId": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "credId",
                                  "clientData",
                                  "attestationData"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "Fido2"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo"
                            ],
                            "title": "Fido2/Passkeys",
                            "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                          },
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "attestationData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "clientData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "credId": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "credId",
                                  "clientData",
                                  "attestationData"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "Key"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo"
                            ],
                            "title": "Public/Private key pair",
                            "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                          },
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "otpCode": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "otpCode"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "Totp"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo"
                            ],
                            "title": "<Deprecated> TOTP",
                            "description": "Not supported, will be removed in a future release."
                          },
                          {
                            "properties": {
                              "credentialInfo": {
                                "properties": {
                                  "attestationData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "clientData": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "credId": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "credId",
                                  "clientData",
                                  "attestationData"
                                ]
                              },
                              "credentialKind": {
                                "type": "string",
                                "enum": [
                                  "PasswordProtectedKey"
                                ]
                              },
                              "credentialName": {
                                "type": "string",
                                "minLength": 1
                              },
                              "encryptedPrivateKey": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credentialKind",
                              "credentialInfo",
                              "encryptedPrivateKey"
                            ],
                            "title": "Password-protected Key",
                            "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "firstFactorCredential"
                    ]
                  },
                  "recovery": {
                    "properties": {
                      "credentialAssertion": {
                        "properties": {
                          "algorithm": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          },
                          "signature": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "signature"
                        ]
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "RecoveryKey"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "credentialAssertion"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "recovery",
                  "newCredentials"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "credential": {
                      "properties": {
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Fido2",
                            "Key",
                            "Password",
                            "Totp",
                            "RecoveryKey",
                            "PasswordProtectedKey"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "uuid": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "uuid",
                        "kind",
                        "name"
                      ]
                    },
                    "user": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "username",
                        "orgId"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "credential",
                    "user"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n❌ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account    \n✅ Recovery Code\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/recover/user/code": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send Recovery Code Email",
        "description": "Send the user a recovery verification code. This code is used as a second factor to verify the user initiated the recovery request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "orgId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "username": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "username",
                  "orgId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/recover/user/delegated": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Delegated Recovery Challenge",
        "description": "\n<Warning>\nOnly a [Service Account](https://docs.dfns.co/api-reference/auth/service-accounts) can use this endpoint.\n</Warning>\n\nThis endpoint enables setting up a recovery workflow for Delegated Signing. Via this configuration, the end user will not receive an email from Dfns but instead can establish recovery credentials that leverage the customer's brand for the recovery workflow.\n\nOnce the user has been verified by your auth system and this API has been called, you can call [Recover User](https://docs.dfns.co/api-reference/auth/recover) to complete the recovery process.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "username": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "username",
                  "credentialId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowedRecoveryCredentials": {
                      "items": {
                        "properties": {
                          "encryptedRecoveryKey": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "id",
                          "encryptedRecoveryKey"
                        ]
                      },
                      "type": "array"
                    },
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "authenticatorSelection": {
                      "properties": {
                        "authenticatorAttachment": {
                          "type": "string",
                          "enum": [
                            "platform",
                            "cross-platform"
                          ]
                        },
                        "requireResidentKey": {
                          "type": "boolean"
                        },
                        "residentKey": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        },
                        "userVerification": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "residentKey",
                        "requireResidentKey",
                        "userVerification"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "excludeCredentials": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "id"
                        ]
                      },
                      "type": "array"
                    },
                    "otpUrl": {
                      "type": "string"
                    },
                    "pubKeyCredParams": {
                      "items": {
                        "properties": {
                          "alg": {
                            "type": "number"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "alg"
                        ]
                      },
                      "type": "array"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "properties": {
                        "firstFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        },
                        "secondFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "firstFactor",
                        "secondFactor"
                      ]
                    },
                    "temporaryAuthenticationToken": {
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "displayName",
                        "name"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "user",
                    "temporaryAuthenticationToken",
                    "challenge",
                    "supportedCredentialKinds",
                    "authenticatorSelection",
                    "attestation",
                    "pubKeyCredParams",
                    "excludeCredentials",
                    "otpUrl",
                    "allowedRecoveryCredentials"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n❌ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Recover:Delegated`: Always required."
        }
      }
    },
    "/auth/recover/user/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Recovery Challenge",
        "description": "Starts a user recovery session, returning a challenge that will be used to verify the user's identity.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "orgId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "username": {
                    "type": "string",
                    "minLength": 1
                  },
                  "verificationCode": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "username",
                  "verificationCode",
                  "orgId",
                  "credentialId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowedRecoveryCredentials": {
                      "items": {
                        "properties": {
                          "encryptedRecoveryKey": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "id",
                          "encryptedRecoveryKey"
                        ]
                      },
                      "type": "array"
                    },
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "authenticatorSelection": {
                      "properties": {
                        "authenticatorAttachment": {
                          "type": "string",
                          "enum": [
                            "platform",
                            "cross-platform"
                          ]
                        },
                        "requireResidentKey": {
                          "type": "boolean"
                        },
                        "residentKey": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        },
                        "userVerification": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "residentKey",
                        "requireResidentKey",
                        "userVerification"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "excludeCredentials": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "id"
                        ]
                      },
                      "type": "array"
                    },
                    "otpUrl": {
                      "type": "string"
                    },
                    "pubKeyCredParams": {
                      "items": {
                        "properties": {
                          "alg": {
                            "type": "number"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "alg"
                        ]
                      },
                      "type": "array"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "properties": {
                        "firstFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        },
                        "secondFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "firstFactor",
                        "secondFactor"
                      ]
                    },
                    "temporaryAuthenticationToken": {
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "displayName",
                        "name"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "user",
                    "temporaryAuthenticationToken",
                    "challenge",
                    "supportedCredentialKinds",
                    "authenticatorSelection",
                    "attestation",
                    "pubKeyCredParams",
                    "excludeCredentials",
                    "otpUrl",
                    "allowedRecoveryCredentials"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/registration": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Complete User Registration",
        "description": "Completes the user registration process and creates the user's initial credentials.\n\nThe type of credentials being registered is determined by the `credentialKind` field in the nested objects (`firstFactorCredential` , `secondFactorCredential` and `RecoveryCredential`). Supported credential kinds are:\n* `Fido2`: User action is signed by a user's signing device using `WebAuthn`.\n* `Key`: User action is signed by a user's, or token's, private key.\n* `PasswordProtectedKey`: User action is signed by a user's, or token's, private key. The encrypted version of the private key is stored by Dfns and returns during the signing flow for the user to decrypt it.\n* `RecoveryKey` : Similar to `PasswordProtectedKey`, but this credential can only be used to recover an account not to sign an action or login. Once this credential is used all the other user's credentials are invalidated.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "firstFactorCredential": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "password": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "password"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Password"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "<Deprecated> Password",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          },
                          "encryptedPrivateKey": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo",
                          "encryptedPrivateKey"
                        ],
                        "title": "Password-protected Key",
                        "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                      }
                    ]
                  },
                  "recoveryCredential": {
                    "properties": {
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "RecoveryKey"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "encryptedPrivateKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo"
                    ],
                    "title": "Recovery Key",
                    "description": "Register a recovery key. See [Account Recovery](https://docs.dfns.co/api-reference/auth/account-recovery) for more details."
                  },
                  "secondFactorCredential": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "otpCode": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "otpCode"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Totp"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "<Deprecated> TOTP",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          },
                          "encryptedPrivateKey": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo",
                          "encryptedPrivateKey"
                        ],
                        "title": "Password-protected Key",
                        "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "firstFactorCredential"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "credential": {
                      "properties": {
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Fido2",
                            "Key",
                            "Password",
                            "Totp",
                            "RecoveryKey",
                            "PasswordProtectedKey"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "uuid": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "uuid",
                        "kind",
                        "name"
                      ]
                    },
                    "user": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "username",
                        "orgId"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "credential",
                    "user"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n❌ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account    \n✅ Registration Code\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/registration/code": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Resend Registration Code",
        "description": "Sends the user a new registration code. The previous registration code will be marked invalid. If the user has already completed their registration no action will be taken.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "orgId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "username": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "username",
                  "orgId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "message"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/registration/delegated": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Delegated Registration Challenge",
        "description": "<Warning>\nOnly a [Service Account](https://docs.dfns.co/api-reference/auth/service-accounts) can use this endpoint.\n</Warning>\n\nIf you want to use your own authentication system, while still using `Delegated Signing`, you can use this endpoint to register a new End User in your organization, without your user needing to receive an email from Dfns.\n\nThis endpoint will:\n1. Create a new User attached to your organization\n2. Initiates a User Registration Challenge and returns the registration challenge.\n\nOn successful creation, the user's registration challenge will be returned. You will then need to call [Complete User Registration](https://docs.dfns.co/api-reference/auth/register) or [Complete End User Registration with Wallets](https://docs.dfns.co/api-reference/auth/register-end-user) to complete the user's registration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string",
                    "minLength": 1
                  },
                  "externalId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "EndUser"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "email",
                  "kind"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "authenticatorSelection": {
                      "properties": {
                        "authenticatorAttachment": {
                          "type": "string",
                          "enum": [
                            "platform",
                            "cross-platform"
                          ]
                        },
                        "requireResidentKey": {
                          "type": "boolean"
                        },
                        "residentKey": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        },
                        "userVerification": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "residentKey",
                        "requireResidentKey",
                        "userVerification"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "excludeCredentials": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "id"
                        ]
                      },
                      "type": "array"
                    },
                    "otpUrl": {
                      "type": "string"
                    },
                    "pubKeyCredParams": {
                      "items": {
                        "properties": {
                          "alg": {
                            "type": "number"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "alg"
                        ]
                      },
                      "type": "array"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "properties": {
                        "firstFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        },
                        "secondFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "firstFactor",
                        "secondFactor"
                      ]
                    },
                    "temporaryAuthenticationToken": {
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "displayName",
                        "name"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "user",
                    "temporaryAuthenticationToken",
                    "challenge",
                    "supportedCredentialKinds",
                    "authenticatorSelection",
                    "attestation",
                    "pubKeyCredParams",
                    "excludeCredentials",
                    "otpUrl"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n❌ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Register:Delegated`: Always required."
        }
      }
    },
    "/auth/registration/enduser": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Complete End User Registration with Wallets",
        "description": "Completes the end user registration process and creates the user's initial credentials along with delegated wallets for the new end user.\n\nThe type of credentials being registered is determined by the `credentialKind` field in the nested objects (`firstFactorCredential` , `secondFactorCredential` and `RecoveryCredential`). Supported credential kinds are:\n* `Fido2`: User action is signed by a user's signing device using `WebAuthn`.\n* `Key`: User action is signed by a user's, or token's, private key.\n* `PasswordProtectedKey`: User action is signed by a user's, or token's, private key. The encrypted version of the private key is stored by Dfns and returns during the signing flow for the user to decrypt it.\n\nThe number of delegated wallets created and the wallet types are determined by the `wallets` specifications. The end user is automatically assigned `DfnsDefaultEndUserAccess` managed permission that grants the end user full access to the wallets.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "firstFactorCredential": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "password": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "password"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Password"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "<Deprecated> Password",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          },
                          "encryptedPrivateKey": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo",
                          "encryptedPrivateKey"
                        ],
                        "title": "Password-protected Key",
                        "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                      }
                    ]
                  },
                  "recoveryCredential": {
                    "properties": {
                      "credentialInfo": {
                        "properties": {
                          "attestationData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "clientData": {
                            "type": "string",
                            "minLength": 1
                          },
                          "credId": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credId",
                          "clientData",
                          "attestationData"
                        ]
                      },
                      "credentialKind": {
                        "type": "string",
                        "enum": [
                          "RecoveryKey"
                        ]
                      },
                      "credentialName": {
                        "type": "string",
                        "minLength": 1
                      },
                      "encryptedPrivateKey": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "credentialKind",
                      "credentialInfo"
                    ],
                    "title": "Recovery Key",
                    "description": "Register a recovery key. See [Account Recovery](https://docs.dfns.co/api-reference/auth/account-recovery) for more details."
                  },
                  "secondFactorCredential": {
                    "oneOf": [
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Fido2"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Fido2/Passkeys",
                        "description": "Register a Fido2 Credential, also known as Passkeys or WebauthN credential."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Key"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "Public/Private key pair",
                        "description": "Register a \"raw\" public/private keypair, mostly meant to be used by Service Accounts. See [Generate a Key Pair](https://docs.dfns.co/developers/guides/generate-a-key-pair) for more details."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "otpCode": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "otpCode"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "Totp"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo"
                        ],
                        "title": "<Deprecated> TOTP",
                        "description": "Not supported, will be removed in a future release."
                      },
                      {
                        "properties": {
                          "credentialInfo": {
                            "properties": {
                              "attestationData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "clientData": {
                                "type": "string",
                                "minLength": 1
                              },
                              "credId": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "credId",
                              "clientData",
                              "attestationData"
                            ]
                          },
                          "credentialKind": {
                            "type": "string",
                            "enum": [
                              "PasswordProtectedKey"
                            ]
                          },
                          "credentialName": {
                            "type": "string",
                            "minLength": 1
                          },
                          "encryptedPrivateKey": {
                            "type": "string",
                            "minLength": 1
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "credentialKind",
                          "credentialInfo",
                          "encryptedPrivateKey"
                        ],
                        "title": "Password-protected Key",
                        "description": "Register an encrypted private key. Note that Dfns only stores the encrypted private key and should not have access to the password to decrypt it!"
                      }
                    ]
                  },
                  "wallets": {
                    "items": {
                      "properties": {
                        "name": {
                          "type": "string",
                          "maxLength": 100,
                          "description": "Wallet nickname."
                        },
                        "network": {
                          "type": "string",
                          "enum": [
                            "Algorand",
                            "AlgorandTestnet",
                            "Aptos",
                            "AptosTestnet",
                            "ArbitrumOne",
                            "ArbitrumSepolia",
                            "AvalancheC",
                            "AvalancheCFuji",
                            "BabylonGenesis",
                            "BabylonTestnet5",
                            "Base",
                            "BaseSepolia",
                            "Berachain",
                            "BerachainBepolia",
                            "Bitcoin",
                            "BitcoinSignet",
                            "BitcoinTestnet3",
                            "BitcoinCash",
                            "Bob",
                            "BobSepolia",
                            "Bsc",
                            "BscTestnet",
                            "Canton",
                            "CantonTestnet",
                            "Cardano",
                            "CardanoPreprod",
                            "Celo",
                            "CeloAlfajores",
                            "Codex",
                            "CodexSepolia",
                            "CosmosHub4",
                            "CosmosIcsTestnet",
                            "Dogecoin",
                            "Ethereum",
                            "EthereumGoerli",
                            "EthereumSepolia",
                            "EthereumHolesky",
                            "EthereumHoodi",
                            "FantomOpera",
                            "FantomTestnet",
                            "FlareC",
                            "FlareCCoston2",
                            "Hedera",
                            "HederaTestnet",
                            "Ink",
                            "InkSepolia",
                            "InternetComputer",
                            "Ion",
                            "IonTestnet",
                            "Iota",
                            "IotaTestnet",
                            "KadenaTestnet4",
                            "Kadena",
                            "Kaspa",
                            "Kusama",
                            "Litecoin",
                            "Near",
                            "NearTestnet",
                            "Optimism",
                            "OptimismSepolia",
                            "Origyn",
                            "Plume",
                            "PlumeSepolia",
                            "Polkadot",
                            "Polygon",
                            "PolygonAmoy",
                            "Polymesh",
                            "PolymeshTestnet",
                            "Race",
                            "RaceSepolia",
                            "SeiAtlantic2",
                            "SeiPacific1",
                            "Solana",
                            "SolanaDevnet",
                            "Stellar",
                            "StellarTestnet",
                            "Sui",
                            "SuiTestnet",
                            "Tsc",
                            "TscTestnet1",
                            "Tezos",
                            "TezosGhostnet",
                            "Ton",
                            "TonTestnet",
                            "Tron",
                            "TronNile",
                            "Westend",
                            "XrpLedger",
                            "XrpLedgerTestnet"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "network"
                      ]
                    },
                    "type": "array",
                    "minItems": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "firstFactorCredential",
                  "wallets"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "authentication": {
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "token"
                      ]
                    },
                    "credential": {
                      "properties": {
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Fido2",
                            "Key",
                            "Password",
                            "Totp",
                            "RecoveryKey",
                            "PasswordProtectedKey"
                          ]
                        },
                        "name": {
                          "type": "string"
                        },
                        "uuid": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "uuid",
                        "kind",
                        "name"
                      ]
                    },
                    "user": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "username",
                        "orgId"
                      ]
                    },
                    "wallets": {
                      "items": {
                        "$ref": "#/components/schemas/Wallet",
                        "summary": null,
                        "description": null
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "credential",
                    "user",
                    "authentication",
                    "wallets"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n❌ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account    \n✅ Registration Code\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/auth/registration/init": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Registration Challenge",
        "description": "Starts a user registration session. It returns a challenge that will need to be signed by a passkey and used to perform the step [Complete User Registration](/api-reference/auth/register)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "orgId": {
                    "type": "string",
                    "minLength": 1
                  },
                  "registrationCode": {
                    "type": "string",
                    "minLength": 1
                  },
                  "username": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "orgId",
                  "username",
                  "registrationCode"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "authenticatorSelection": {
                      "properties": {
                        "authenticatorAttachment": {
                          "type": "string",
                          "enum": [
                            "platform",
                            "cross-platform"
                          ]
                        },
                        "requireResidentKey": {
                          "type": "boolean"
                        },
                        "residentKey": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        },
                        "userVerification": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "residentKey",
                        "requireResidentKey",
                        "userVerification"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "excludeCredentials": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "id"
                        ]
                      },
                      "type": "array"
                    },
                    "otpUrl": {
                      "type": "string"
                    },
                    "pubKeyCredParams": {
                      "items": {
                        "properties": {
                          "alg": {
                            "type": "number"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "alg"
                        ]
                      },
                      "type": "array"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "properties": {
                        "firstFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        },
                        "secondFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "firstFactor",
                        "secondFactor"
                      ]
                    },
                    "temporaryAuthenticationToken": {
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "displayName",
                        "name"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "user",
                    "temporaryAuthenticationToken",
                    "challenge",
                    "supportedCredentialKinds",
                    "authenticatorSelection",
                    "attestation",
                    "pubKeyCredParams",
                    "excludeCredentials",
                    "otpUrl"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/registration/social": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Social Registration Challenge",
        "description": "Starts an end-user registration session by passing a JWT obtained by an IdP. It returns a challenge that will need to be signed by a passkey and used to perform [Complete End User Registration with Wallets](/api-reference/auth/register-end-user).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "idToken": {
                    "type": "string"
                  },
                  "orgId": {
                    "type": "string"
                  },
                  "socialLoginProviderKind": {
                    "type": "string",
                    "enum": [
                      "Oidc"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "socialLoginProviderKind",
                  "idToken"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "attestation": {
                      "type": "string",
                      "enum": [
                        "none",
                        "indirect",
                        "direct",
                        "enterprise"
                      ]
                    },
                    "authenticatorSelection": {
                      "properties": {
                        "authenticatorAttachment": {
                          "type": "string",
                          "enum": [
                            "platform",
                            "cross-platform"
                          ]
                        },
                        "requireResidentKey": {
                          "type": "boolean"
                        },
                        "residentKey": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        },
                        "userVerification": {
                          "type": "string",
                          "enum": [
                            "required",
                            "preferred",
                            "discouraged"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "residentKey",
                        "requireResidentKey",
                        "userVerification"
                      ]
                    },
                    "challenge": {
                      "type": "string"
                    },
                    "excludeCredentials": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "id"
                        ]
                      },
                      "type": "array"
                    },
                    "otpUrl": {
                      "type": "string"
                    },
                    "pubKeyCredParams": {
                      "items": {
                        "properties": {
                          "alg": {
                            "type": "number"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "public-key"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "type",
                          "alg"
                        ]
                      },
                      "type": "array"
                    },
                    "rp": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "name"
                      ]
                    },
                    "supportedCredentialKinds": {
                      "properties": {
                        "firstFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        },
                        "secondFactor": {
                          "items": {
                            "type": "string",
                            "enum": [
                              "Fido2",
                              "Key",
                              "Password",
                              "Totp",
                              "RecoveryKey",
                              "PasswordProtectedKey"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "firstFactor",
                        "secondFactor"
                      ]
                    },
                    "temporaryAuthenticationToken": {
                      "type": "string"
                    },
                    "user": {
                      "properties": {
                        "displayName": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "displayName",
                        "name"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "user",
                    "temporaryAuthenticationToken",
                    "challenge",
                    "supportedCredentialKinds",
                    "authenticatorSelection",
                    "attestation",
                    "pubKeyCredParams",
                    "excludeCredentials",
                    "otpUrl"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {}
        ],
        "x-mint": {
          "content": "#### Authentication\n\nNo authentication required.\n\n#### Required Permissions\n\nNo authentication required."
        }
      }
    },
    "/auth/service-accounts": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Service Accounts",
        "description": "List all Service Accounts in your organization.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "accessTokens": {
                            "items": {
                              "properties": {
                                "accessToken": {
                                  "type": "string"
                                },
                                "credId": {
                                  "type": "string"
                                },
                                "dateCreated": {
                                  "type": "string"
                                },
                                "isActive": {
                                  "type": "boolean"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Pat",
                                    "ServiceAccount",
                                    "Token",
                                    "Code",
                                    "Recovery",
                                    "Temp",
                                    "Application"
                                  ],
                                  "description": "Access token kind."
                                },
                                "linkedAppId": {
                                  "type": "string"
                                },
                                "linkedUserId": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "orgId": {
                                  "type": "string"
                                },
                                "permissionAssignments": {
                                  "items": {
                                    "properties": {
                                      "assignmentId": {
                                        "type": "string"
                                      },
                                      "operations": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "permissionId": {
                                        "type": "string"
                                      },
                                      "permissionName": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "permissionName",
                                      "permissionId",
                                      "assignmentId"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "publicKey": {
                                  "type": "string"
                                },
                                "tokenId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "dateCreated",
                                "credId",
                                "isActive",
                                "kind",
                                "linkedUserId",
                                "linkedAppId",
                                "name",
                                "orgId",
                                "permissionAssignments",
                                "publicKey",
                                "tokenId"
                              ]
                            },
                            "type": "array"
                          },
                          "userInfo": {
                            "properties": {
                              "credentialUuid": {
                                "type": "string"
                              },
                              "isActive": {
                                "type": "boolean"
                              },
                              "isRegistered": {
                                "type": "boolean"
                              },
                              "isServiceAccount": {
                                "type": "boolean"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "CustomerEmployee",
                                  "EndUser"
                                ],
                                "description": "User kind."
                              },
                              "name": {
                                "type": "string"
                              },
                              "orgId": {
                                "type": "string"
                              },
                              "permissionAssignments": {
                                "items": {
                                  "properties": {
                                    "assignmentId": {
                                      "type": "string"
                                    },
                                    "operations": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "permissionId": {
                                      "type": "string"
                                    },
                                    "permissionName": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "permissionName",
                                    "permissionId",
                                    "assignmentId"
                                  ]
                                },
                                "type": "array"
                              },
                              "permissions": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "userId": {
                                "type": "string",
                                "maxLength": 64,
                                "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                                "description": "User id.",
                                "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                              },
                              "username": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "username",
                              "name",
                              "userId",
                              "kind",
                              "credentialUuid",
                              "orgId",
                              "isActive",
                              "isServiceAccount",
                              "isRegistered",
                              "permissionAssignments"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "userInfo",
                          "accessTokens"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create Service Account",
        "description": "Create a new Service Account for your organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "daysValid": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "permissionId": {
                    "type": "string"
                  },
                  "publicKey": {
                    "type": "string",
                    "pattern": "^-----BEGIN (RSA )?PUBLIC KEY-----[A-Za-z0-9+/=\\n\\r\\\\]+-----END (RSA )?PUBLIC KEY-----\\s?$"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "name",
                  "publicKey"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "userInfo": {
                      "properties": {
                        "credentialUuid": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isRegistered": {
                          "type": "boolean"
                        },
                        "isServiceAccount": {
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "CustomerEmployee",
                            "EndUser"
                          ],
                          "description": "User kind."
                        },
                        "name": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "permissionAssignments": {
                          "items": {
                            "properties": {
                              "assignmentId": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "permissionId": {
                                "type": "string"
                              },
                              "permissionName": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "permissionName",
                              "permissionId",
                              "assignmentId"
                            ]
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 64,
                          "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                          "description": "User id.",
                          "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "username",
                        "name",
                        "userId",
                        "kind",
                        "credentialUuid",
                        "orgId",
                        "isActive",
                        "isServiceAccount",
                        "isRegistered",
                        "permissionAssignments"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "userInfo",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n❌ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Create`: Always required."
        }
      }
    },
    "/auth/service-accounts/{serviceAccountId}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Service Account",
        "description": "Get information about a specific Service Account.",
        "parameters": [
          {
            "name": "serviceAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "userInfo": {
                      "properties": {
                        "credentialUuid": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isRegistered": {
                          "type": "boolean"
                        },
                        "isServiceAccount": {
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "CustomerEmployee",
                            "EndUser"
                          ],
                          "description": "User kind."
                        },
                        "name": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "permissionAssignments": {
                          "items": {
                            "properties": {
                              "assignmentId": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "permissionId": {
                                "type": "string"
                              },
                              "permissionName": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "permissionName",
                              "permissionId",
                              "assignmentId"
                            ]
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 64,
                          "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                          "description": "User id.",
                          "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "username",
                        "name",
                        "userId",
                        "kind",
                        "credentialUuid",
                        "orgId",
                        "isActive",
                        "isServiceAccount",
                        "isRegistered",
                        "permissionAssignments"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "userInfo",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update Service Account",
        "description": "Update a specific Service Account.",
        "parameters": [
          {
            "name": "serviceAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "externalId": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "userInfo": {
                      "properties": {
                        "credentialUuid": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isRegistered": {
                          "type": "boolean"
                        },
                        "isServiceAccount": {
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "CustomerEmployee",
                            "EndUser"
                          ],
                          "description": "User kind."
                        },
                        "name": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "permissionAssignments": {
                          "items": {
                            "properties": {
                              "assignmentId": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "permissionId": {
                                "type": "string"
                              },
                              "permissionName": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "permissionName",
                              "permissionId",
                              "assignmentId"
                            ]
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 64,
                          "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                          "description": "User id.",
                          "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "username",
                        "name",
                        "userId",
                        "kind",
                        "credentialUuid",
                        "orgId",
                        "isActive",
                        "isServiceAccount",
                        "isRegistered",
                        "permissionAssignments"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "userInfo",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Update`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete Service Account",
        "description": "Delete a specific Service Account.",
        "parameters": [
          {
            "name": "serviceAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "userInfo": {
                      "properties": {
                        "credentialUuid": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isRegistered": {
                          "type": "boolean"
                        },
                        "isServiceAccount": {
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "CustomerEmployee",
                            "EndUser"
                          ],
                          "description": "User kind."
                        },
                        "name": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "permissionAssignments": {
                          "items": {
                            "properties": {
                              "assignmentId": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "permissionId": {
                                "type": "string"
                              },
                              "permissionName": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "permissionName",
                              "permissionId",
                              "assignmentId"
                            ]
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 64,
                          "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                          "description": "User id.",
                          "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "username",
                        "name",
                        "userId",
                        "kind",
                        "credentialUuid",
                        "orgId",
                        "isActive",
                        "isServiceAccount",
                        "isRegistered",
                        "permissionAssignments"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "userInfo",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Delete`: Always required."
        }
      }
    },
    "/auth/service-accounts/{serviceAccountId}/activate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Activate Service Account",
        "description": "Activate a specific Service Account.",
        "parameters": [
          {
            "name": "serviceAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "userInfo": {
                      "properties": {
                        "credentialUuid": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isRegistered": {
                          "type": "boolean"
                        },
                        "isServiceAccount": {
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "CustomerEmployee",
                            "EndUser"
                          ],
                          "description": "User kind."
                        },
                        "name": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "permissionAssignments": {
                          "items": {
                            "properties": {
                              "assignmentId": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "permissionId": {
                                "type": "string"
                              },
                              "permissionName": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "permissionName",
                              "permissionId",
                              "assignmentId"
                            ]
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 64,
                          "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                          "description": "User id.",
                          "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "username",
                        "name",
                        "userId",
                        "kind",
                        "credentialUuid",
                        "orgId",
                        "isActive",
                        "isServiceAccount",
                        "isRegistered",
                        "permissionAssignments"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "userInfo",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Activate`: Always required."
        }
      }
    },
    "/auth/service-accounts/{serviceAccountId}/deactivate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Deactivate Service Account",
        "description": "Deactivate a specific Service Account.",
        "parameters": [
          {
            "name": "serviceAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accessTokens": {
                      "items": {
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "credId": {
                            "type": "string"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "isActive": {
                            "type": "boolean"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Pat",
                              "ServiceAccount",
                              "Token",
                              "Code",
                              "Recovery",
                              "Temp",
                              "Application"
                            ],
                            "description": "Access token kind."
                          },
                          "linkedAppId": {
                            "type": "string"
                          },
                          "linkedUserId": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "orgId": {
                            "type": "string"
                          },
                          "permissionAssignments": {
                            "items": {
                              "properties": {
                                "assignmentId": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "permissionId": {
                                  "type": "string"
                                },
                                "permissionName": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "permissionName",
                                "permissionId",
                                "assignmentId"
                              ]
                            },
                            "type": "array"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "tokenId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "dateCreated",
                          "credId",
                          "isActive",
                          "kind",
                          "linkedUserId",
                          "linkedAppId",
                          "name",
                          "orgId",
                          "permissionAssignments",
                          "publicKey",
                          "tokenId"
                        ]
                      },
                      "type": "array"
                    },
                    "userInfo": {
                      "properties": {
                        "credentialUuid": {
                          "type": "string"
                        },
                        "isActive": {
                          "type": "boolean"
                        },
                        "isRegistered": {
                          "type": "boolean"
                        },
                        "isServiceAccount": {
                          "type": "boolean"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "CustomerEmployee",
                            "EndUser"
                          ],
                          "description": "User kind."
                        },
                        "name": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        },
                        "permissionAssignments": {
                          "items": {
                            "properties": {
                              "assignmentId": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "permissionId": {
                                "type": "string"
                              },
                              "permissionName": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "permissionName",
                              "permissionId",
                              "assignmentId"
                            ]
                          },
                          "type": "array"
                        },
                        "permissions": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "userId": {
                          "type": "string",
                          "maxLength": 64,
                          "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                          "description": "User id.",
                          "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                        },
                        "username": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "username",
                        "name",
                        "userId",
                        "kind",
                        "credentialUuid",
                        "orgId",
                        "isActive",
                        "isServiceAccount",
                        "isRegistered",
                        "permissionAssignments"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "userInfo",
                    "accessTokens"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:ServiceAccounts:Deactivate`: Always required."
        }
      }
    },
    "/auth/users": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "List Users",
        "description": "List all Users in your organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": 0
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "CustomerEmployee",
                "EndUser"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/User",
                        "summary": null,
                        "description": null
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Create User",
        "description": "Invite a new user in the caller's org. This will create the user and send a registration email to the created User's email, with a registration code, and pointing him to complete his registration on Dfns Dashboard. The user is created without any permissions.\n  \n  <Note>If you want the created User to not know about about Dfns, and don't want him to \n  receive the registration email from Dfns, you should rather use the Delegated Registration \n  endpoint.</Note>\n  ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the new user."
                  },
                  "externalId": {
                    "type": "string",
                    "description": "Value that can be used to correlate the entity with an external system."
                  },
                  "isSSORequired": {
                    "type": "boolean",
                    "description": "If set to true, the user will have to authenticate via SSO",
                    "default": false
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "CustomerEmployee"
                    ],
                    "description": "The kind of user being created. \n      In this endpoint it can only be \"`CustomerEmployee`\" (creating an \"`EndUser`\" is done through the [Delegated Registration](https://docs.dfns.co/api-reference/auth/registration-flows#delegated-users-registration-flow) endpoint)"
                  },
                  "publicKey": {
                    "type": "string"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "email",
                  "kind"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Create`: Always required."
        }
      }
    },
    "/auth/users/{userId}": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get User",
        "description": "Retrieve information about a specific User.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update User",
        "description": "Update a specific User.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isSSORequired": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "isSSORequired"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Update`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Auth"
        ],
        "summary": "Delete User",
        "description": "Delete a specific User.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Delete`: Always required."
        }
      }
    },
    "/auth/users/{userId}/activate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Activate User",
        "description": "Activate a specific User.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Activate`: Always required."
        }
      }
    },
    "/auth/users/{userId}/deactivate": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Deactivate User",
        "description": "Deactivate a specific User.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Personal Access Token not allowed    \n✅ Service Account\n\n#### Required Permissions\n\n`Auth:Users:Deactivate`: Always required."
        }
      }
    },
    "/exchanges": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "List Exchanges",
        "description": "List all configured exchange integrations.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "dateCreated": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Binance",
                              "Kraken",
                              "CoinbaseApp",
                              "CoinbasePrime"
                            ]
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "kind",
                          "dateCreated"
                        ]
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\n`Exchanges:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Create Exchange",
        "description": "Link your organization with a cryptocurrency exchange.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Binance",
                      "Kraken",
                      "CoinbaseApp",
                      "CoinbasePrime"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "readConfiguration": {
                    "properties": {
                      "otp": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "privateApiKey": {
                        "type": "string"
                      },
                      "publicApiKey": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "publicApiKey",
                      "privateApiKey"
                    ]
                  },
                  "writeConfiguration": {
                    "properties": {
                      "otp": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      },
                      "privateApiKey": {
                        "type": "string"
                      },
                      "publicApiKey": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "publicApiKey",
                      "privateApiKey"
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "readConfiguration",
                  "writeConfiguration"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Binance",
                        "Kraken",
                        "CoinbaseApp",
                        "CoinbasePrime"
                      ]
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "kind",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\n`Exchanges:Create`: Always required."
        }
      }
    },
    "/exchanges/{exchangeId}": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Get Exchange",
        "description": "Retrieve the details of a specific exchange integration configuration.",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Binance",
                        "Kraken",
                        "CoinbaseApp",
                        "CoinbasePrime"
                      ]
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "kind",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\n`Exchanges:Read`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Delete Exchange",
        "description": "Delete the exchange configuration from your organization.",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deleted": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "deleted"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\n`Exchanges:Delete`: Always required."
        }
      }
    },
    "/exchanges/{exchangeId}/accounts": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "List Accounts",
        "description": "Get a list of accounts for a specific exchange.",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "exchangeId": {
                            "type": "string"
                          },
                          "exchangeName": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "exchangeId"
                        ]
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\n`Exchanges:Read`: Always required."
        }
      }
    },
    "/exchanges/{exchangeId}/accounts/{accountId}/assets": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "List Account Assets",
        "description": "Retrieve the list of assets for a specific account on a specific exchange.",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "balance": {
                            "type": "string"
                          },
                          "symbol": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "symbol",
                          "balance"
                        ]
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Exchanges:Read`: Always required."
        }
      }
    },
    "/exchanges/{exchangeId}/accounts/{accountId}/assets/{asset}/withdrawal-networks": {
      "get": {
        "tags": [
          "Exchanges"
        ],
        "summary": "List Asset Withdrawal Networks",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "asset",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "allOf": [
                      {
                        "oneOf": [
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Native"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind"
                            ]
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Aip21"
                                ]
                              },
                              "metadata": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "metadata"
                            ]
                          },
                          {
                            "properties": {
                              "assetId": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Asa"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "assetId"
                            ]
                          },
                          {
                            "properties": {
                              "contract": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Erc20",
                                  "Trc20"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "contract"
                            ]
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Hts"
                                ]
                              },
                              "tokenId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "tokenId"
                            ]
                          },
                          {
                            "properties": {
                              "coin": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Coin",
                                  "LockedCoin"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "coin"
                            ]
                          },
                          {
                            "properties": {
                              "assetId": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Asset"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "assetId"
                            ]
                          },
                          {
                            "properties": {
                              "assetCode": {
                                "type": "string"
                              },
                              "issuer": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Sep41"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "issuer",
                              "assetCode"
                            ]
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Trc10"
                                ]
                              },
                              "tokenId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "tokenId"
                            ]
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Spl",
                                  "Spl2022"
                                ]
                              },
                              "mint": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "mint"
                            ]
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Tep74"
                                ]
                              },
                              "master": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "master"
                            ]
                          }
                        ]
                      },
                      {
                        "properties": {
                          "decimals": {
                            "type": "number"
                          },
                          "network": {
                            "$ref": "#/components/schemas/Network",
                            "summary": null,
                            "description": null
                          }
                        },
                        "type": "object",
                        "required": [
                          "network",
                          "decimals"
                        ]
                      }
                    ]
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Exchanges:Read`: Always required."
        }
      }
    },
    "/exchanges/{exchangeId}/accounts/{accountId}/deposits": {
      "post": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Create Exchange Deposit",
        "description": "Creates a new exchange deposit transaction.",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "description": "The exchange id obtained from the Create Exchange endpoint. Ex: `ex-1f04s-lqc9q-xxxxxxxxxxxxxxxx`",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The exchange id obtained from the Create Exchange endpoint. Ex: `ex-1f04s-lqc9q-xxxxxxxxxxxxxxxx`"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier for the account like \"spot\"",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Unique identifier for the account like \"spot\""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of native tokens to transfer in minimum denomination."
                      },
                      "createDestinationAccount": {
                        "type": "boolean",
                        "description": "Whether to create the destination account on chains that require account creation (e.g., Stellar, Kadena). Only valid for chains that require the receiver account to exist before transfer."
                      },
                      "expiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Optional field for Canton, especially useful in the context of offers"
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      },
                      "offer": {
                        "type": "boolean",
                        "description": "Optional field for Canton, if true it will create a transfer offer."
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer. All EVM compatible networks and Bitcoin support `priority`. Not supported for other networks. It uses the [estimate fees](https://docs.dfns.co/api-reference/networks/estimate-fees) API to calculate the transfer fees. When not specified, defaults to `Standard` priority."
                      },
                      "targetChain": {
                        "type": "string",
                        "description": "For multi-chain networks (e.g., Kadena), specify the destination chain for cross-chain transfers."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount",
                      "walletId"
                    ],
                    "title": "Native Assets",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "The ERC-20 contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount",
                      "walletId"
                    ],
                    "title": "EVM Fungible Token (ERC-20)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc10"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "tokenId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token ID."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "tokenId",
                      "amount",
                      "walletId"
                    ],
                    "title": "TRON Native Fungible Token (TRC-10)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The smart contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc20"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount",
                      "walletId"
                    ],
                    "title": "TRON Smart Contract Fungible Token (TRC-20)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token asset id. "
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Asa"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "assetId",
                      "amount",
                      "walletId"
                    ],
                    "title": "Algorand Standard Asset",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetCode": {
                        "type": "string",
                        "description": "The asset code."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "issuer": {
                        "type": "string",
                        "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                        "description": "The asset issuer address."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Sep41"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "issuer",
                      "assetCode",
                      "amount",
                      "walletId"
                    ],
                    "title": "Stellar Classic Assets (SEP-41)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "createDestinationAccount": {
                        "type": "boolean",
                        "description": "If `true`, pay to create the associated token account for the recipient if it doesn't exist. Defaults to `false`."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Spl",
                          "Spl2022"
                        ]
                      },
                      "mint": {
                        "type": "string",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                        "description": "The mint account address."
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount",
                      "mint",
                      "walletId"
                    ],
                    "title": "Solana Program Library Token (SPL and SPL 2022)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Tep74"
                        ]
                      },
                      "master": {
                        "type": "string",
                        "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                        "description": "The Jetton master contract address."
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "master",
                      "amount",
                      "walletId"
                    ],
                    "title": "TON Jetton (TEP-74)",
                    "description": ""
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "exchangeId": {
                      "type": "string"
                    },
                    "exchangeReference": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Withdrawal",
                        "Deposit"
                      ]
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of native tokens to transfer in minimum denomination."
                            },
                            "createDestinationAccount": {
                              "type": "boolean",
                              "description": "Whether to create the destination account on chains that require account creation (e.g., Stellar, Kadena). Only valid for chains that require the receiver account to exist before transfer."
                            },
                            "expiresAt": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Optional field for Canton, especially useful in the context of offers"
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Native"
                              ]
                            },
                            "offer": {
                              "type": "boolean",
                              "description": "Optional field for Canton, if true it will create a transfer offer."
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "priority": {
                              "type": "string",
                              "enum": [
                                "Slow",
                                "Standard",
                                "Fast"
                              ],
                              "description": "The priority that determines the fees paid for the transfer. All EVM compatible networks and Bitcoin support `priority`. Not supported for other networks. It uses the [estimate fees](https://docs.dfns.co/api-reference/networks/estimate-fees) API to calculate the transfer fees. When not specified, defaults to `Standard` priority."
                            },
                            "targetChain": {
                              "type": "string",
                              "description": "For multi-chain networks (e.g., Kadena), specify the destination chain for cross-chain transfers."
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "amount",
                            "walletId"
                          ],
                          "title": "Native Assets",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "contract": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$",
                              "description": "The ERC-20 contract address."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Erc20"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "priority": {
                              "type": "string",
                              "enum": [
                                "Slow",
                                "Standard",
                                "Fast"
                              ],
                              "description": "The priority that determines the fees paid for the transfer."
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "contract",
                            "amount",
                            "walletId"
                          ],
                          "title": "EVM Fungible Token (ERC-20)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Trc10"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "tokenId": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The token ID."
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "tokenId",
                            "amount",
                            "walletId"
                          ],
                          "title": "TRON Native Fungible Token (TRC-10)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "contract": {
                              "type": "string",
                              "pattern": "^T[0-9a-zA-Z]{33}$",
                              "description": "The smart contract address."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Trc20"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "contract",
                            "amount",
                            "walletId"
                          ],
                          "title": "TRON Smart Contract Fungible Token (TRC-20)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "assetId": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The token asset id. "
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Asa"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "assetId",
                            "amount",
                            "walletId"
                          ],
                          "title": "Algorand Standard Asset",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "assetCode": {
                              "type": "string",
                              "description": "The asset code."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "issuer": {
                              "type": "string",
                              "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                              "description": "The asset issuer address."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Sep41"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "issuer",
                            "assetCode",
                            "amount",
                            "walletId"
                          ],
                          "title": "Stellar Classic Assets (SEP-41)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "createDestinationAccount": {
                              "type": "boolean",
                              "description": "If `true`, pay to create the associated token account for the recipient if it doesn't exist. Defaults to `false`."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Spl",
                                "Spl2022"
                              ]
                            },
                            "mint": {
                              "type": "string",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                              "description": "The mint account address."
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "amount",
                            "mint",
                            "walletId"
                          ],
                          "title": "Solana Program Library Token (SPL and SPL 2022)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Tep74"
                              ]
                            },
                            "master": {
                              "type": "string",
                              "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                              "description": "The Jetton master contract address."
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "master",
                            "amount",
                            "walletId"
                          ],
                          "title": "TON Jetton (TEP-74)",
                          "description": ""
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "transferId": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "exchangeId",
                    "accountId",
                    "kind",
                    "walletId",
                    "requester",
                    "requestBody",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Exchanges:Deposits:Create`: Always required.   \n`Wallets:Transfers:Create`: Always required."
        }
      }
    },
    "/exchanges/{exchangeId}/accounts/{accountId}/withdrawals": {
      "post": {
        "tags": [
          "Exchanges"
        ],
        "summary": "Create Exchange Withdrawal",
        "description": "Creates a new exchange withdrawal transaction.",
        "parameters": [
          {
            "name": "exchangeId",
            "in": "path",
            "description": "The exchange id obtained from the Create Exchange endpoint. Ex: `ex-1f04s-lqc9q-xxxxxxxxxxxxxxxx`",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The exchange id obtained from the Create Exchange endpoint. Ex: `ex-1f04s-lqc9q-xxxxxxxxxxxxxxxx`"
            }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Unique identifier for the account like \"spot\"",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Unique identifier for the account like \"spot\""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of native tokens to transfer in minimum denomination."
                      },
                      "createDestinationAccount": {
                        "type": "boolean",
                        "description": "Whether to create the destination account on chains that require account creation (e.g., Stellar, Kadena). Only valid for chains that require the receiver account to exist before transfer."
                      },
                      "expiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Optional field for Canton, especially useful in the context of offers"
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      },
                      "offer": {
                        "type": "boolean",
                        "description": "Optional field for Canton, if true it will create a transfer offer."
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer. All EVM compatible networks and Bitcoin support `priority`. Not supported for other networks. It uses the [estimate fees](https://docs.dfns.co/api-reference/networks/estimate-fees) API to calculate the transfer fees. When not specified, defaults to `Standard` priority."
                      },
                      "targetChain": {
                        "type": "string",
                        "description": "For multi-chain networks (e.g., Kadena), specify the destination chain for cross-chain transfers."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount",
                      "walletId"
                    ],
                    "title": "Native Assets",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "The ERC-20 contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount",
                      "walletId"
                    ],
                    "title": "EVM Fungible Token (ERC-20)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc10"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "tokenId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token ID."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "tokenId",
                      "amount",
                      "walletId"
                    ],
                    "title": "TRON Native Fungible Token (TRC-10)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The smart contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc20"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount",
                      "walletId"
                    ],
                    "title": "TRON Smart Contract Fungible Token (TRC-20)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token asset id. "
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Asa"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "assetId",
                      "amount",
                      "walletId"
                    ],
                    "title": "Algorand Standard Asset",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetCode": {
                        "type": "string",
                        "description": "The asset code."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "issuer": {
                        "type": "string",
                        "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                        "description": "The asset issuer address."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Sep41"
                        ]
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "issuer",
                      "assetCode",
                      "amount",
                      "walletId"
                    ],
                    "title": "Stellar Classic Assets (SEP-41)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "createDestinationAccount": {
                        "type": "boolean",
                        "description": "If `true`, pay to create the associated token account for the recipient if it doesn't exist. Defaults to `false`."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Spl",
                          "Spl2022"
                        ]
                      },
                      "mint": {
                        "type": "string",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                        "description": "The mint account address."
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount",
                      "mint",
                      "walletId"
                    ],
                    "title": "Solana Program Library Token (SPL and SPL 2022)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Tep74"
                        ]
                      },
                      "master": {
                        "type": "string",
                        "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                        "description": "The Jetton master contract address."
                      },
                      "otp": {
                        "type": "string",
                        "maxLength": 6,
                        "minLength": 6
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      },
                      "walletId": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "master",
                      "amount",
                      "walletId"
                    ],
                    "title": "TON Jetton (TEP-74)",
                    "description": ""
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "accountId": {
                      "type": "string"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "exchangeId": {
                      "type": "string"
                    },
                    "exchangeReference": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Withdrawal",
                        "Deposit"
                      ]
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of native tokens to transfer in minimum denomination."
                            },
                            "createDestinationAccount": {
                              "type": "boolean",
                              "description": "Whether to create the destination account on chains that require account creation (e.g., Stellar, Kadena). Only valid for chains that require the receiver account to exist before transfer."
                            },
                            "expiresAt": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Optional field for Canton, especially useful in the context of offers"
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Native"
                              ]
                            },
                            "offer": {
                              "type": "boolean",
                              "description": "Optional field for Canton, if true it will create a transfer offer."
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "priority": {
                              "type": "string",
                              "enum": [
                                "Slow",
                                "Standard",
                                "Fast"
                              ],
                              "description": "The priority that determines the fees paid for the transfer. All EVM compatible networks and Bitcoin support `priority`. Not supported for other networks. It uses the [estimate fees](https://docs.dfns.co/api-reference/networks/estimate-fees) API to calculate the transfer fees. When not specified, defaults to `Standard` priority."
                            },
                            "targetChain": {
                              "type": "string",
                              "description": "For multi-chain networks (e.g., Kadena), specify the destination chain for cross-chain transfers."
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "amount",
                            "walletId"
                          ],
                          "title": "Native Assets",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "contract": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$",
                              "description": "The ERC-20 contract address."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Erc20"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "priority": {
                              "type": "string",
                              "enum": [
                                "Slow",
                                "Standard",
                                "Fast"
                              ],
                              "description": "The priority that determines the fees paid for the transfer."
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "contract",
                            "amount",
                            "walletId"
                          ],
                          "title": "EVM Fungible Token (ERC-20)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Trc10"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "tokenId": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The token ID."
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "tokenId",
                            "amount",
                            "walletId"
                          ],
                          "title": "TRON Native Fungible Token (TRC-10)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "contract": {
                              "type": "string",
                              "pattern": "^T[0-9a-zA-Z]{33}$",
                              "description": "The smart contract address."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Trc20"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "contract",
                            "amount",
                            "walletId"
                          ],
                          "title": "TRON Smart Contract Fungible Token (TRC-20)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "assetId": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The token asset id. "
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Asa"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "assetId",
                            "amount",
                            "walletId"
                          ],
                          "title": "Algorand Standard Asset",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "assetCode": {
                              "type": "string",
                              "description": "The asset code."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "issuer": {
                              "type": "string",
                              "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                              "description": "The asset issuer address."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Sep41"
                              ]
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "issuer",
                            "assetCode",
                            "amount",
                            "walletId"
                          ],
                          "title": "Stellar Classic Assets (SEP-41)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "createDestinationAccount": {
                              "type": "boolean",
                              "description": "If `true`, pay to create the associated token account for the recipient if it doesn't exist. Defaults to `false`."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Spl",
                                "Spl2022"
                              ]
                            },
                            "mint": {
                              "type": "string",
                              "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                              "description": "The mint account address."
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "amount",
                            "mint",
                            "walletId"
                          ],
                          "title": "Solana Program Library Token (SPL and SPL 2022)",
                          "description": ""
                        },
                        {
                          "properties": {
                            "amount": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of tokens to transfer in minimum denomination."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Tep74"
                              ]
                            },
                            "master": {
                              "type": "string",
                              "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                              "description": "The Jetton master contract address."
                            },
                            "otp": {
                              "type": "string",
                              "maxLength": 6,
                              "minLength": 6
                            },
                            "travelRule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "beneficiary": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryProof": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    },
                                    "beneficiaryVASPdid": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    },
                                    "originator": {
                                      "additionalProperties": {},
                                      "type": "object"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "originator",
                                    "beneficiary"
                                  ]
                                }
                              ],
                              "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                            },
                            "walletId": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "master",
                            "amount",
                            "walletId"
                          ],
                          "title": "TON Jetton (TEP-74)",
                          "description": ""
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "transferId": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "exchangeId",
                    "accountId",
                    "kind",
                    "walletId",
                    "requester",
                    "requestBody",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Exchanges:Withdrawals:Create`: Always required."
        }
      }
    },
    "/fee-sponsors": {
      "get": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "List Fee Sponsors",
        "description": "Retrieves all Fee Sponsors configured in your organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "allowEndUser": {
                            "type": "boolean",
                            "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor."
                          },
                          "dateCreated": {
                            "type": "string",
                            "format": "date-time",
                            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the Fee Sponsor was created.",
                            "example": "2023-04-14T20:41:28.715Z"
                          },
                          "id": {
                            "type": "string",
                            "maxLength": 64,
                            "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                            "description": "Fee Sponsor id.",
                            "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                          },
                          "name": {
                            "type": "string",
                            "description": "Nickname for the Fee Sponsor. This is displayed on the transfer modal in the dashboard."
                          },
                          "network": {
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Network",
                                "summary": null,
                                "description": null
                              },
                              {
                                "description": "Network used for the wallet."
                              }
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Active",
                              "Deactivated",
                              "Archived"
                            ],
                            "description": "Fee sponsor status."
                          },
                          "walletId": {
                            "type": "string",
                            "maxLength": 64,
                            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                            "description": "Id of the wallet that is used to sponsor the fee for other wallets",
                            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "walletId",
                          "network",
                          "status",
                          "dateCreated"
                        ],
                        "example": {
                          "id": "fs-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                          "walletId": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                          "network": "Solana",
                          "status": "Active",
                          "dateCreated": "2023-04-14T20:41:28.715Z"
                        }
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "Create Fee Sponsor",
        "description": "Creates a new `FeeSponsor` associated with a sponsor wallet. Returns a new fee sponsor entity with the `id` to be used when making a transfer.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowEndUser": {
                    "type": "boolean",
                    "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor.",
                    "default": false
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Nickname for the Fee Sponsor. This will be displayed on the transfer modal in the dashboard."
                  },
                  "walletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the wallet that will be used to sponsor the fee for other wallets.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "walletId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowEndUser": {
                      "type": "boolean",
                      "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor."
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the Fee Sponsor was created.",
                      "example": "2023-04-14T20:41:28.715Z"
                    },
                    "id": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Fee Sponsor id.",
                      "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                    },
                    "name": {
                      "type": "string",
                      "description": "Nickname for the Fee Sponsor. This is displayed on the transfer modal in the dashboard."
                    },
                    "network": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Network",
                          "summary": null,
                          "description": null
                        },
                        {
                          "description": "Network used for the wallet."
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Deactivated",
                        "Archived"
                      ],
                      "description": "Fee sponsor status."
                    },
                    "walletId": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Id of the wallet that is used to sponsor the fee for other wallets",
                      "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "status",
                    "dateCreated"
                  ],
                  "example": {
                    "id": "fs-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "walletId": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "network": "Solana",
                    "status": "Active",
                    "dateCreated": "2023-04-14T20:41:28.715Z"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Create`: Always required."
        }
      }
    },
    "/fee-sponsors/{feeSponsorId}": {
      "get": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "Get Fee Sponsor",
        "description": "Retrieve a Fee Sponsor information by ID.",
        "parameters": [
          {
            "name": "feeSponsorId",
            "in": "path",
            "description": "Which Fee Sponsor you wish to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Which Fee Sponsor you wish to retrieve."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowEndUser": {
                      "type": "boolean",
                      "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor."
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the Fee Sponsor was created.",
                      "example": "2023-04-14T20:41:28.715Z"
                    },
                    "id": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Fee Sponsor id.",
                      "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                    },
                    "name": {
                      "type": "string",
                      "description": "Nickname for the Fee Sponsor. This is displayed on the transfer modal in the dashboard."
                    },
                    "network": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Network",
                          "summary": null,
                          "description": null
                        },
                        {
                          "description": "Network used for the wallet."
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Deactivated",
                        "Archived"
                      ],
                      "description": "Fee sponsor status."
                    },
                    "walletId": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Id of the wallet that is used to sponsor the fee for other wallets",
                      "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "status",
                    "dateCreated"
                  ],
                  "example": {
                    "id": "fs-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "walletId": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "network": "Solana",
                    "status": "Active",
                    "dateCreated": "2023-04-14T20:41:28.715Z"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Read`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "Delete Fee Sponsor",
        "description": "Delete a Fee Sponsor. This action is irreversible. The fee sponsor won't be able to be used anymore when making a transfer.",
        "parameters": [
          {
            "name": "feeSponsorId",
            "in": "path",
            "description": "Which Fee Sponsor you wish to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Which Fee Sponsor you wish to delete."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowEndUser": {
                      "type": "boolean",
                      "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor."
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the Fee Sponsor was created.",
                      "example": "2023-04-14T20:41:28.715Z"
                    },
                    "id": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Fee Sponsor id.",
                      "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                    },
                    "name": {
                      "type": "string",
                      "description": "Nickname for the Fee Sponsor. This is displayed on the transfer modal in the dashboard."
                    },
                    "network": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Network",
                          "summary": null,
                          "description": null
                        },
                        {
                          "description": "Network used for the wallet."
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Deactivated",
                        "Archived"
                      ],
                      "description": "Fee sponsor status."
                    },
                    "walletId": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Id of the wallet that is used to sponsor the fee for other wallets",
                      "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "status",
                    "dateCreated"
                  ],
                  "example": {
                    "id": "fs-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "walletId": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "network": "Solana",
                    "status": "Active",
                    "dateCreated": "2023-04-14T20:41:28.715Z"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Delete`: Always required."
        }
      }
    },
    "/fee-sponsors/{feeSponsorId}/activate": {
      "put": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "Activate Fee Sponsor",
        "description": "Activate a Fee Sponsor: The fee sponsor can be used when making a transfer.",
        "parameters": [
          {
            "name": "feeSponsorId",
            "in": "path",
            "description": "Which Fee Sponsor you wish to activate.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Which Fee Sponsor you wish to activate."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowEndUser": {
                      "type": "boolean",
                      "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor."
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the Fee Sponsor was created.",
                      "example": "2023-04-14T20:41:28.715Z"
                    },
                    "id": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Fee Sponsor id.",
                      "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                    },
                    "name": {
                      "type": "string",
                      "description": "Nickname for the Fee Sponsor. This is displayed on the transfer modal in the dashboard."
                    },
                    "network": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Network",
                          "summary": null,
                          "description": null
                        },
                        {
                          "description": "Network used for the wallet."
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Deactivated",
                        "Archived"
                      ],
                      "description": "Fee sponsor status."
                    },
                    "walletId": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Id of the wallet that is used to sponsor the fee for other wallets",
                      "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "status",
                    "dateCreated"
                  ],
                  "example": {
                    "id": "fs-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "walletId": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "network": "Solana",
                    "status": "Active",
                    "dateCreated": "2023-04-14T20:41:28.715Z"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Update`: Always required."
        }
      }
    },
    "/fee-sponsors/{feeSponsorId}/deactivate": {
      "put": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "Deactivate Fee Sponsor",
        "description": "Deactivate a Fee Sponsor: The fee sponsor won't be able to be used anymore when making a transfer.",
        "parameters": [
          {
            "name": "feeSponsorId",
            "in": "path",
            "description": "Which Fee Sponsor you wish to deactivate.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Which Fee Sponsor you wish to deactivate."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "allowEndUser": {
                      "type": "boolean",
                      "description": "Defines whether EndUsers and their delegated wallets can use this Fee Sponsor."
                    },
                    "dateCreated": {
                      "type": "string",
                      "format": "date-time",
                      "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the Fee Sponsor was created.",
                      "example": "2023-04-14T20:41:28.715Z"
                    },
                    "id": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Fee Sponsor id.",
                      "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                    },
                    "name": {
                      "type": "string",
                      "description": "Nickname for the Fee Sponsor. This is displayed on the transfer modal in the dashboard."
                    },
                    "network": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Network",
                          "summary": null,
                          "description": null
                        },
                        {
                          "description": "Network used for the wallet."
                        }
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Deactivated",
                        "Archived"
                      ],
                      "description": "Fee sponsor status."
                    },
                    "walletId": {
                      "type": "string",
                      "maxLength": 64,
                      "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                      "description": "Id of the wallet that is used to sponsor the fee for other wallets",
                      "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "status",
                    "dateCreated"
                  ],
                  "example": {
                    "id": "fs-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "walletId": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
                    "network": "Solana",
                    "status": "Active",
                    "dateCreated": "2023-04-14T20:41:28.715Z"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Update`: Always required."
        }
      }
    },
    "/fee-sponsors/{feeSponsorId}/fees": {
      "get": {
        "tags": [
          "Fee Sponsors"
        ],
        "summary": "List Sponsored Fees",
        "description": "Retrieves all fees paid by the specific Fee Sponsor.",
        "parameters": [
          {
            "name": "feeSponsorId",
            "in": "path",
            "description": "Fee Sponsor to retrieve the fees from.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Fee Sponsor to retrieve the fees from."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "dateConfirmed": {
                            "type": "string",
                            "format": "date-time",
                            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the sponsorship was confirmed.",
                            "example": "2023-04-14T20:41:28.715Z"
                          },
                          "dateRequested": {
                            "type": "string",
                            "format": "date-time",
                            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the sponsorship was requested.",
                            "example": "2023-04-14T20:41:28.715Z"
                          },
                          "fee": {
                            "type": "string",
                            "description": "Fee amount that was paid for the request"
                          },
                          "feeSponsorId": {
                            "type": "string",
                            "maxLength": 64,
                            "pattern": "fs-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                            "description": "Fee Sponsor id.",
                            "example": "fs-5vqdl-gliqk-b4rfukqauov1sp7j"
                          },
                          "requestId": {
                            "type": "string",
                            "description": "Id of the request that was sponsored."
                          },
                          "sponsoreeId": {
                            "type": "string",
                            "description": "Id of the entity being sponsored, e.g. a wallet id."
                          }
                        },
                        "type": "object",
                        "required": [
                          "feeSponsorId",
                          "sponsoreeId",
                          "requestId",
                          "dateRequested",
                          "dateConfirmed"
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`FeeSponsors:Read`: Always required."
        }
      }
    },
    "/key-stores": {
      "get": {
        "tags": [
          "Signers"
        ],
        "summary": "List Key Stores",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Hsm",
                              "Mpc"
                            ]
                          },
                          "name": {
                            "type": "string"
                          },
                          "primary": {
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "kind",
                          "primary"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`KeyStores:Read`: Always required."
        }
      }
    },
    "/keys": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "List Keys",
        "description": "Retrieve all keys registered for your organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "curve": {
                            "type": "string",
                            "enum": [
                              "ed25519",
                              "secp256k1",
                              "stark"
                            ]
                          },
                          "custodial": {
                            "type": "boolean"
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "dateDeleted": {
                            "type": "string"
                          },
                          "dateExported": {
                            "type": "string"
                          },
                          "exported": {
                            "type": "boolean"
                          },
                          "id": {
                            "type": "string"
                          },
                          "imported": {
                            "type": "boolean"
                          },
                          "name": {
                            "type": "string"
                          },
                          "publicKey": {
                            "type": "string"
                          },
                          "scheme": {
                            "type": "string",
                            "enum": [
                              "DH",
                              "ECDSA",
                              "EdDSA",
                              "Schnorr"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Active",
                              "Archived"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "scheme",
                          "curve",
                          "publicKey",
                          "status",
                          "custodial",
                          "dateCreated"
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Create Key",
        "description": "Creates a key for the given scheme and curve. Returns the new key entity. ",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "curve": {
                    "type": "string",
                    "enum": [
                      "ed25519",
                      "secp256k1",
                      "stark"
                    ]
                  },
                  "delayDelegation": {
                    "type": "boolean"
                  },
                  "delegateTo": {
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "scheme": {
                    "type": "string",
                    "enum": [
                      "DH",
                      "ECDSA",
                      "EdDSA",
                      "Schnorr"
                    ]
                  },
                  "storeId": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "scheme",
                  "curve"
                ]
              },
              "examples": {
                "EdDSA": {
                  "value": {
                    "scheme": "EdDSA",
                    "curve": "ed25519"
                  }
                },
                "Schnorr": {
                  "value": {
                    "scheme": "Schnorr",
                    "curve": "secp256k1"
                  }
                },
                "Stark": {
                  "value": {
                    "scheme": "ECDSA",
                    "curve": "stark"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "custodial": {
                      "type": "boolean"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateDeleted": {
                      "type": "string"
                    },
                    "dateExported": {
                      "type": "string"
                    },
                    "exported": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "imported": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "scheme": {
                      "type": "string",
                      "enum": [
                        "DH",
                        "ECDSA",
                        "EdDSA",
                        "Schnorr"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Archived"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "scheme",
                    "curve",
                    "publicKey",
                    "status",
                    "custodial",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Create`: Always required   \n`Keys:Delegate`: Required if `delegateTo` is specified."
        }
      }
    },
    "/keys/import": {
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Import Key",
        "description": "Dfns secures private keys by generating them as MPC key shares in our decentralized key management network.  This happens by default when you create a [key](https://docs.dfns.co/api-reference/keys/create-key) or [wallet](https://docs.dfns.co/api-reference/wallets/create-wallet).\n\nIn some circumstances, however, you may need to import an existing private key into Dfns infrastructure, instead of creating a brand new wallet with Dfns and transfer funds to it. As an example, you might want to keep an existing wallet if its address is tied to a smart contract which you don't want to re-deploy.\n\nIn such a case, Dfns exposes this key import API endpoint, which can be used in conjunction with our [import SDK](https://github.com/dfns/dfns-sdk-ts/tree/m/examples/sdk/import-wallet).   Note this is intended to be used only to migrate wallets when first onboarding onto the Dfns platform.\n\n<Danger>\nDfns can not guarantee the security of imported wallets, as we have no way to control who had access to the private key prior to import.  For this reason, this feature is restricted to Enterprise customers who have signed a contractual addendum limiting our liability for imported keys.  Please contact your sales representative for more information.\n</Danger>\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "curve": {
                    "type": "string",
                    "enum": [
                      "ed25519",
                      "secp256k1",
                      "stark"
                    ]
                  },
                  "encryptedKeyShares": {
                    "items": {
                      "properties": {
                        "encryptedKeyShare": {
                          "type": "string",
                          "minLength": 1
                        },
                        "signerId": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "type": "object",
                      "required": [
                        "signerId",
                        "encryptedKeyShare"
                      ]
                    },
                    "type": "array",
                    "minItems": 1
                  },
                  "minSigners": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "protocol": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "CGGMP24",
                          "FROST",
                          "FROST_BITCOIN",
                          "GLOW20_DH",
                          "KU23"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "CGGMP21"
                        ]
                      }
                    ]
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "curve",
                  "protocol",
                  "minSigners",
                  "encryptedKeyShares"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "custodial": {
                      "type": "boolean"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateDeleted": {
                      "type": "string"
                    },
                    "dateExported": {
                      "type": "string"
                    },
                    "exported": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "imported": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "scheme": {
                      "type": "string",
                      "enum": [
                        "DH",
                        "ECDSA",
                        "EdDSA",
                        "Schnorr"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Archived"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "scheme",
                    "curve",
                    "publicKey",
                    "status",
                    "custodial",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Import`: Always required."
        }
      }
    },
    "/keys/{keyId}": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "Get Key",
        "description": "Retrieves a key information by its ID.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "custodial": {
                      "type": "boolean"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateDeleted": {
                      "type": "string"
                    },
                    "dateExported": {
                      "type": "string"
                    },
                    "exported": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "imported": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "scheme": {
                      "type": "string",
                      "enum": [
                        "DH",
                        "ECDSA",
                        "EdDSA",
                        "Schnorr"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Archived"
                      ]
                    },
                    "store": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "keyId": {
                          "type": "string"
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Hsm",
                            "Mpc"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "id",
                        "kind",
                        "keyId"
                      ]
                    },
                    "wallets": {
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "network": {
                            "type": "string",
                            "enum": [
                              "Algorand",
                              "AlgorandTestnet",
                              "Aptos",
                              "AptosTestnet",
                              "ArbitrumOne",
                              "ArbitrumSepolia",
                              "AvalancheC",
                              "AvalancheCFuji",
                              "BabylonGenesis",
                              "BabylonTestnet5",
                              "Base",
                              "BaseSepolia",
                              "Berachain",
                              "BerachainBepolia",
                              "Bitcoin",
                              "BitcoinSignet",
                              "BitcoinTestnet3",
                              "BitcoinCash",
                              "Bob",
                              "BobSepolia",
                              "Bsc",
                              "BscTestnet",
                              "Canton",
                              "CantonTestnet",
                              "Cardano",
                              "CardanoPreprod",
                              "Celo",
                              "CeloAlfajores",
                              "Codex",
                              "CodexSepolia",
                              "CosmosHub4",
                              "CosmosIcsTestnet",
                              "Dogecoin",
                              "Ethereum",
                              "EthereumGoerli",
                              "EthereumSepolia",
                              "EthereumHolesky",
                              "EthereumHoodi",
                              "FantomOpera",
                              "FantomTestnet",
                              "FlareC",
                              "FlareCCoston2",
                              "Hedera",
                              "HederaTestnet",
                              "Ink",
                              "InkSepolia",
                              "InternetComputer",
                              "Ion",
                              "IonTestnet",
                              "Iota",
                              "IotaTestnet",
                              "KadenaTestnet4",
                              "Kadena",
                              "Kaspa",
                              "Kusama",
                              "Litecoin",
                              "Near",
                              "NearTestnet",
                              "Optimism",
                              "OptimismSepolia",
                              "Origyn",
                              "Plume",
                              "PlumeSepolia",
                              "Polkadot",
                              "Polygon",
                              "PolygonAmoy",
                              "Polymesh",
                              "PolymeshTestnet",
                              "Race",
                              "RaceSepolia",
                              "SeiAtlantic2",
                              "SeiPacific1",
                              "Solana",
                              "SolanaDevnet",
                              "Stellar",
                              "StellarTestnet",
                              "Sui",
                              "SuiTestnet",
                              "Tsc",
                              "TscTestnet1",
                              "Tezos",
                              "TezosGhostnet",
                              "Ton",
                              "TonTestnet",
                              "Tron",
                              "TronNile",
                              "Westend",
                              "XrpLedger",
                              "XrpLedgerTestnet"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "network"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "scheme",
                    "curve",
                    "publicKey",
                    "status",
                    "custodial",
                    "dateCreated",
                    "wallets",
                    "store"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Keys"
        ],
        "summary": "Update Key",
        "description": "Updates the name of an existing key.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "custodial": {
                      "type": "boolean"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateDeleted": {
                      "type": "string"
                    },
                    "dateExported": {
                      "type": "string"
                    },
                    "exported": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "imported": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "scheme": {
                      "type": "string",
                      "enum": [
                        "DH",
                        "ECDSA",
                        "EdDSA",
                        "Schnorr"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Archived"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "scheme",
                    "curve",
                    "publicKey",
                    "status",
                    "custodial",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Update`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Keys"
        ],
        "summary": "Delete Key",
        "description": "Deletes the key and all wallets using this key. Once deleted, keys (and wallets) are not usable anymore, and won't count in your overall organisation wallet count.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "custodial": {
                      "type": "boolean"
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateDeleted": {
                      "type": "string"
                    },
                    "dateExported": {
                      "type": "string"
                    },
                    "exported": {
                      "type": "boolean"
                    },
                    "id": {
                      "type": "string"
                    },
                    "imported": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "publicKey": {
                      "type": "string"
                    },
                    "scheme": {
                      "type": "string",
                      "enum": [
                        "DH",
                        "ECDSA",
                        "EdDSA",
                        "Schnorr"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active",
                        "Archived"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "scheme",
                    "curve",
                    "publicKey",
                    "status",
                    "custodial",
                    "dateCreated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Delete`: Always required."
        }
      }
    },
    "/keys/{keyId}/delegate": {
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Delegate Key",
        "description": "<Warning>\nOnly keys created with \"`delayDelegation: true`\" can then be delegated to an end-user. It means you need to know ahead of time that you're creating a wallet meant to be delegated to an end-user later. This is a safety to prevent, for example, a treasury wallet from being unintentionally delegated to an end-user.\n</Warning>\n\n<Note>\nWhen a key is delegated to an end user, all wallets using this key as the signing key are also automatically delegated to the same end user. Key and wallet ownerships are guaranteed to be always consistent.\n</Note>\n\n<Danger>\nThis operation is irreversible. The key ownership will be transferred to the end-user\n</Danger>\n\nIn most cases, when you want to implement [Wallet Delegation](https://docs.dfns.co/developers/guides/wallet-delegation), simply create the wallet by directly delegating it to an end user, in which case it will the non-custodial from the start.  There are some rare cases, however, where the key or wallet must be created before the user has accessed to the system.  To accommodate this, we've added the ability to create a key or wallet in delay delegation mode, and then later delegate it (ie. transfer ownership of it) to an end user via this endpoint.\n",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "delegateTo": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "delegateTo"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "keyId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Delegated"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "keyId",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Delegate`: Always required."
        }
      }
    },
    "/keys/{keyId}/derive": {
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Derive Key",
        "description": "Dfns decentralized key management network supports threshold Diffie-Hellman protocol based on [GLOW20 paper](https://eprint.iacr.org/2020/096). You can use the DH protocol to derive output from a domain separation tag and a seed value. The derivation process is deterministic, i.e. the same Diffie-Hellman key and seed will lead to the same derived output. To ensure reproducibility, we use hash to curve [RFC9380](https://www.rfc-editor.org/rfc/rfc9380.html) and standard ciphersuite `secp256k1_XMD:SHA-256_SSWU_RO_`.\n\n<Tip>\nThe seed doesn’t need to be secret. Without access to the DH key, it is not possible to do the derivation, even if the seed is known. Moreover, if both seed and derived output are known, it’s also not possible to do the derivation for another seed without having access to the DH key.\n</Tip>\n\nThis endpoint only supports Diffie-Hellman keys. Regular threshold signature keys, like `ECDSA` or `EdDSA`, will not work. You can create a Diffie-Hellman key with the [Create Key](https://docs.dfns.co/api-reference/keys/create-key) endpoint using `scheme=DH` and `curve=secp256k1`.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "domain": {
                    "type": "string",
                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                  },
                  "seed": {
                    "type": "string",
                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "domain",
                  "seed"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "output": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "output"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Derive`: Always required."
        }
      }
    },
    "/keys/{keyId}/export": {
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Export Key",
        "description": "Dfns secures private keys by generating them as MPC key shares in our decentralized key management network.  Our goal is to eliminate all single points of failure (SPOFs) associated with blockchain private keys.\n\nIn certain circumstances, however, customers require Dfns to export a private key. In this case, Dfns exposes the following endpoint which can be used in conjunction with our [export SDK](https://github.com/dfns/dfns-sdk-ts/tree/m/examples/sdk/export-wallet).\n\n<Danger>\nDfns can not guarantee the security of exported keys as we have no way to control blockchain transactions once the single point of failure has been reconstituted.  For this reason, this feature is restricted to customers who have signed a contractual addendum limiting our liability for exported keys.  Additionally, by default exported keys can no longer be used to sign within the Dfns platform. Please contact your sales representative for more information.\n</Danger>",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "encryptionKey": {
                    "type": "string",
                    "minLength": 1
                  },
                  "supportedSchemes": {
                    "items": {
                      "properties": {
                        "curve": {
                          "type": "string",
                          "enum": [
                            "ed25519",
                            "secp256k1",
                            "stark"
                          ]
                        },
                        "protocol": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "CGGMP24",
                                "FROST",
                                "FROST_BITCOIN",
                                "GLOW20_DH",
                                "KU23"
                              ]
                            },
                            {
                              "type": "string",
                              "enum": [
                                "CGGMP21"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "protocol",
                        "curve"
                      ]
                    },
                    "type": "array"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "encryptionKey",
                  "supportedSchemes"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "encryptedKeyShares": {
                      "items": {
                        "properties": {
                          "encryptedKeyShare": {
                            "type": "string",
                            "description": "Base64-encoded keyshare"
                          },
                          "signerId": {
                            "type": "string",
                            "description": "Base64-encoded ID of the signer exported the encrypted keyshare"
                          }
                        },
                        "type": "object",
                        "required": [
                          "signerId",
                          "encryptedKeyShare"
                        ]
                      },
                      "type": "array",
                      "description": "Keyshares of the exported wallet. They are encrypted with the provided encryption key. The exported private key is re-constructed from these keyshares."
                    },
                    "minSigners": {
                      "type": "number",
                      "description": "The TSS threshold of the wallet private signing key shares"
                    },
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "CGGMP24",
                        "FROST",
                        "FROST_BITCOIN",
                        "GLOW20_DH",
                        "KU23"
                      ]
                    },
                    "publicKey": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "publicKey",
                    "protocol",
                    "curve",
                    "minSigners",
                    "encryptedKeyShares"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Export`: Always required."
        }
      }
    },
    "/keys/{keyId}/signatures": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "List Signatures",
        "description": "List all signature requests for a key.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "approvalId": {
                            "type": "string"
                          },
                          "dateConfirmed": {
                            "type": "string"
                          },
                          "datePolicyResolved": {
                            "type": "string"
                          },
                          "dateRequested": {
                            "type": "string"
                          },
                          "dateSigned": {
                            "type": "string"
                          },
                          "externalId": {
                            "type": "string"
                          },
                          "fee": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "keyId": {
                            "type": "string"
                          },
                          "network": {
                            "$ref": "#/components/schemas/Network",
                            "summary": null,
                            "description": null
                          },
                          "reason": {
                            "type": "string"
                          },
                          "requestBody": {
                            "oneOf": [
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "hash": {
                                    "type": "string",
                                    "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                                    "description": "32-byte hash in hex encoded format."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Hash"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "taprootMerkleRoot": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                                    "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "hash"
                                ],
                                "title": "Hash",
                                "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Message"
                                    ]
                                  },
                                  "message": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "An arbitrary hex encoded message."
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "message"
                                ],
                                "title": "Message",
                                "description": "Signs an arbitrary hex encoded arbitrary message."
                              },
                              {
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The address of the contract the signer's EOA will be delegated to."
                                  },
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "chainId": {
                                    "type": "number",
                                    "description": "Chain ID."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Eip7702"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "nonce": {
                                    "type": "number",
                                    "description": "The current nonce of the signer EOA."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "address",
                                  "nonce",
                                  "chainId"
                                ],
                                "title": "EIP-7702 Authorization",
                                "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Transaction"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "transaction": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The unsigned hex-encoded transaction."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "transaction"
                                ],
                                "title": "Transaction",
                                "description": "Signs an unsigned transaction."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "domain": {
                                    "properties": {
                                      "chainId": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "description": "Chain ID."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the signing domain."
                                      },
                                      "salt": {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]{64}$",
                                        "description": "32-byte value as a last-resort domain separator."
                                      },
                                      "verifyingContract": {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]{40}$",
                                        "description": "The address of the contract that will verify the signature."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "Current major version of the signing domain."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Domain separator."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Eip712"
                                    ]
                                  },
                                  "message": {
                                    "additionalProperties": {},
                                    "type": "object",
                                    "description": "Structured message to sign."
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "types": {
                                    "additionalProperties": {
                                      "items": {
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "type"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "type": "object",
                                    "description": "Type definitions."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "types",
                                  "domain",
                                  "message"
                                ],
                                "title": "EIP-712 TypedData",
                                "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Psbt"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "psbt": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The hex encoded PSBT."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "psbt"
                                ],
                                "title": "PSBT",
                                "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "format": {
                                    "type": "string",
                                    "enum": [
                                      "Simple",
                                      "Full"
                                    ],
                                    "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Bip322"
                                    ]
                                  },
                                  "message": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The generic message hex encoded."
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "message"
                                ],
                                "title": "BIP-322",
                                "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "command": {
                                    "type": "string",
                                    "description": "The Pact command JSON, serialized into a string."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "PactCommand"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "command"
                                ],
                                "title": "PactCommand",
                                "description": "Signs an unsigned Pact command."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SignDocDirect"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "signDoc": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The hex encoded `SignDoc` Protobuf."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "signDoc"
                                ],
                                "title": "SignDocDirect",
                                "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SignerPayload"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "payload": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                      },
                                      {
                                        "type": "object"
                                      }
                                    ],
                                    "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "payload"
                                ],
                                "title": "SignerPayload",
                                "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "context": {
                                    "type": "string",
                                    "enum": [
                                      "Signature1"
                                    ]
                                  },
                                  "externalAad": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Cip8"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "payload": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The generic message hex encoded."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "context"
                                ],
                                "title": "CIP-8",
                                "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                              }
                            ]
                          },
                          "requester": {
                            "properties": {
                              "tokenId": {
                                "type": "string"
                              },
                              "userId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "userId"
                            ]
                          },
                          "signature": {
                            "properties": {
                              "encoded": {
                                "type": "string"
                              },
                              "r": {
                                "type": "string"
                              },
                              "recid": {
                                "type": "number"
                              },
                              "s": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "r",
                              "s"
                            ]
                          },
                          "signatures": {
                            "items": {
                              "properties": {
                                "encoded": {
                                  "type": "string"
                                },
                                "r": {
                                  "type": "string"
                                },
                                "recid": {
                                  "type": "number"
                                },
                                "s": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "r",
                                "s"
                              ]
                            },
                            "type": "array"
                          },
                          "signedData": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Pending",
                              "Executing",
                              "Signed",
                              "Confirmed",
                              "Failed",
                              "Rejected"
                            ]
                          },
                          "txHash": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "keyId",
                          "requester",
                          "requestBody",
                          "status",
                          "dateRequested"
                        ]
                      },
                      "type": "array"
                    },
                    "keyId": {
                      "type": "string"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "keyId",
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Signatures:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Keys"
        ],
        "summary": "Generate Signature",
        "description": "Request to generate a signature with the key. **This process does not broadcast anything on-chain**, this is just an off-chain signature request.\n\nDfns is compatible with any blockchain that uses a supported [key format](https://docs.dfns.co/networks/supported-key-formats). If Dfns doesn't officially integrate with a blockchain, you can use hash signing to generate the signatures to interact with the chain.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "hash": {
                        "type": "string",
                        "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                        "description": "32-byte hash in hex encoded format."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Hash"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "taprootMerkleRoot": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                        "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "hash"
                    ],
                    "title": "Hash",
                    "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Message"
                        ]
                      },
                      "message": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "An arbitrary hex encoded message."
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "message"
                    ],
                    "title": "Message",
                    "description": "Signs an arbitrary hex encoded arbitrary message."
                  },
                  {
                    "properties": {
                      "address": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The address of the contract the signer's EOA will be delegated to."
                      },
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "chainId": {
                        "type": "number",
                        "description": "Chain ID."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Eip7702"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "nonce": {
                        "type": "number",
                        "description": "The current nonce of the signer EOA."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "address",
                      "nonce",
                      "chainId"
                    ],
                    "title": "EIP-7702 Authorization",
                    "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "transaction": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The unsigned hex-encoded transaction."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "transaction"
                    ],
                    "title": "Transaction",
                    "description": "Signs an unsigned transaction."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "domain": {
                        "properties": {
                          "chainId": {
                            "anyOf": [
                              {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "Chain ID."
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the signing domain."
                          },
                          "salt": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{64}$",
                            "description": "32-byte value as a last-resort domain separator."
                          },
                          "verifyingContract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$",
                            "description": "The address of the contract that will verify the signature."
                          },
                          "version": {
                            "type": "string",
                            "description": "Current major version of the signing domain."
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": "Domain separator."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Eip712"
                        ]
                      },
                      "message": {
                        "additionalProperties": {},
                        "type": "object",
                        "description": "Structured message to sign."
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "types": {
                        "additionalProperties": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "name",
                              "type"
                            ]
                          },
                          "type": "array"
                        },
                        "type": "object",
                        "description": "Type definitions."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "types",
                      "domain",
                      "message"
                    ],
                    "title": "EIP-712 TypedData",
                    "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Psbt"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "psbt": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The hex encoded PSBT."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "psbt"
                    ],
                    "title": "PSBT",
                    "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "format": {
                        "type": "string",
                        "enum": [
                          "Simple",
                          "Full"
                        ],
                        "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Bip322"
                        ]
                      },
                      "message": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The generic message hex encoded."
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "message"
                    ],
                    "title": "BIP-322",
                    "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "command": {
                        "type": "string",
                        "description": "The Pact command JSON, serialized into a string."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "PactCommand"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "command"
                    ],
                    "title": "PactCommand",
                    "description": "Signs an unsigned Pact command."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "SignDocDirect"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "signDoc": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The hex encoded `SignDoc` Protobuf."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "signDoc"
                    ],
                    "title": "SignDocDirect",
                    "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "SignerPayload"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "payload": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                          },
                          {
                            "type": "object"
                          }
                        ],
                        "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "payload"
                    ],
                    "title": "SignerPayload",
                    "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "context": {
                        "type": "string",
                        "enum": [
                          "Signature1"
                        ]
                      },
                      "externalAad": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Cip8"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "payload": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The generic message hex encoded."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "context"
                    ],
                    "title": "CIP-8",
                    "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                  }
                ]
              },
              "examples": {
                "Bip322": {
                  "value": {
                    "network": "BitcoinSignet",
                    "kind": "Bip322",
                    "message": "0x49206c6f76652044666e73"
                  }
                },
                "Cip8": {
                  "value": {
                    "network": "CardanoPreprod",
                    "kind": "Cip8",
                    "payload": "0x49206c6f76652044666e73",
                    "externalAad": "0x616464697469706e616c5f64617461",
                    "context": "Signature1"
                  }
                },
                "Eip712": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Eip712",
                    "types": {
                      "Person": [
                        {
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "name": "wallet",
                          "type": "address"
                        }
                      ],
                      "Mail": [
                        {
                          "name": "from",
                          "type": "Person"
                        },
                        {
                          "name": "to",
                          "type": "Person"
                        },
                        {
                          "name": "contents",
                          "type": "string"
                        }
                      ]
                    },
                    "domain": {
                      "name": "Ether Mail",
                      "version": "1",
                      "chainId": 1,
                      "verifyingContract": "0x1b352de7a926ebd1bf52194dab487c2cb0793a9b",
                      "salt": "0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558"
                    },
                    "message": {
                      "from": {
                        "name": "Chris",
                        "wallet": "0x00e3495cf6af59008f22ffaf32d4c92ac33dac47"
                      },
                      "to": {
                        "name": "Bob",
                        "wallet": "0xcc0ee1a1c5e788b61916c8f1c96c960f9a9d3db7"
                      },
                      "contents": "Hello, Bob!"
                    }
                  }
                },
                "Eip7702": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Eip7702",
                    "chainId": 1,
                    "address": "0xcea43594f38316f0e01c161d8dabde0a07a1f512",
                    "nonce": 0
                  }
                },
                "Hash": {
                  "value": {
                    "kind": "Hash",
                    "hash": "0xd356339fa071e88335fdfab167cb600430522b71839d8556fa351fe1b4cd7556"
                  }
                },
                "Message": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Message",
                    "message": "0x49206c6f76652044666e73"
                  }
                },
                "Psbt": {
                  "value": {
                    "blockchainKind": "Bitcoin",
                    "kind": "Psbt",
                    "psbt": "0x70736274ff0100db02000000019fc89619065ef6b81415397bb9879dfc78cacbaae66072d69eb619bfd79d5cba0200000000fdffffff0350c3000000000000225120cc8f48c274c1ac263046c301cb9e028979c8e89c4060b4b857c414ed6e7b43760000000000000000496a476262743400223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd9672a99172cdc13644990aabe785f1595843de7f884249a28cc3170112e7a018b0c6fa00a2171b0000000000225120223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd9672dd5d03000001012b9ceb1b0000000000225120223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd9672011720223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd967200000000"
                  }
                },
                "Schnorr Hash": {
                  "value": {
                    "kind": "Hash",
                    "hash": "0xd356339fa071e88335fdfab167cb600430522b71839d8556fa351fe1b4cd7556",
                    "taprootMerkleRoot": ""
                  }
                },
                "SignerPayload": {
                  "value": {
                    "network": "PolymeshTestnet",
                    "kind": "SignerPayload",
                    "payload": {
                      "address": "5ELwJvCPKBxLm3rve77JGDmHv2FNNE2nUW17FXhBs7Tws4Cr",
                      "blockHash": "0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6",
                      "blockNumber": "0x00000000",
                      "era": "0x00",
                      "genesisHash": "0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6",
                      "method": "0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000",
                      "mode": 0,
                      "nonce": "0x00000000",
                      "tip": "0x00000000000000000000000000000000",
                      "specVersion": "0x006adb7a",
                      "transactionVersion": "0x00000007",
                      "version": 4,
                      "signedExtensions": []
                    }
                  }
                },
                "Transaction": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Transaction",
                    "transaction": "0xe703847735941a82520894f0965f5eb35ace69f01b77031f2cff22daca622887470de4df82000080"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvalId": {
                      "type": "string"
                    },
                    "dateConfirmed": {
                      "type": "string"
                    },
                    "datePolicyResolved": {
                      "type": "string"
                    },
                    "dateRequested": {
                      "type": "string"
                    },
                    "dateSigned": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "fee": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "keyId": {
                      "type": "string"
                    },
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "reason": {
                      "type": "string"
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "hash": {
                              "type": "string",
                              "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                              "description": "32-byte hash in hex encoded format."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Hash"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "taprootMerkleRoot": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                              "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "hash"
                          ],
                          "title": "Hash",
                          "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Message"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "An arbitrary hex encoded message."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "Message",
                          "description": "Signs an arbitrary hex encoded arbitrary message."
                        },
                        {
                          "properties": {
                            "address": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The address of the contract the signer's EOA will be delegated to."
                            },
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "chainId": {
                              "type": "number",
                              "description": "Chain ID."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip7702"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "nonce": {
                              "type": "number",
                              "description": "The current nonce of the signer EOA."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "address",
                            "nonce",
                            "chainId"
                          ],
                          "title": "EIP-7702 Authorization",
                          "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Transaction"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "transaction": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The unsigned hex-encoded transaction."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "Transaction",
                          "description": "Signs an unsigned transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "domain": {
                              "properties": {
                                "chainId": {
                                  "anyOf": [
                                    {
                                      "type": "integer",
                                      "exclusiveMinimum": 0
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "description": "Chain ID."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the signing domain."
                                },
                                "salt": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{64}$",
                                  "description": "32-byte value as a last-resort domain separator."
                                },
                                "verifyingContract": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{40}$",
                                  "description": "The address of the contract that will verify the signature."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "Current major version of the signing domain."
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "description": "Domain separator."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip712"
                              ]
                            },
                            "message": {
                              "additionalProperties": {},
                              "type": "object",
                              "description": "Structured message to sign."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "types": {
                              "additionalProperties": {
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "type"
                                  ]
                                },
                                "type": "array"
                              },
                              "type": "object",
                              "description": "Type definitions."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "types",
                            "domain",
                            "message"
                          ],
                          "title": "EIP-712 TypedData",
                          "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Psbt"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "psbt": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded PSBT."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "psbt"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "format": {
                              "type": "string",
                              "enum": [
                                "Simple",
                                "Full"
                              ],
                              "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Bip322"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "BIP-322",
                          "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "command": {
                              "type": "string",
                              "description": "The Pact command JSON, serialized into a string."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "PactCommand"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "command"
                          ],
                          "title": "PactCommand",
                          "description": "Signs an unsigned Pact command."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignDocDirect"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "signDoc": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded `SignDoc` Protobuf."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "signDoc"
                          ],
                          "title": "SignDocDirect",
                          "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignerPayload"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "payload"
                          ],
                          "title": "SignerPayload",
                          "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "context": {
                              "type": "string",
                              "enum": [
                                "Signature1"
                              ]
                            },
                            "externalAad": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Cip8"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "context"
                          ],
                          "title": "CIP-8",
                          "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "signature": {
                      "properties": {
                        "encoded": {
                          "type": "string"
                        },
                        "r": {
                          "type": "string"
                        },
                        "recid": {
                          "type": "number"
                        },
                        "s": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "r",
                        "s"
                      ]
                    },
                    "signatures": {
                      "items": {
                        "properties": {
                          "encoded": {
                            "type": "string"
                          },
                          "r": {
                            "type": "string"
                          },
                          "recid": {
                            "type": "number"
                          },
                          "s": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "r",
                          "s"
                        ]
                      },
                      "type": "array"
                    },
                    "signedData": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Executing",
                        "Signed",
                        "Confirmed",
                        "Failed",
                        "Rejected"
                      ]
                    },
                    "txHash": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "keyId",
                    "requester",
                    "requestBody",
                    "status",
                    "dateRequested"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Signatures:Create`: Always required."
        }
      }
    },
    "/keys/{keyId}/signatures/{signatureId}": {
      "get": {
        "tags": [
          "Keys"
        ],
        "summary": "Get Signature",
        "description": "Retrieve a signature request details.",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "signatureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvalId": {
                      "type": "string"
                    },
                    "dateConfirmed": {
                      "type": "string"
                    },
                    "datePolicyResolved": {
                      "type": "string"
                    },
                    "dateRequested": {
                      "type": "string"
                    },
                    "dateSigned": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "fee": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "keyId": {
                      "type": "string"
                    },
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "reason": {
                      "type": "string"
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "hash": {
                              "type": "string",
                              "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                              "description": "32-byte hash in hex encoded format."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Hash"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "taprootMerkleRoot": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                              "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "hash"
                          ],
                          "title": "Hash",
                          "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Message"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "An arbitrary hex encoded message."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "Message",
                          "description": "Signs an arbitrary hex encoded arbitrary message."
                        },
                        {
                          "properties": {
                            "address": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The address of the contract the signer's EOA will be delegated to."
                            },
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "chainId": {
                              "type": "number",
                              "description": "Chain ID."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip7702"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "nonce": {
                              "type": "number",
                              "description": "The current nonce of the signer EOA."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "address",
                            "nonce",
                            "chainId"
                          ],
                          "title": "EIP-7702 Authorization",
                          "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Transaction"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "transaction": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The unsigned hex-encoded transaction."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "Transaction",
                          "description": "Signs an unsigned transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "domain": {
                              "properties": {
                                "chainId": {
                                  "anyOf": [
                                    {
                                      "type": "integer",
                                      "exclusiveMinimum": 0
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "description": "Chain ID."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the signing domain."
                                },
                                "salt": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{64}$",
                                  "description": "32-byte value as a last-resort domain separator."
                                },
                                "verifyingContract": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{40}$",
                                  "description": "The address of the contract that will verify the signature."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "Current major version of the signing domain."
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "description": "Domain separator."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip712"
                              ]
                            },
                            "message": {
                              "additionalProperties": {},
                              "type": "object",
                              "description": "Structured message to sign."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "types": {
                              "additionalProperties": {
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "type"
                                  ]
                                },
                                "type": "array"
                              },
                              "type": "object",
                              "description": "Type definitions."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "types",
                            "domain",
                            "message"
                          ],
                          "title": "EIP-712 TypedData",
                          "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Psbt"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "psbt": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded PSBT."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "psbt"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "format": {
                              "type": "string",
                              "enum": [
                                "Simple",
                                "Full"
                              ],
                              "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Bip322"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "BIP-322",
                          "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "command": {
                              "type": "string",
                              "description": "The Pact command JSON, serialized into a string."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "PactCommand"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "command"
                          ],
                          "title": "PactCommand",
                          "description": "Signs an unsigned Pact command."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignDocDirect"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "signDoc": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded `SignDoc` Protobuf."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "signDoc"
                          ],
                          "title": "SignDocDirect",
                          "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignerPayload"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "payload"
                          ],
                          "title": "SignerPayload",
                          "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "context": {
                              "type": "string",
                              "enum": [
                                "Signature1"
                              ]
                            },
                            "externalAad": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Cip8"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "context"
                          ],
                          "title": "CIP-8",
                          "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "signature": {
                      "properties": {
                        "encoded": {
                          "type": "string"
                        },
                        "r": {
                          "type": "string"
                        },
                        "recid": {
                          "type": "number"
                        },
                        "s": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "r",
                        "s"
                      ]
                    },
                    "signatures": {
                      "items": {
                        "properties": {
                          "encoded": {
                            "type": "string"
                          },
                          "r": {
                            "type": "string"
                          },
                          "recid": {
                            "type": "number"
                          },
                          "s": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "r",
                          "s"
                        ]
                      },
                      "type": "array"
                    },
                    "signedData": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Executing",
                        "Signed",
                        "Confirmed",
                        "Failed",
                        "Rejected"
                      ]
                    },
                    "txHash": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "keyId",
                    "requester",
                    "requestBody",
                    "status",
                    "dateRequested"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Signatures:Read`: Always required."
        }
      }
    },
    "/networks/fees": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "Estimate Fees",
        "description": "Gets real-time fee details for a given network, allowing users to make decisions based on their preferences for transaction speed/priority. Three levels of priority will be displayed: `slow`, `standard`, `fast`.\n\n<Note>\nNote: Get Fee only works on EVM chains currently.  We will add support for additional L1s incrementally.\n</Note>",
        "parameters": [
          {
            "name": "network",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Bitcoin",
                "BitcoinSignet",
                "BitcoinTestnet3",
                "Adi",
                "AdiTestnet",
                "ArbitrumOne",
                "ArbitrumGoerli",
                "ArbitrumSepolia",
                "AvalancheC",
                "AvalancheCFuji",
                "Base",
                "BaseGoerli",
                "BaseSepolia",
                "Bob",
                "BobSepolia",
                "Bsc",
                "BscTestnet",
                "Berachain",
                "BerachainBArtio",
                "BerachainBepolia",
                "Celo",
                "CeloAlfajores",
                "Codex",
                "CodexSepolia",
                "Ethereum",
                "EthereumGoerli",
                "EthereumSepolia",
                "EthereumHolesky",
                "EthereumHoodi",
                "FantomOpera",
                "FantomTestnet",
                "FlareC",
                "FlareCCoston2",
                "Ink",
                "InkSepolia",
                "Optimism",
                "OptimismGoerli",
                "OptimismSepolia",
                "Plume",
                "PlumeSepolia",
                "Polygon",
                "PolygonAmoy",
                "PolygonMumbai",
                "Race",
                "RaceSepolia",
                "Sonic",
                "SonicTestnet",
                "Tsc",
                "TscTestnet1"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "blockNumber": {
                          "type": "number"
                        },
                        "fast": {
                          "properties": {
                            "blockHorizon": {
                              "type": "number"
                            },
                            "feeRate": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "feeRate",
                            "blockHorizon"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Bitcoin"
                          ]
                        },
                        "network": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "Bitcoin",
                                "BitcoinSignet",
                                "BitcoinTestnet3"
                              ]
                            },
                            {
                              "type": "string",
                              "enum": [
                                "Dogecoin",
                                "DogecoinTestnet"
                              ]
                            },
                            {
                              "type": "string",
                              "enum": [
                                "Litecoin",
                                "LitecoinTestnet"
                              ]
                            }
                          ]
                        },
                        "slow": {
                          "properties": {
                            "blockHorizon": {
                              "type": "number"
                            },
                            "feeRate": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "feeRate",
                            "blockHorizon"
                          ]
                        },
                        "standard": {
                          "properties": {
                            "blockHorizon": {
                              "type": "number"
                            },
                            "feeRate": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "feeRate",
                            "blockHorizon"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "network",
                        "blockNumber",
                        "slow",
                        "standard",
                        "fast"
                      ],
                      "title": "Bitcoin"
                    },
                    {
                      "properties": {
                        "baseFeePerGas": {
                          "type": "string"
                        },
                        "blockNumber": {
                          "type": "number"
                        },
                        "fast": {
                          "properties": {
                            "maxFeePerGas": {
                              "type": "string"
                            },
                            "maxPriorityFeePerGas": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "maxPriorityFeePerGas",
                            "maxFeePerGas"
                          ]
                        },
                        "kind": {
                          "type": "string",
                          "enum": [
                            "Eip1559"
                          ]
                        },
                        "network": {
                          "type": "string",
                          "enum": [
                            "Adi",
                            "AdiTestnet",
                            "ArbitrumOne",
                            "ArbitrumGoerli",
                            "ArbitrumSepolia",
                            "AvalancheC",
                            "AvalancheCFuji",
                            "Base",
                            "BaseGoerli",
                            "BaseSepolia",
                            "Bob",
                            "BobSepolia",
                            "Bsc",
                            "BscTestnet",
                            "Berachain",
                            "BerachainBArtio",
                            "BerachainBepolia",
                            "Celo",
                            "CeloAlfajores",
                            "Codex",
                            "CodexSepolia",
                            "Ethereum",
                            "EthereumGoerli",
                            "EthereumSepolia",
                            "EthereumHolesky",
                            "EthereumHoodi",
                            "FantomOpera",
                            "FantomTestnet",
                            "FlareC",
                            "FlareCCoston2",
                            "Ink",
                            "InkSepolia",
                            "Optimism",
                            "OptimismGoerli",
                            "OptimismSepolia",
                            "Plume",
                            "PlumeSepolia",
                            "Polygon",
                            "PolygonAmoy",
                            "PolygonMumbai",
                            "Race",
                            "RaceSepolia",
                            "Sonic",
                            "SonicTestnet",
                            "Tsc",
                            "TscTestnet1"
                          ]
                        },
                        "slow": {
                          "properties": {
                            "maxFeePerGas": {
                              "type": "string"
                            },
                            "maxPriorityFeePerGas": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "maxPriorityFeePerGas",
                            "maxFeePerGas"
                          ]
                        },
                        "standard": {
                          "properties": {
                            "maxFeePerGas": {
                              "type": "string"
                            },
                            "maxPriorityFeePerGas": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "maxPriorityFeePerGas",
                            "maxFeePerGas"
                          ]
                        }
                      },
                      "type": "object",
                      "required": [
                        "kind",
                        "network",
                        "blockNumber",
                        "slow",
                        "standard",
                        "fast",
                        "baseFeePerGas"
                      ],
                      "title": "EVM EIP-1559",
                      "description": "For EIP-1559, we  provide 2 different fields for each strategy: `maxFee` (per Gas) and `maxPriorityFee` (per Gas). To compute these estimations, we look at the block history, compute three different percentiles for the rewards offered by the transactions in the blocks, and then calculate the average for each strategy."
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/networks/read-contract": {
      "post": {
        "tags": [
          "Networks"
        ],
        "summary": "Read Contract",
        "description": "Call a read-only function on a smart contract. In Solidity, this use the `view` keyword.\n\n  <Note>\n  Currently only works on EVM compatible chains.\n  </Note>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "Address of the contract to call"
                      },
                      "data": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "Encoded hex string indicating which function in the smart contract to call with which parameters. For more information, see the [encodeFunctionData ethersJS documentation](https://docs.ethers.org/v6/api/abi/#Interface-encodeFunctionData)"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Evm"
                        ]
                      },
                      "network": {
                        "type": "string",
                        "enum": [
                          "Adi",
                          "AdiTestnet",
                          "ArbitrumOne",
                          "ArbitrumGoerli",
                          "ArbitrumSepolia",
                          "AvalancheC",
                          "AvalancheCFuji",
                          "Base",
                          "BaseGoerli",
                          "BaseSepolia",
                          "Bob",
                          "BobSepolia",
                          "Bsc",
                          "BscTestnet",
                          "Berachain",
                          "BerachainBArtio",
                          "BerachainBepolia",
                          "Celo",
                          "CeloAlfajores",
                          "Codex",
                          "CodexSepolia",
                          "Ethereum",
                          "EthereumGoerli",
                          "EthereumSepolia",
                          "EthereumHolesky",
                          "EthereumHoodi",
                          "FantomOpera",
                          "FantomTestnet",
                          "FlareC",
                          "FlareCCoston2",
                          "Ink",
                          "InkSepolia",
                          "Optimism",
                          "OptimismGoerli",
                          "OptimismSepolia",
                          "Plume",
                          "PlumeSepolia",
                          "Polygon",
                          "PolygonAmoy",
                          "PolygonMumbai",
                          "Race",
                          "RaceSepolia",
                          "Sonic",
                          "SonicTestnet",
                          "Tsc",
                          "TscTestnet1"
                        ],
                        "description": "Network used for the wallet."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "network",
                      "contract",
                      "data"
                    ],
                    "title": "EVM"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "Evm"
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "kind",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/networks/{network}/validators": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "List Canton Validators",
        "description": "Retrieve the list of configured Canton Validators in your organization.",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "canton",
                "canton-devnet",
                "canton-testnet"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/CantonValidator",
                        "summary": null,
                        "description": null
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Networks:CantonValidators:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Networks"
        ],
        "summary": "Create Canton Validator",
        "description": "Link a Canton Validator to your organization. This is required in order to create wallets or interact with the Canton network.\n\n  The `Shared` option allows you to use a shared validator hosted by DFNS and get started in seconds, while the `Custom` option allows you to connect your own validator and ledger nodes using OAuth2 authentication.\n\n  Read details about the process [here](https://docs.dfns.co/networks/canton-validators). ",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "canton",
                "canton-devnet",
                "canton-testnet"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Shared"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Nickname for this validator."
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind"
                    ],
                    "title": "Dfns Shared validator",
                    "description": "Use Dfns' shared validator to create your Canton Wallets. See [here](https://docs.dfns.co/networks/canton-validators#option-1-use-dfns-shared-validator)"
                  },
                  {
                    "properties": {
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Custom"
                        ]
                      },
                      "ledger": {
                        "properties": {
                          "oauth2": {
                            "properties": {
                              "audience": {
                                "type": "string",
                                "description": "the audience your configured on your auth provider. It is suggested to start with `https://canton.network.global`."
                              },
                              "clientId": {
                                "type": "string",
                                "description": "The client id from your auth provider for this application."
                              },
                              "clientSecret": {
                                "type": "string",
                                "description": "The client secret from your auth provider for this application."
                              },
                              "domain": {
                                "type": "string",
                                "format": "uri",
                                "description": "your OAuth2 tenant domain. Provided by your auth provider. "
                              },
                              "tokenPath": {
                                "type": "string",
                                "description": "token endpoint from your authorization provider. We will call this endpoint on your tenant domain (i.e.: `<domain>/<token path>`)"
                              }
                            },
                            "type": "object",
                            "required": [
                              "domain",
                              "audience",
                              "clientId",
                              "clientSecret"
                            ],
                            "description": "How Dfns will authenticate into your validator/ledger. You should have setup authentication already (see details [here](https://docs.dev.sync.global/validator_operator/validator_helm.html#helm-validator-auth)), you can reuse the same Application details. See examples in this endpoint payload examples above."
                          },
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL to reach the API at this address. The calls will be originating from our IP addresses (see [Dfns Environments](https://docs.dfns.co/api-reference/environments))"
                          }
                        },
                        "type": "object",
                        "required": [
                          "url",
                          "oauth2"
                        ],
                        "description": "Configuration to reach your validator Ledger JSON API. We will call endpoints such as `/v2/state/ledger-end`, `/v2/state/active-contracts`, `/v2/parties/participant-id`, `/v2/interactive-submission/prepare`, `/v2/interactive-submission/execute`, `/v2/commands/completions`. See the underlying details [here](https://docs.dev.sync.global/app_dev/ledger_api/index.html)."
                      },
                      "name": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Nickname for this validator."
                      },
                      "validator": {
                        "properties": {
                          "oauth2": {
                            "properties": {
                              "audience": {
                                "type": "string",
                                "description": "the audience your configured on your auth provider. It is suggested to start with `https://canton.network.global`."
                              },
                              "clientId": {
                                "type": "string",
                                "description": "The client id from your auth provider for this application."
                              },
                              "clientSecret": {
                                "type": "string",
                                "description": "The client secret from your auth provider for this application."
                              },
                              "domain": {
                                "type": "string",
                                "format": "uri",
                                "description": "your OAuth2 tenant domain. Provided by your auth provider. "
                              },
                              "tokenPath": {
                                "type": "string",
                                "description": "token endpoint from your authorization provider. We will call this endpoint on your tenant domain (i.e.: `<domain>/<token path>`)"
                              }
                            },
                            "type": "object",
                            "required": [
                              "domain",
                              "audience",
                              "clientId",
                              "clientSecret"
                            ],
                            "description": "How Dfns will authenticate into your validator/ledger. You should have setup authentication already (see details [here](https://docs.dev.sync.global/validator_operator/validator_helm.html#helm-validator-auth)), you can reuse the same Application details. See examples in this endpoint payload examples above."
                          },
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL to reach the API at this address. The calls will be originating from our IP addresses (see [Dfns Environments](https://docs.dfns.co/api-reference/environments))"
                          }
                        },
                        "type": "object",
                        "required": [
                          "url",
                          "oauth2"
                        ],
                        "description": "Configuration to reach your validator Signing API. We will call the validator External Signing API at the url (and using the credentials) defined below ; for instance `$URL/api/validator/v0/admin/external-party/topology/generate`. See the underlying calls details [here](https://docs.dev.sync.global/app_dev/validator_api/index.html#validator-api-external-signing)."
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "validator",
                      "ledger"
                    ],
                    "title": "Your own custom validator",
                    "description": "Connect your own validator. See [here](https://docs.dfns.co/networks/canton-validators#option-2-connect-your-own-validator-byov) for more info."
                  }
                ]
              },
              "examples": {
                "Custom Validator | Auth0": {
                  "value": {
                    "kind": "Custom",
                    "name": "My validator with auth0 credentials",
                    "validator": {
                      "url": "https://validator.testnet.mydomain.com/",
                      "oauth2": {
                        "domain": "https://xxxxxx.us.auth0.com",
                        "clientId": "xxxxxx",
                        "clientSecret": "xxxxxxx",
                        "audience": "https://canton.network.global"
                      }
                    },
                    "ledger": {
                      "url": "https://ledger.testnet.mydomain.com/",
                      "oauth2": {
                        "domain": "https://xxxxxx.us.auth0.com",
                        "clientId": "xxxxxx",
                        "clientSecret": "xxxxxxx",
                        "audience": "https://canton.network.global"
                      }
                    }
                  }
                },
                "Custom Validator | Keycloak": {
                  "value": {
                    "kind": "Custom",
                    "name": "My validator with auth0 credentials",
                    "validator": {
                      "url": "https://validator.testnet.mydomain.com/",
                      "oauth2": {
                        "domain": "https://my-own-server.running-keycloak.com",
                        "tokenPath": "/auth/realms/xxxxx/protocol/openid-connect/token",
                        "clientId": "xxxxxx",
                        "clientSecret": "xxxxxxx",
                        "audience": "https://validator.testnet.mydomain.com/"
                      }
                    },
                    "ledger": {
                      "url": "https://ledger.testnet.mydomain.com/",
                      "oauth2": {
                        "domain": "https://my-own-server.running-keycloak.com",
                        "tokenPath": "/auth/realms/xxxxx/protocol/openid-connect/token",
                        "clientId": "xxxxxx",
                        "clientSecret": "xxxxxxx",
                        "audience": "https://ledger.testnet.mydomain.com/"
                      }
                    }
                  }
                },
                "Custom Validator | Okta": {
                  "value": {
                    "kind": "Custom",
                    "name": "My validator with auth0 credentials",
                    "validator": {
                      "url": "https://validator.testnet.mydomain.com/",
                      "oauth2": {
                        "domain": "https://xxxxxx.okta.com",
                        "tokenPath": "oauth2/xxxxxx/v1/token",
                        "clientId": "xxxxxx",
                        "clientSecret": "xxxxxxx",
                        "audience": "https://validator.testnet.mydomain.com/"
                      }
                    },
                    "ledger": {
                      "url": "https://ledger.testnet.mydomain.com/",
                      "oauth2": {
                        "domain": "https://xxxxxx.okta.com",
                        "tokenPath": "oauth2/xxxxxx/v1/token",
                        "clientId": "xxxxxx",
                        "clientSecret": "xxxxxxx",
                        "audience": "https://ledger.testnet.mydomain.com/"
                      }
                    }
                  }
                },
                "Shared Validator": {
                  "value": {
                    "kind": "Shared",
                    "name": "My shared validator"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CantonValidator",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Networks:CantonValidators:Create`: Always required."
        }
      }
    },
    "/networks/{network}/validators/{validatorId}": {
      "get": {
        "tags": [
          "Networks"
        ],
        "summary": "Get Canton Validator",
        "description": "Return a configured Canton Validator in your organization.",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "canton",
                "canton-devnet",
                "canton-testnet"
              ]
            }
          },
          {
            "name": "validatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "cv-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CantonValidator",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Networks:CantonValidators:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Networks"
        ],
        "summary": "Update Canton Validator",
        "description": "Update an existing Canton Validator configuration.\n  \n  Read details about the process [here](https://docs.dfns.co/networks/canton-validators). ",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "canton",
                "canton-devnet",
                "canton-testnet"
              ]
            }
          },
          {
            "name": "validatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "cv-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ledger": {
                    "properties": {
                      "oauth2": {
                        "properties": {
                          "audience": {
                            "type": "string",
                            "description": "the audience your configured on your auth provider. It is suggested to start with `https://canton.network.global`."
                          },
                          "clientId": {
                            "type": "string",
                            "description": "The client id from your auth provider for this application."
                          },
                          "clientSecret": {
                            "type": "string",
                            "description": "The client secret from your auth provider for this application."
                          },
                          "domain": {
                            "type": "string",
                            "format": "uri",
                            "description": "your OAuth2 tenant domain. Provided by your auth provider. "
                          },
                          "tokenPath": {
                            "type": "string",
                            "description": "token endpoint from your authorization provider. We will call this endpoint on your tenant domain (i.e.: `<domain>/<token path>`)"
                          }
                        },
                        "type": "object",
                        "required": [
                          "domain",
                          "audience",
                          "clientId",
                          "clientSecret"
                        ],
                        "description": "How Dfns will authenticate into your validator/ledger. You should have setup authentication already (see details [here](https://docs.dev.sync.global/validator_operator/validator_helm.html#helm-validator-auth)), you can reuse the same Application details. See examples in this endpoint payload examples above."
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL to reach the API at this address. The calls will be originating from our IP addresses (see [Dfns Environments](https://docs.dfns.co/api-reference/environments))"
                      }
                    },
                    "type": "object",
                    "required": [
                      "url",
                      "oauth2"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Nickname for this validator."
                  },
                  "validator": {
                    "properties": {
                      "oauth2": {
                        "properties": {
                          "audience": {
                            "type": "string",
                            "description": "the audience your configured on your auth provider. It is suggested to start with `https://canton.network.global`."
                          },
                          "clientId": {
                            "type": "string",
                            "description": "The client id from your auth provider for this application."
                          },
                          "clientSecret": {
                            "type": "string",
                            "description": "The client secret from your auth provider for this application."
                          },
                          "domain": {
                            "type": "string",
                            "format": "uri",
                            "description": "your OAuth2 tenant domain. Provided by your auth provider. "
                          },
                          "tokenPath": {
                            "type": "string",
                            "description": "token endpoint from your authorization provider. We will call this endpoint on your tenant domain (i.e.: `<domain>/<token path>`)"
                          }
                        },
                        "type": "object",
                        "required": [
                          "domain",
                          "audience",
                          "clientId",
                          "clientSecret"
                        ],
                        "description": "How Dfns will authenticate into your validator/ledger. You should have setup authentication already (see details [here](https://docs.dev.sync.global/validator_operator/validator_helm.html#helm-validator-auth)), you can reuse the same Application details. See examples in this endpoint payload examples above."
                      },
                      "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "URL to reach the API at this address. The calls will be originating from our IP addresses (see [Dfns Environments](https://docs.dfns.co/api-reference/environments))"
                      }
                    },
                    "type": "object",
                    "required": [
                      "url",
                      "oauth2"
                    ]
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CantonValidator",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Networks:CantonValidators:Update`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Networks"
        ],
        "summary": "Delete Canton Validator",
        "description": "Delete a specific Canton Validator configuration.",
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "canton",
                "canton-devnet",
                "canton-testnet"
              ]
            }
          },
          {
            "name": "validatorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "cv-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CantonValidator",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Networks:CantonValidators:Delete`: Always required."
        }
      }
    },
    "/permissions": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "List Permissions",
        "description": "Retrieves a list of permissions (success) or gives a reason why it's not possible (failure).",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "allOf": [
                          {
                            "properties": {
                              "dateCreated": {
                                "type": "string"
                              },
                              "dateUpdated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "isArchived": {
                                "type": "boolean"
                              },
                              "isImmutable": {
                                "type": "boolean"
                              },
                              "name": {
                                "type": "string"
                              },
                              "operations": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Active"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "id",
                              "name",
                              "operations",
                              "status",
                              "isImmutable",
                              "isArchived",
                              "dateCreated",
                              "dateUpdated"
                            ]
                          },
                          {
                            "properties": {
                              "pendingChangeRequest": {
                                "properties": {
                                  "approvalId": {
                                    "type": "string"
                                  },
                                  "body": {
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "isArchived": {
                                        "type": "boolean"
                                      },
                                      "isImmutable": {
                                        "type": "boolean"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "operations": {
                                        "items": {
                                          "type": "string"
                                        },
                                        "type": "array"
                                      },
                                      "status": {
                                        "type": "string",
                                        "enum": [
                                          "Active"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "name",
                                      "status",
                                      "operations",
                                      "isImmutable",
                                      "isArchived"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "dateResolved": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "entityId": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Permission"
                                    ]
                                  },
                                  "operationKind": {
                                    "type": "string",
                                    "enum": [
                                      "Update"
                                    ]
                                  },
                                  "requester": {
                                    "properties": {
                                      "appId": {
                                        "type": "string"
                                      },
                                      "tokenId": {
                                        "type": "string"
                                      },
                                      "userId": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "userId"
                                    ]
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Applied",
                                      "Failed",
                                      "Pending",
                                      "Rejected"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "requester",
                                  "status",
                                  "entityId",
                                  "dateCreated",
                                  "kind",
                                  "operationKind",
                                  "body"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Create Permission",
        "description": "Creates a permission that allows certain specified operations to be executed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "operations": {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "Alias:Create",
                            "Alias:Delete",
                            "Alias:Read",
                            "Alias:Update",
                            "Auth:Logs:Read",
                            "Auth:Users:Create",
                            "Auth:Users:Read",
                            "Auth:Users:Update",
                            "Auth:Users:Activate",
                            "Auth:Users:Deactivate",
                            "Auth:Users:Delete",
                            "Auth:ServiceAccounts:Create",
                            "Auth:ServiceAccounts:Read",
                            "Auth:ServiceAccounts:Update",
                            "Auth:ServiceAccounts:Deactivate",
                            "Auth:ServiceAccounts:Activate",
                            "Auth:ServiceAccounts:Delete",
                            "Auth:Pats:Create",
                            "Auth:Register:Delegated",
                            "Auth:Login:Delegated",
                            "Auth:Recover:Delegated",
                            "Agreements:Acceptance:Create",
                            "Agreements:Acceptance:Read",
                            "Exchanges:Create",
                            "Exchanges:Read",
                            "Exchanges:Delete",
                            "Exchanges:Deposits:Create",
                            "Exchanges:Withdrawals:Create",
                            "FeeSponsors:Create",
                            "FeeSponsors:Read",
                            "FeeSponsors:Update",
                            "FeeSponsors:Delete",
                            "FeeSponsors:Use",
                            "Orgs:Read",
                            "Orgs:Update",
                            "Orgs:Settings:Read",
                            "Orgs:Settings:Update",
                            "Permissions:Archive",
                            "Permissions:Create",
                            "Permissions:Read",
                            "Permissions:Update",
                            "Permissions:Assign",
                            "Permissions:Revoke",
                            "Permissions:Assignments:Read",
                            "Policies:Archive",
                            "Policies:Create",
                            "Policies:Read",
                            "Policies:Update",
                            "Policies:Approvals:Read",
                            "Policies:Approvals:Approve",
                            "Signers:ListSigners",
                            "Stakes:Create",
                            "Stakes:Read",
                            "Stakes:Update",
                            "Swaps:Create",
                            "Swaps:Read",
                            "Yields:Create",
                            "Yields:Update",
                            "Yields:Read",
                            "Keys:Create",
                            "Keys:Delete",
                            "Keys:Read",
                            "Keys:Update",
                            "Keys:Reuse",
                            "Keys:Delegate",
                            "Keys:Import",
                            "Keys:Export",
                            "Keys:Derive",
                            "Keys:Signatures:Create",
                            "Keys:Signatures:Read",
                            "KeyStores:Read",
                            "Networks:CantonValidators:Create",
                            "Networks:CantonValidators:Read",
                            "Networks:CantonValidators:Update",
                            "Networks:CantonValidators:Delete",
                            "Wallets:Create",
                            "Wallets:Read",
                            "Wallets:Update",
                            "Wallets:Tags:Add",
                            "Wallets:Tags:Delete",
                            "Wallets:Transactions:Create",
                            "Wallets:Transactions:Read",
                            "Wallets:Transfers:Create",
                            "Wallets:Transfers:Read",
                            "Wallets:Offers:Read",
                            "Wallets:Offers:Settle",
                            "Webhooks:Create",
                            "Webhooks:Read",
                            "Webhooks:Update",
                            "Webhooks:Delete",
                            "Webhooks:Ping",
                            "Webhooks:Events:Read",
                            "Billing:Read",
                            "Billing:Write",
                            "Analytics:Read"
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "Wallets:GenerateSignature",
                            "Wallets:BroadcastTransaction",
                            "Auth:Action:Sign",
                            "Auth:Apps:Read",
                            "Auth:Apps:Create",
                            "Auth:Apps:Update",
                            "Auth:Creds:Create",
                            "Auth:Creds:Read",
                            "Auth:Creds:Update",
                            "Auth:Creds:Code:Create",
                            "Auth:Types:Application",
                            "Auth:Types:Employee",
                            "Auth:Types:EndUser",
                            "Auth:Types:Pat",
                            "Auth:Types:ServiceAccount",
                            "Internal:Auth:Types:Staff",
                            "Auth:Users:Delegate",
                            "PermissionAssignments:Create",
                            "PermissionAssignments:Read",
                            "PermissionAssignments:Revoke"
                          ]
                        }
                      ]
                    },
                    "type": "array",
                    "minItems": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "name",
                  "operations"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateUpdated": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "isImmutable": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "operations": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "operations",
                    "status",
                    "isImmutable",
                    "isArchived",
                    "dateCreated",
                    "dateUpdated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Create`: Always required."
        }
      }
    },
    "/permissions/{permissionId}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Permission",
        "description": "Retrieves a specific permission (success) or gives a reason why it's not possible (failure).",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "isArchived": {
                          "type": "boolean"
                        },
                        "isImmutable": {
                          "type": "boolean"
                        },
                        "name": {
                          "type": "string"
                        },
                        "operations": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "operations",
                        "status",
                        "isImmutable",
                        "isArchived",
                        "dateCreated",
                        "dateUpdated"
                      ]
                    },
                    {
                      "properties": {
                        "pendingChangeRequest": {
                          "properties": {
                            "approvalId": {
                              "type": "string"
                            },
                            "body": {
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "isArchived": {
                                  "type": "boolean"
                                },
                                "isImmutable": {
                                  "type": "boolean"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "operations": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Active"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "name",
                                "status",
                                "operations",
                                "isImmutable",
                                "isArchived"
                              ]
                            },
                            "dateCreated": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateResolved": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "entityId": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Permission"
                              ]
                            },
                            "operationKind": {
                              "type": "string",
                              "enum": [
                                "Update"
                              ]
                            },
                            "requester": {
                              "properties": {
                                "appId": {
                                  "type": "string"
                                },
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Applied",
                                "Failed",
                                "Pending",
                                "Rejected"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "requester",
                            "status",
                            "entityId",
                            "dateCreated",
                            "kind",
                            "operationKind",
                            "body"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Update Permission",
        "description": "Updates an existing permission. Response either returns the updated permission (success) or the reason why it was not possible to update (failure).",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "operations": {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "Alias:Create",
                            "Alias:Delete",
                            "Alias:Read",
                            "Alias:Update",
                            "Auth:Logs:Read",
                            "Auth:Users:Create",
                            "Auth:Users:Read",
                            "Auth:Users:Update",
                            "Auth:Users:Activate",
                            "Auth:Users:Deactivate",
                            "Auth:Users:Delete",
                            "Auth:ServiceAccounts:Create",
                            "Auth:ServiceAccounts:Read",
                            "Auth:ServiceAccounts:Update",
                            "Auth:ServiceAccounts:Deactivate",
                            "Auth:ServiceAccounts:Activate",
                            "Auth:ServiceAccounts:Delete",
                            "Auth:Pats:Create",
                            "Auth:Register:Delegated",
                            "Auth:Login:Delegated",
                            "Auth:Recover:Delegated",
                            "Agreements:Acceptance:Create",
                            "Agreements:Acceptance:Read",
                            "Exchanges:Create",
                            "Exchanges:Read",
                            "Exchanges:Delete",
                            "Exchanges:Deposits:Create",
                            "Exchanges:Withdrawals:Create",
                            "FeeSponsors:Create",
                            "FeeSponsors:Read",
                            "FeeSponsors:Update",
                            "FeeSponsors:Delete",
                            "FeeSponsors:Use",
                            "Orgs:Read",
                            "Orgs:Update",
                            "Orgs:Settings:Read",
                            "Orgs:Settings:Update",
                            "Permissions:Archive",
                            "Permissions:Create",
                            "Permissions:Read",
                            "Permissions:Update",
                            "Permissions:Assign",
                            "Permissions:Revoke",
                            "Permissions:Assignments:Read",
                            "Policies:Archive",
                            "Policies:Create",
                            "Policies:Read",
                            "Policies:Update",
                            "Policies:Approvals:Read",
                            "Policies:Approvals:Approve",
                            "Signers:ListSigners",
                            "Stakes:Create",
                            "Stakes:Read",
                            "Stakes:Update",
                            "Swaps:Create",
                            "Swaps:Read",
                            "Yields:Create",
                            "Yields:Update",
                            "Yields:Read",
                            "Keys:Create",
                            "Keys:Delete",
                            "Keys:Read",
                            "Keys:Update",
                            "Keys:Reuse",
                            "Keys:Delegate",
                            "Keys:Import",
                            "Keys:Export",
                            "Keys:Derive",
                            "Keys:Signatures:Create",
                            "Keys:Signatures:Read",
                            "KeyStores:Read",
                            "Networks:CantonValidators:Create",
                            "Networks:CantonValidators:Read",
                            "Networks:CantonValidators:Update",
                            "Networks:CantonValidators:Delete",
                            "Wallets:Create",
                            "Wallets:Read",
                            "Wallets:Update",
                            "Wallets:Tags:Add",
                            "Wallets:Tags:Delete",
                            "Wallets:Transactions:Create",
                            "Wallets:Transactions:Read",
                            "Wallets:Transfers:Create",
                            "Wallets:Transfers:Read",
                            "Wallets:Offers:Read",
                            "Wallets:Offers:Settle",
                            "Webhooks:Create",
                            "Webhooks:Read",
                            "Webhooks:Update",
                            "Webhooks:Delete",
                            "Webhooks:Ping",
                            "Webhooks:Events:Read",
                            "Billing:Read",
                            "Billing:Write",
                            "Analytics:Read"
                          ]
                        },
                        {
                          "type": "string",
                          "enum": [
                            "Wallets:GenerateSignature",
                            "Wallets:BroadcastTransaction",
                            "Auth:Action:Sign",
                            "Auth:Apps:Read",
                            "Auth:Apps:Create",
                            "Auth:Apps:Update",
                            "Auth:Creds:Create",
                            "Auth:Creds:Read",
                            "Auth:Creds:Update",
                            "Auth:Creds:Code:Create",
                            "Auth:Types:Application",
                            "Auth:Types:Employee",
                            "Auth:Types:EndUser",
                            "Auth:Types:Pat",
                            "Auth:Types:ServiceAccount",
                            "Internal:Auth:Types:Staff",
                            "Auth:Users:Delegate",
                            "PermissionAssignments:Create",
                            "PermissionAssignments:Read",
                            "PermissionAssignments:Revoke"
                          ]
                        }
                      ]
                    },
                    "type": "array",
                    "minItems": 1
                  }
                },
                "additionalProperties": false,
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateUpdated": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "isImmutable": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "operations": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "operations",
                    "status",
                    "isImmutable",
                    "isArchived",
                    "dateCreated",
                    "dateUpdated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Update`: Always required."
        }
      }
    },
    "/permissions/{permissionId}/archive": {
      "put": {
        "tags": [
          "Permissions"
        ],
        "summary": "Delete Permission",
        "description": "Delete a specific Permission.",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "isArchived": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "isArchived"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateUpdated": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "isArchived": {
                      "type": "boolean"
                    },
                    "isImmutable": {
                      "type": "boolean"
                    },
                    "name": {
                      "type": "string"
                    },
                    "operations": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Active"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "name",
                    "operations",
                    "status",
                    "isImmutable",
                    "isArchived",
                    "dateCreated",
                    "dateUpdated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Archive`: Always required."
        }
      }
    },
    "/permissions/{permissionId}/assignments": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "List Permission Assignments",
        "description": "Retrieves a list of permission assignments (success) or gives a reason why it's not possible (failure).",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "allOf": [
                          {
                            "properties": {
                              "dateCreated": {
                                "type": "string"
                              },
                              "dateUpdated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "identityId": {
                                "type": "string"
                              },
                              "isImmutable": {
                                "type": "boolean"
                              },
                              "permissionId": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "id",
                              "permissionId",
                              "identityId",
                              "isImmutable",
                              "dateCreated",
                              "dateUpdated"
                            ]
                          },
                          {
                            "properties": {
                              "pendingChangeRequest": {
                                "properties": {
                                  "approvalId": {
                                    "type": "string"
                                  },
                                  "body": {
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      },
                                      "identityId": {
                                        "type": "string"
                                      },
                                      "isImmutable": {
                                        "type": "boolean"
                                      },
                                      "permissionId": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "permissionId",
                                      "identityId",
                                      "isImmutable"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "dateResolved": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "entityId": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Assignment"
                                    ]
                                  },
                                  "operationKind": {
                                    "type": "string",
                                    "enum": [
                                      "Create",
                                      "Delete"
                                    ]
                                  },
                                  "requester": {
                                    "properties": {
                                      "appId": {
                                        "type": "string"
                                      },
                                      "tokenId": {
                                        "type": "string"
                                      },
                                      "userId": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "userId"
                                    ]
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Applied",
                                      "Failed",
                                      "Pending",
                                      "Rejected"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "requester",
                                  "status",
                                  "entityId",
                                  "dateCreated",
                                  "kind",
                                  "operationKind",
                                  "body"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Assignments:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Assign Permission",
        "description": "Creates a permission that allows certain specified operations to be executed. \n  \n  Response is either the permission object itself (success) or a reason why it was not possible to create the permission (failure).",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "identityId": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "identityId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateUpdated": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "identityId": {
                      "type": "string"
                    },
                    "isImmutable": {
                      "type": "boolean"
                    },
                    "permissionId": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "permissionId",
                    "identityId",
                    "isImmutable",
                    "dateCreated",
                    "dateUpdated"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Assign`: Always required."
        }
      }
    },
    "/permissions/{permissionId}/assignments/{assignmentId}": {
      "delete": {
        "tags": [
          "Permissions"
        ],
        "summary": "Revoke Permission",
        "description": "Revokes a permission assignment (success) or gives reason why it’s not possible (failure).",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "assignmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Permissions:Revoke`: Always required."
        }
      }
    },
    "/signers": {
      "get": {
        "tags": [
          "Signers"
        ],
        "summary": "List Signers",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clusters": {
                      "items": {
                        "properties": {
                          "clusterId": {
                            "type": "string"
                          },
                          "signers": {
                            "items": {
                              "properties": {
                                "encryptionKey": {
                                  "type": "string"
                                },
                                "signerId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "signerId",
                                "encryptionKey"
                              ]
                            },
                            "type": "array"
                          }
                        },
                        "type": "object",
                        "required": [
                          "clusterId",
                          "signers"
                        ]
                      },
                      "type": "array"
                    }
                  },
                  "type": "object",
                  "required": [
                    "clusters"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Signers:ListSigners`: Always required."
        }
      }
    },
    "/staking/stakes": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "List Stakes",
        "description": "Retrieve the list of stakes.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "data": {
                                "properties": {
                                  "covenantPubkeys": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "covenantThreshold": {
                                    "type": "number"
                                  },
                                  "finalityProviders": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "lockHeight": {
                                    "type": "number"
                                  },
                                  "magicBytes": {
                                    "type": "string"
                                  },
                                  "minUnbondingTime": {
                                    "type": "number"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "finalityProviders",
                                  "covenantPubkeys",
                                  "magicBytes",
                                  "covenantThreshold",
                                  "minUnbondingTime",
                                  "lockHeight"
                                ]
                              },
                              "dateCreated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Babylon"
                                ]
                              },
                              "provider": {
                                "type": "string",
                                "enum": [
                                  "Figment"
                                ]
                              },
                              "requestBody": {
                                "allOf": [
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "duration": {
                                            "type": "number"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Babylon"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount",
                                          "duration"
                                        ],
                                        "title": "Babylon"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Ethereum"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount"
                                        ],
                                        "title": "Ethereum"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "lockedIotas": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Iota"
                                            ]
                                          },
                                          "validator": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "validator",
                                          "amount"
                                        ],
                                        "title": "Iota"
                                      }
                                    ]
                                  },
                                  {
                                    "properties": {
                                      "externalId": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "requester": {
                                "properties": {
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "userId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "userId"
                                ]
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Active",
                                  "Failed",
                                  "Staking",
                                  "Unbonding",
                                  "Unbond",
                                  "Withdrawing",
                                  "Withdrawn"
                                ]
                              },
                              "walletId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "id",
                              "walletId",
                              "status",
                              "requester",
                              "requestBody",
                              "dateCreated",
                              "protocol",
                              "data"
                            ],
                            "title": "Babylon"
                          },
                          {
                            "properties": {
                              "data": {
                                "properties": {
                                  "amount": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Iota",
                                      "LockedIota"
                                    ]
                                  },
                                  "stakedObjects": {
                                    "items": {
                                      "properties": {
                                        "amount": {
                                          "type": "string"
                                        },
                                        "expirationDate": {
                                          "type": "string"
                                        },
                                        "id": {
                                          "type": "string"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "amount"
                                      ]
                                    },
                                    "type": "array"
                                  },
                                  "validator": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "amount",
                                  "validator"
                                ]
                              },
                              "dateCreated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Iota"
                                ]
                              },
                              "provider": {
                                "type": "string",
                                "enum": [
                                  "Figment"
                                ]
                              },
                              "requestBody": {
                                "allOf": [
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "duration": {
                                            "type": "number"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Babylon"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount",
                                          "duration"
                                        ],
                                        "title": "Babylon"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Ethereum"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount"
                                        ],
                                        "title": "Ethereum"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "lockedIotas": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Iota"
                                            ]
                                          },
                                          "validator": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "validator",
                                          "amount"
                                        ],
                                        "title": "Iota"
                                      }
                                    ]
                                  },
                                  {
                                    "properties": {
                                      "externalId": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "requester": {
                                "properties": {
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "userId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "userId"
                                ]
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Active",
                                  "Failed",
                                  "Staking",
                                  "Unbonding",
                                  "Unbond",
                                  "Withdrawing",
                                  "Withdrawn"
                                ]
                              },
                              "walletId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "id",
                              "walletId",
                              "status",
                              "requester",
                              "requestBody",
                              "dateCreated",
                              "protocol",
                              "data"
                            ],
                            "title": "Iota"
                          },
                          {
                            "properties": {
                              "data": {
                                "properties": {
                                  "validator": {
                                    "properties": {
                                      "pubkey": {
                                        "type": "string"
                                      },
                                      "withdrawalAddress": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "pubkey",
                                      "withdrawalAddress"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "validator"
                                ]
                              },
                              "dateCreated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Ethereum"
                                ]
                              },
                              "provider": {
                                "type": "string",
                                "enum": [
                                  "Figment"
                                ]
                              },
                              "requestBody": {
                                "allOf": [
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "duration": {
                                            "type": "number"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Babylon"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount",
                                          "duration"
                                        ],
                                        "title": "Babylon"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Ethereum"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount"
                                        ],
                                        "title": "Ethereum"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "lockedIotas": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Iota"
                                            ]
                                          },
                                          "validator": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "validator",
                                          "amount"
                                        ],
                                        "title": "Iota"
                                      }
                                    ]
                                  },
                                  {
                                    "properties": {
                                      "externalId": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              "requester": {
                                "properties": {
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "userId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "userId"
                                ]
                              },
                              "status": {
                                "type": "string",
                                "enum": [
                                  "Active",
                                  "Failed",
                                  "Staking",
                                  "Unbonding",
                                  "Unbond",
                                  "Withdrawing",
                                  "Withdrawn"
                                ]
                              },
                              "walletId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "id",
                              "walletId",
                              "status",
                              "requester",
                              "requestBody",
                              "dateCreated",
                              "protocol",
                              "data"
                            ],
                            "title": "Ethereum"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Stakes:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Staking"
        ],
        "summary": "Create Stake",
        "description": "Create a new stake.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$",
                            "description": "Transaction amount denominated in min units"
                          },
                          "duration": {
                            "type": "number"
                          },
                          "protocol": {
                            "type": "string",
                            "enum": [
                              "Babylon"
                            ]
                          },
                          "provider": {
                            "type": "string",
                            "enum": [
                              "Figment"
                            ],
                            "description": "Staking Provider"
                          },
                          "walletId": {
                            "type": "string",
                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                          }
                        },
                        "type": "object",
                        "required": [
                          "protocol",
                          "walletId",
                          "provider",
                          "amount",
                          "duration"
                        ],
                        "title": "Babylon"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$",
                            "description": "Transaction amount denominated in min units"
                          },
                          "protocol": {
                            "type": "string",
                            "enum": [
                              "Ethereum"
                            ]
                          },
                          "provider": {
                            "type": "string",
                            "enum": [
                              "Figment"
                            ],
                            "description": "Staking Provider"
                          },
                          "walletId": {
                            "type": "string",
                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                          }
                        },
                        "type": "object",
                        "required": [
                          "protocol",
                          "walletId",
                          "provider",
                          "amount"
                        ],
                        "title": "Ethereum"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$",
                            "description": "Transaction amount denominated in min units"
                          },
                          "lockedIotas": {
                            "items": {
                              "type": "string"
                            },
                            "type": "array",
                            "minItems": 1
                          },
                          "protocol": {
                            "type": "string",
                            "enum": [
                              "Iota"
                            ]
                          },
                          "validator": {
                            "type": "string"
                          },
                          "walletId": {
                            "type": "string",
                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                          }
                        },
                        "type": "object",
                        "required": [
                          "protocol",
                          "walletId",
                          "validator",
                          "amount"
                        ],
                        "title": "Iota"
                      }
                    ]
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              },
              "examples": {
                "Ethereum": {
                  "value": {
                    "externalId": "ext-123",
                    "walletId": "wa-4g991-s29to-9hrq4nbuto6ih33b",
                    "protocol": "Ethereum",
                    "provider": "Figment",
                    "amount": "32000000000000000000"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "oneOf": [
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "covenantPubkeys": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "covenantThreshold": {
                                  "type": "number"
                                },
                                "finalityProviders": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "lockHeight": {
                                  "type": "number"
                                },
                                "magicBytes": {
                                  "type": "string"
                                },
                                "minUnbondingTime": {
                                  "type": "number"
                                }
                              },
                              "type": "object",
                              "required": [
                                "finalityProviders",
                                "covenantPubkeys",
                                "magicBytes",
                                "covenantThreshold",
                                "minUnbondingTime",
                                "lockHeight"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Babylon"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Babylon"
                        },
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "amount": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Iota",
                                    "LockedIota"
                                  ]
                                },
                                "stakedObjects": {
                                  "items": {
                                    "properties": {
                                      "amount": {
                                        "type": "string"
                                      },
                                      "expirationDate": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "amount"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "validator": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "kind",
                                "amount",
                                "validator"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Iota"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Iota"
                        },
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "validator": {
                                  "properties": {
                                    "pubkey": {
                                      "type": "string"
                                    },
                                    "withdrawalAddress": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "pubkey",
                                    "withdrawalAddress"
                                  ]
                                }
                              },
                              "type": "object",
                              "required": [
                                "validator"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Ethereum"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Ethereum"
                        }
                      ]
                    },
                    {
                      "properties": {
                        "actions": {
                          "items": {
                            "properties": {
                              "dateCreated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Stake",
                                  "Unbond",
                                  "Deposit",
                                  "Withdraw"
                                ]
                              },
                              "requestBody": {
                                "anyOf": [
                                  {
                                    "allOf": [
                                      {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "duration": {
                                                "type": "number"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Babylon"
                                                ]
                                              },
                                              "provider": {
                                                "type": "string",
                                                "enum": [
                                                  "Figment"
                                                ],
                                                "description": "Staking Provider"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "provider",
                                              "amount",
                                              "duration"
                                            ],
                                            "title": "Babylon"
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Ethereum"
                                                ]
                                              },
                                              "provider": {
                                                "type": "string",
                                                "enum": [
                                                  "Figment"
                                                ],
                                                "description": "Staking Provider"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "provider",
                                              "amount"
                                            ],
                                            "title": "Ethereum"
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "lockedIotas": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array",
                                                "minItems": 1
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Iota"
                                                ]
                                              },
                                              "validator": {
                                                "type": "string"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "validator",
                                              "amount"
                                            ],
                                            "title": "Iota"
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "externalId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  {
                                    "allOf": [
                                      {
                                        "anyOf": [
                                          {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "amount": {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Withdraw"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Iota"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind",
                                                  "amount"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "amount": {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Deposit"
                                                    ]
                                                  },
                                                  "lockedIotas": {
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Iota"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind",
                                                  "amount"
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Unbond"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Babylon"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Withdraw"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Babylon"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind"
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Withdraw"
                                                ]
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Ethereum"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind"
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "externalId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "requester": {
                                "properties": {
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "userId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "userId"
                                ]
                              },
                              "signatureId": {
                                "type": "string"
                              },
                              "stakeId": {
                                "type": "string"
                              },
                              "transactionHash": {
                                "type": "string"
                              },
                              "transactionId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "id",
                              "stakeId",
                              "kind",
                              "requester",
                              "requestBody",
                              "dateCreated"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "actions"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Stakes:Create`: Always required."
        }
      }
    },
    "/staking/stakes/{stakeId}": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get Stakes",
        "description": "Retrieve the details of a specific stake.",
        "parameters": [
          {
            "name": "stakeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "oneOf": [
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "covenantPubkeys": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "covenantThreshold": {
                                  "type": "number"
                                },
                                "finalityProviders": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "lockHeight": {
                                  "type": "number"
                                },
                                "magicBytes": {
                                  "type": "string"
                                },
                                "minUnbondingTime": {
                                  "type": "number"
                                }
                              },
                              "type": "object",
                              "required": [
                                "finalityProviders",
                                "covenantPubkeys",
                                "magicBytes",
                                "covenantThreshold",
                                "minUnbondingTime",
                                "lockHeight"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Babylon"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Babylon"
                        },
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "amount": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Iota",
                                    "LockedIota"
                                  ]
                                },
                                "stakedObjects": {
                                  "items": {
                                    "properties": {
                                      "amount": {
                                        "type": "string"
                                      },
                                      "expirationDate": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "amount"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "validator": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "kind",
                                "amount",
                                "validator"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Iota"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Iota"
                        },
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "validator": {
                                  "properties": {
                                    "pubkey": {
                                      "type": "string"
                                    },
                                    "withdrawalAddress": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "pubkey",
                                    "withdrawalAddress"
                                  ]
                                }
                              },
                              "type": "object",
                              "required": [
                                "validator"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Ethereum"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Ethereum"
                        }
                      ]
                    },
                    {
                      "properties": {
                        "actions": {
                          "items": {
                            "properties": {
                              "dateCreated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Stake",
                                  "Unbond",
                                  "Deposit",
                                  "Withdraw"
                                ]
                              },
                              "requestBody": {
                                "anyOf": [
                                  {
                                    "allOf": [
                                      {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "duration": {
                                                "type": "number"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Babylon"
                                                ]
                                              },
                                              "provider": {
                                                "type": "string",
                                                "enum": [
                                                  "Figment"
                                                ],
                                                "description": "Staking Provider"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "provider",
                                              "amount",
                                              "duration"
                                            ],
                                            "title": "Babylon"
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Ethereum"
                                                ]
                                              },
                                              "provider": {
                                                "type": "string",
                                                "enum": [
                                                  "Figment"
                                                ],
                                                "description": "Staking Provider"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "provider",
                                              "amount"
                                            ],
                                            "title": "Ethereum"
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "lockedIotas": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array",
                                                "minItems": 1
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Iota"
                                                ]
                                              },
                                              "validator": {
                                                "type": "string"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "validator",
                                              "amount"
                                            ],
                                            "title": "Iota"
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "externalId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  {
                                    "allOf": [
                                      {
                                        "anyOf": [
                                          {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "amount": {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Withdraw"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Iota"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind",
                                                  "amount"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "amount": {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Deposit"
                                                    ]
                                                  },
                                                  "lockedIotas": {
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Iota"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind",
                                                  "amount"
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Unbond"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Babylon"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Withdraw"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Babylon"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind"
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Withdraw"
                                                ]
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Ethereum"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind"
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "externalId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "requester": {
                                "properties": {
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "userId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "userId"
                                ]
                              },
                              "signatureId": {
                                "type": "string"
                              },
                              "stakeId": {
                                "type": "string"
                              },
                              "transactionHash": {
                                "type": "string"
                              },
                              "transactionId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "id",
                              "stakeId",
                              "kind",
                              "requester",
                              "requestBody",
                              "dateCreated"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "actions"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Stakes:Read`: Always required."
        }
      }
    },
    "/staking/stakes/{stakeId}/actions": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "List Stake Actions",
        "description": "Retrieve the list of actions for a specific stake.",
        "parameters": [
          {
            "name": "stakeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "dateCreated": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Stake",
                              "Unbond",
                              "Deposit",
                              "Withdraw"
                            ]
                          },
                          "requestBody": {
                            "anyOf": [
                              {
                                "allOf": [
                                  {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "duration": {
                                            "type": "number"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Babylon"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount",
                                          "duration"
                                        ],
                                        "title": "Babylon"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Ethereum"
                                            ]
                                          },
                                          "provider": {
                                            "type": "string",
                                            "enum": [
                                              "Figment"
                                            ],
                                            "description": "Staking Provider"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "provider",
                                          "amount"
                                        ],
                                        "title": "Ethereum"
                                      },
                                      {
                                        "properties": {
                                          "amount": {
                                            "type": "string",
                                            "pattern": "^\\d+$",
                                            "description": "Transaction amount denominated in min units"
                                          },
                                          "lockedIotas": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Iota"
                                            ]
                                          },
                                          "validator": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string",
                                            "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "walletId",
                                          "validator",
                                          "amount"
                                        ],
                                        "title": "Iota"
                                      }
                                    ]
                                  },
                                  {
                                    "properties": {
                                      "externalId": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              },
                              {
                                "allOf": [
                                  {
                                    "anyOf": [
                                      {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Withdraw"
                                                ]
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Iota"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind",
                                              "amount"
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Deposit"
                                                ]
                                              },
                                              "lockedIotas": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Iota"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind",
                                              "amount"
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Unbond"
                                                ]
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Babylon"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind"
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Withdraw"
                                                ]
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Babylon"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind"
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Withdraw"
                                            ]
                                          },
                                          "protocol": {
                                            "type": "string",
                                            "enum": [
                                              "Ethereum"
                                            ]
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "protocol",
                                          "kind"
                                        ]
                                      }
                                    ]
                                  },
                                  {
                                    "properties": {
                                      "externalId": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object"
                                  }
                                ]
                              }
                            ]
                          },
                          "requester": {
                            "properties": {
                              "tokenId": {
                                "type": "string"
                              },
                              "userId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "userId"
                            ]
                          },
                          "signatureId": {
                            "type": "string"
                          },
                          "stakeId": {
                            "type": "string"
                          },
                          "transactionHash": {
                            "type": "string"
                          },
                          "transactionId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "stakeId",
                          "kind",
                          "requester",
                          "requestBody",
                          "dateCreated"
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Stakes:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Staking"
        ],
        "summary": "Create Stake Action",
        "description": "Create a new action for an existing stake.",
        "parameters": [
          {
            "name": "stakeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "anyOf": [
                      {
                        "oneOf": [
                          {
                            "properties": {
                              "amount": {
                                "type": "string",
                                "pattern": "^\\d+$"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Withdraw"
                                ]
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Iota"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "protocol",
                              "kind",
                              "amount"
                            ]
                          },
                          {
                            "properties": {
                              "amount": {
                                "type": "string",
                                "pattern": "^\\d+$"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Deposit"
                                ]
                              },
                              "lockedIotas": {
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Iota"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "protocol",
                              "kind",
                              "amount"
                            ]
                          }
                        ]
                      },
                      {
                        "oneOf": [
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Unbond"
                                ]
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Babylon"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "protocol",
                              "kind"
                            ]
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Withdraw"
                                ]
                              },
                              "protocol": {
                                "type": "string",
                                "enum": [
                                  "Babylon"
                                ]
                              }
                            },
                            "type": "object",
                            "required": [
                              "protocol",
                              "kind"
                            ]
                          }
                        ]
                      },
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Withdraw"
                            ]
                          },
                          "protocol": {
                            "type": "string",
                            "enum": [
                              "Ethereum"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "protocol",
                          "kind"
                        ]
                      }
                    ]
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "oneOf": [
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "covenantPubkeys": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "covenantThreshold": {
                                  "type": "number"
                                },
                                "finalityProviders": {
                                  "items": {
                                    "type": "string"
                                  },
                                  "type": "array"
                                },
                                "lockHeight": {
                                  "type": "number"
                                },
                                "magicBytes": {
                                  "type": "string"
                                },
                                "minUnbondingTime": {
                                  "type": "number"
                                }
                              },
                              "type": "object",
                              "required": [
                                "finalityProviders",
                                "covenantPubkeys",
                                "magicBytes",
                                "covenantThreshold",
                                "minUnbondingTime",
                                "lockHeight"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Babylon"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Babylon"
                        },
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "amount": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Iota",
                                    "LockedIota"
                                  ]
                                },
                                "stakedObjects": {
                                  "items": {
                                    "properties": {
                                      "amount": {
                                        "type": "string"
                                      },
                                      "expirationDate": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "amount"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "validator": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "kind",
                                "amount",
                                "validator"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Iota"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Iota"
                        },
                        {
                          "properties": {
                            "data": {
                              "properties": {
                                "validator": {
                                  "properties": {
                                    "pubkey": {
                                      "type": "string"
                                    },
                                    "withdrawalAddress": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "pubkey",
                                    "withdrawalAddress"
                                  ]
                                }
                              },
                              "type": "object",
                              "required": [
                                "validator"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "protocol": {
                              "type": "string",
                              "enum": [
                                "Ethereum"
                              ]
                            },
                            "provider": {
                              "type": "string",
                              "enum": [
                                "Figment"
                              ]
                            },
                            "requestBody": {
                              "allOf": [
                                {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "duration": {
                                          "type": "number"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Babylon"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount",
                                        "duration"
                                      ],
                                      "title": "Babylon"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Ethereum"
                                          ]
                                        },
                                        "provider": {
                                          "type": "string",
                                          "enum": [
                                            "Figment"
                                          ],
                                          "description": "Staking Provider"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "provider",
                                        "amount"
                                      ],
                                      "title": "Ethereum"
                                    },
                                    {
                                      "properties": {
                                        "amount": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "Transaction amount denominated in min units"
                                        },
                                        "lockedIotas": {
                                          "items": {
                                            "type": "string"
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "enum": [
                                            "Iota"
                                          ]
                                        },
                                        "validator": {
                                          "type": "string"
                                        },
                                        "walletId": {
                                          "type": "string",
                                          "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "protocol",
                                        "walletId",
                                        "validator",
                                        "amount"
                                      ],
                                      "title": "Iota"
                                    }
                                  ]
                                },
                                {
                                  "properties": {
                                    "externalId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object"
                                }
                              ]
                            },
                            "requester": {
                              "properties": {
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Failed",
                                "Staking",
                                "Unbonding",
                                "Unbond",
                                "Withdrawing",
                                "Withdrawn"
                              ]
                            },
                            "walletId": {
                              "type": "string"
                            }
                          },
                          "type": "object",
                          "required": [
                            "id",
                            "walletId",
                            "status",
                            "requester",
                            "requestBody",
                            "dateCreated",
                            "protocol",
                            "data"
                          ],
                          "title": "Ethereum"
                        }
                      ]
                    },
                    {
                      "properties": {
                        "actions": {
                          "items": {
                            "properties": {
                              "dateCreated": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Stake",
                                  "Unbond",
                                  "Deposit",
                                  "Withdraw"
                                ]
                              },
                              "requestBody": {
                                "anyOf": [
                                  {
                                    "allOf": [
                                      {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "duration": {
                                                "type": "number"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Babylon"
                                                ]
                                              },
                                              "provider": {
                                                "type": "string",
                                                "enum": [
                                                  "Figment"
                                                ],
                                                "description": "Staking Provider"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "provider",
                                              "amount",
                                              "duration"
                                            ],
                                            "title": "Babylon"
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Ethereum"
                                                ]
                                              },
                                              "provider": {
                                                "type": "string",
                                                "enum": [
                                                  "Figment"
                                                ],
                                                "description": "Staking Provider"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "provider",
                                              "amount"
                                            ],
                                            "title": "Ethereum"
                                          },
                                          {
                                            "properties": {
                                              "amount": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "Transaction amount denominated in min units"
                                              },
                                              "lockedIotas": {
                                                "items": {
                                                  "type": "string"
                                                },
                                                "type": "array",
                                                "minItems": 1
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Iota"
                                                ]
                                              },
                                              "validator": {
                                                "type": "string"
                                              },
                                              "walletId": {
                                                "type": "string",
                                                "description": "Id of the Dfns wallet making the deposit (`wa-...`)."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "walletId",
                                              "validator",
                                              "amount"
                                            ],
                                            "title": "Iota"
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "externalId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  },
                                  {
                                    "allOf": [
                                      {
                                        "anyOf": [
                                          {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "amount": {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Withdraw"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Iota"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind",
                                                  "amount"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "amount": {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Deposit"
                                                    ]
                                                  },
                                                  "lockedIotas": {
                                                    "items": {
                                                      "type": "string"
                                                    },
                                                    "type": "array"
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Iota"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind",
                                                  "amount"
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Unbond"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Babylon"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Withdraw"
                                                    ]
                                                  },
                                                  "protocol": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Babylon"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "protocol",
                                                  "kind"
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Withdraw"
                                                ]
                                              },
                                              "protocol": {
                                                "type": "string",
                                                "enum": [
                                                  "Ethereum"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "protocol",
                                              "kind"
                                            ]
                                          }
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "externalId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "requester": {
                                "properties": {
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "userId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "userId"
                                ]
                              },
                              "signatureId": {
                                "type": "string"
                              },
                              "stakeId": {
                                "type": "string"
                              },
                              "transactionHash": {
                                "type": "string"
                              },
                              "transactionId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "id",
                              "stakeId",
                              "kind",
                              "requester",
                              "requestBody",
                              "dateCreated"
                            ]
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "actions"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Stakes:Update`: Always required."
        }
      }
    },
    "/staking/stakes/{stakeId}/rewards": {
      "get": {
        "tags": [
          "Staking"
        ],
        "summary": "Get Stake Rewards",
        "description": "Retrieves the rewards linked to a specific stake.",
        "parameters": [
          {
            "name": "stakeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "balance": {
                      "type": "string"
                    },
                    "symbol": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "symbol",
                    "balance"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Stakes:Read`: Always required."
        }
      }
    },
    "/swaps": {
      "get": {
        "tags": [
          "Swaps"
        ],
        "summary": "List Swaps",
        "description": "List all swaps with pagination",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Swap",
                        "summary": null,
                        "description": null
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Swaps:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Swaps"
        ],
        "summary": "Create Swap",
        "description": "Create a new swap based on an existing quote. This is the second step of the [Swap flow](https://docs.dfns.co/api-reference/swaps#flow-overview).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "UniswapX",
                      "UniswapClassic"
                    ],
                    "description": "Provided for this swap. Used for attesting that the swap is being created with the same parameters as the quote."
                  },
                  "quoteId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "swapQuote-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Quote to use for this swap.",
                    "example": "swapQuote-7n9p0-cth75-6l74n2sj7u73ooeq"
                  },
                  "reference": {
                    "type": "string",
                    "description": "An optional reference for this Swap."
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you are willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%. Used for attesting that the swap is being created with the same parameters as the quote. "
                  },
                  "sourceAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "amount"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The source asset that will be spent on the Swap transaction. Used for attesting that the swap is being created with the same parameters as the quote."
                  },
                  "targetAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "amount"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The target asset that will be received with the Swap transaction. Used for attesting that the swap is being created with the same parameters as the quote."
                  },
                  "targetWalletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet receiving the target asset. Currently this value must be the same as the `walletId`. Used for attesting that the swap is being created with the same parameters as the quote.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  },
                  "walletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet spending the sourceAsset. Used for attesting that the swap is being created with the same parameters as the quote.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  }
                },
                "type": "object",
                "required": [
                  "quoteId",
                  "provider",
                  "walletId",
                  "slippageBps",
                  "sourceAsset",
                  "targetAsset"
                ]
              },
              "examples": {
                "confirmingAnExistingQuote": {
                  "value": {
                    "quoteId": "swapQuote-3hgv4-q8tbf-8v2ajmrbmg6m4i9t",
                    "reference": "optional reference for record keeping",
                    "provider": "UniswapClassic",
                    "walletId": "wa-123456-12345678",
                    "targetWalletId": "wa-123456-87654321",
                    "slippageBps": 50,
                    "sourceAsset": {
                      "kind": "Native",
                      "amount": "1000000000000000000"
                    },
                    "targetAsset": {
                      "kind": "Erc20",
                      "contract": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                      "amount": "5600000"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Swap",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Swaps:Create`: Always required."
        }
      }
    },
    "/swaps/quotes": {
      "post": {
        "tags": [
          "Swaps"
        ],
        "summary": "Request Swap Quote",
        "description": "Request a quote from a given provider for swapping assets. This is the first step of the [Swap flow](https://docs.dfns.co/api-reference/swaps#flow-overview).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "UniswapX",
                      "UniswapClassic"
                    ],
                    "description": "Swap provider."
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
                  },
                  "sourceAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "amount"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The source asset that will be spent on the Swap transaction, following the same stucture as the [transfer API](https://docs.dfns.co/api-reference/wallets/transfer-asset)."
                  },
                  "targetAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The target asset that will be received with the Swap transaction, follows the same structure as sourceAsset, but doesn't include the amount."
                  },
                  "targetWalletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet receiving the target asset. Currently this value must be the same as the `walletId`.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  },
                  "walletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet spending the sourceAsset.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  }
                },
                "type": "object",
                "required": [
                  "provider",
                  "walletId",
                  "sourceAsset",
                  "targetAsset",
                  "slippageBps"
                ]
              },
              "examples": {
                "UniswapClassic": {
                  "value": {
                    "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
                    "targetWalletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
                    "provider": "UniswapClassic",
                    "sourceAsset": {
                      "kind": "Native",
                      "amount": "1000000000000000000"
                    },
                    "targetAsset": {
                      "kind": "Erc20",
                      "contract": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
                    },
                    "slippageBps": 50
                  }
                },
                "UniswapX": {
                  "value": {
                    "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
                    "targetWalletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
                    "provider": "UniswapX",
                    "sourceAsset": {
                      "kind": "Erc20",
                      "contract": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
                      "amount": "1000000000000000000"
                    },
                    "targetAsset": {
                      "kind": "Native",
                      "amount": "1000000000000000000"
                    },
                    "slippageBps": 50
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapQuote",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/swaps/quotes/{quoteId}": {
      "get": {
        "tags": [
          "Swaps"
        ],
        "summary": "Get Swap Quote",
        "description": "Get details of a specific swap quote by its ID",
        "parameters": [
          {
            "name": "quoteId",
            "in": "path",
            "description": "The ID of the Swap Quote.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "description": "The ID of the Swap Quote."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapQuote",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\nNo permission required."
        }
      }
    },
    "/swaps/{swapId}": {
      "get": {
        "tags": [
          "Swaps"
        ],
        "summary": "Get Swap",
        "description": "Get details of a specific swap by its ID",
        "parameters": [
          {
            "name": "swapId",
            "in": "path",
            "description": "Id of the swap for which we want to get details.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "description": "Id of the swap for which we want to get details."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Swap",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Swaps:Read`: Always required."
        }
      }
    },
    "/v2/policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "List Policies",
        "description": "Retrieve the list of policies on your organization.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Active",
                "Archived"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "allOf": [
                          {
                            "oneOf": [
                              {
                                "properties": {
                                  "action": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "approvalGroups": {
                                            "items": {
                                              "properties": {
                                                "approvers": {
                                                  "properties": {
                                                    "userId": {
                                                      "properties": {
                                                        "in": {
                                                          "items": {
                                                            "type": "string",
                                                            "minLength": 1
                                                          },
                                                          "type": "array",
                                                          "maxItems": 100,
                                                          "minItems": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "in"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object"
                                                },
                                                "initiatorCanApprove": {
                                                  "type": "boolean",
                                                  "description": "Whether the initiator of the activity can participate in the approval."
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "quorum": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "quorum",
                                                "approvers"
                                              ]
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "autoRejectTimeout": {
                                            "type": "integer",
                                            "minimum": 1
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "RequestApproval"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "approvalGroups"
                                        ],
                                        "title": "RequestApproval",
                                        "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                      },
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Block"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "Block",
                                        "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                      }
                                    ]
                                  },
                                  "activityKind": {
                                    "type": "string",
                                    "enum": [
                                      "Alias:Modify"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string"
                                  },
                                  "dateUpdated": {
                                    "type": "string"
                                  },
                                  "filters": {
                                    "type": "object"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "rule": {
                                    "properties": {
                                      "configuration": {
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "AlwaysTrigger"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "kind"
                                    ],
                                    "title": "AlwaysTrigger",
                                    "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Active",
                                      "Archived"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "name",
                                  "status",
                                  "activityKind",
                                  "rule",
                                  "action"
                                ],
                                "title": "Alias:Modify"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "approvalGroups": {
                                            "items": {
                                              "properties": {
                                                "approvers": {
                                                  "properties": {
                                                    "userId": {
                                                      "properties": {
                                                        "in": {
                                                          "items": {
                                                            "type": "string",
                                                            "minLength": 1
                                                          },
                                                          "type": "array",
                                                          "maxItems": 100,
                                                          "minItems": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "in"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object"
                                                },
                                                "initiatorCanApprove": {
                                                  "type": "boolean",
                                                  "description": "Whether the initiator of the activity can participate in the approval."
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "quorum": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "quorum",
                                                "approvers"
                                              ]
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "autoRejectTimeout": {
                                            "type": "integer",
                                            "minimum": 1
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "RequestApproval"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "approvalGroups"
                                        ],
                                        "title": "RequestApproval",
                                        "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                      },
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Block"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "Block",
                                        "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                      }
                                    ]
                                  },
                                  "activityKind": {
                                    "type": "string",
                                    "enum": [
                                      "Permissions:Assign"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string"
                                  },
                                  "dateUpdated": {
                                    "type": "string"
                                  },
                                  "filters": {
                                    "properties": {
                                      "permissionId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "permissionId"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "rule": {
                                    "properties": {
                                      "configuration": {
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "AlwaysTrigger"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "kind"
                                    ],
                                    "title": "AlwaysTrigger",
                                    "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Active",
                                      "Archived"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "name",
                                  "status",
                                  "activityKind",
                                  "rule",
                                  "action"
                                ],
                                "title": "Permissions:Assign"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "approvalGroups": {
                                            "items": {
                                              "properties": {
                                                "approvers": {
                                                  "properties": {
                                                    "userId": {
                                                      "properties": {
                                                        "in": {
                                                          "items": {
                                                            "type": "string",
                                                            "minLength": 1
                                                          },
                                                          "type": "array",
                                                          "maxItems": 100,
                                                          "minItems": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "in"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object"
                                                },
                                                "initiatorCanApprove": {
                                                  "type": "boolean",
                                                  "description": "Whether the initiator of the activity can participate in the approval."
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "quorum": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "quorum",
                                                "approvers"
                                              ]
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "autoRejectTimeout": {
                                            "type": "integer",
                                            "minimum": 1
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "RequestApproval"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "approvalGroups"
                                        ],
                                        "title": "RequestApproval",
                                        "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                      },
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Block"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "Block",
                                        "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                      }
                                    ]
                                  },
                                  "activityKind": {
                                    "type": "string",
                                    "enum": [
                                      "Permissions:Modify"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string"
                                  },
                                  "dateUpdated": {
                                    "type": "string"
                                  },
                                  "filters": {
                                    "properties": {
                                      "permissionId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "permissionId"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "rule": {
                                    "properties": {
                                      "configuration": {
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "AlwaysTrigger"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "kind"
                                    ],
                                    "title": "AlwaysTrigger",
                                    "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Active",
                                      "Archived"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "name",
                                  "status",
                                  "activityKind",
                                  "rule",
                                  "action"
                                ],
                                "title": "Permissions:Modify"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "properties": {
                                      "approvalGroups": {
                                        "items": {
                                          "properties": {
                                            "approvers": {
                                              "properties": {
                                                "userId": {
                                                  "properties": {
                                                    "in": {
                                                      "items": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "type": "array",
                                                      "maxItems": 100,
                                                      "minItems": 1
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "in"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "initiatorCanApprove": {
                                              "type": "boolean",
                                              "description": "Whether the initiator of the activity can participate in the approval."
                                            },
                                            "name": {
                                              "type": "string"
                                            },
                                            "quorum": {
                                              "type": "integer",
                                              "minimum": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "quorum",
                                            "approvers"
                                          ]
                                        },
                                        "type": "array",
                                        "minItems": 1
                                      },
                                      "autoRejectTimeout": {
                                        "type": "integer",
                                        "minimum": 1
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "RequestApproval"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "kind",
                                      "approvalGroups"
                                    ],
                                    "title": "RequestApproval",
                                    "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                  },
                                  "activityKind": {
                                    "type": "string",
                                    "enum": [
                                      "Policies:Modify"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string"
                                  },
                                  "dateUpdated": {
                                    "type": "string"
                                  },
                                  "filters": {
                                    "properties": {
                                      "policyId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "policyId"
                                    ]
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "rule": {
                                    "properties": {
                                      "configuration": {
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "AlwaysTrigger"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "kind"
                                    ],
                                    "title": "AlwaysTrigger",
                                    "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Active",
                                      "Archived"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "name",
                                  "status",
                                  "activityKind",
                                  "rule",
                                  "action"
                                ],
                                "title": "Policies:Modify"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "approvalGroups": {
                                            "items": {
                                              "properties": {
                                                "approvers": {
                                                  "properties": {
                                                    "userId": {
                                                      "properties": {
                                                        "in": {
                                                          "items": {
                                                            "type": "string",
                                                            "minLength": 1
                                                          },
                                                          "type": "array",
                                                          "maxItems": 100,
                                                          "minItems": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "in"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object"
                                                },
                                                "initiatorCanApprove": {
                                                  "type": "boolean",
                                                  "description": "Whether the initiator of the activity can participate in the approval."
                                                },
                                                "name": {
                                                  "type": "string"
                                                },
                                                "quorum": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "quorum",
                                                "approvers"
                                              ]
                                            },
                                            "type": "array",
                                            "minItems": 1
                                          },
                                          "autoRejectTimeout": {
                                            "type": "integer",
                                            "minimum": 1
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "RequestApproval"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "approvalGroups"
                                        ],
                                        "title": "RequestApproval",
                                        "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                      },
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Block"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "Block",
                                        "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                      },
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "NoAction"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "NoAction",
                                        "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                      }
                                    ]
                                  },
                                  "activityKind": {
                                    "type": "string",
                                    "enum": [
                                      "Wallets:Sign"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string"
                                  },
                                  "dateUpdated": {
                                    "type": "string"
                                  },
                                  "filters": {
                                    "properties": {
                                      "walletId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      },
                                      "walletTags": {
                                        "properties": {
                                          "hasAll": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          },
                                          "hasAny": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "rule": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "configuration": {
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "AlwaysTrigger"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "AlwaysTrigger",
                                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                      },
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "addresses": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "description": "Whitelisted recipient addresses"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "addresses"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "TransactionRecipientWhitelist"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ],
                                        "title": "TransactionRecipientWhitelist",
                                        "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                      },
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "currency": {
                                                "type": "string",
                                                "enum": [
                                                  "USD"
                                                ],
                                                "description": "Fiat currency, currently only `USD`"
                                              },
                                              "limit": {
                                                "type": "number",
                                                "description": "Amount limit in `currency`"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "limit",
                                              "currency"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "TransactionAmountLimit"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ],
                                        "title": "TransactionAmountLimit",
                                        "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                      },
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "currency": {
                                                "type": "string",
                                                "enum": [
                                                  "USD"
                                                ],
                                                "description": "Currency for the amount limit above"
                                              },
                                              "limit": {
                                                "type": "number",
                                                "description": "Amount limit in `currency`"
                                              },
                                              "timeframe": {
                                                "type": "integer",
                                                "maximum": 43200,
                                                "minimum": 1,
                                                "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "limit",
                                              "currency",
                                              "timeframe"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "TransactionAmountVelocity"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ],
                                        "title": "TransactionAmountVelocity",
                                        "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                      },
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "limit": {
                                                "type": "number",
                                                "description": "Count limit"
                                              },
                                              "timeframe": {
                                                "type": "integer",
                                                "maximum": 43200,
                                                "minimum": 1,
                                                "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "limit",
                                              "timeframe"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "TransactionCountVelocity"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ],
                                        "title": "TransactionCountVelocity",
                                        "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                      },
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "addresses": {
                                                "properties": {
                                                  "categoryIds": {
                                                    "items": {
                                                      "type": "integer",
                                                      "exclusiveMinimum": 0
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "categoryIds"
                                                ]
                                              },
                                              "alerts": {
                                                "properties": {
                                                  "alertLevel": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "SEVERE"
                                                    ]
                                                  },
                                                  "categoryIds": {
                                                    "items": {
                                                      "type": "integer",
                                                      "exclusiveMinimum": 0
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "alertLevel",
                                                  "categoryIds"
                                                ]
                                              },
                                              "exposures": {
                                                "properties": {
                                                  "direct": {
                                                    "properties": {
                                                      "categoryIds": {
                                                        "items": {
                                                          "type": "integer",
                                                          "exclusiveMinimum": 0
                                                        },
                                                        "type": "array"
                                                      }
                                                    },
                                                    "type": "object",
                                                    "required": [
                                                      "categoryIds"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "direct"
                                                ]
                                              },
                                              "fallbackBehaviours": {
                                                "properties": {
                                                  "skipChainalysisFailure": {
                                                    "type": "boolean"
                                                  },
                                                  "skipUnscreenableTransaction": {
                                                    "type": "boolean"
                                                  },
                                                  "skipUnsupportedAsset": {
                                                    "type": "boolean"
                                                  },
                                                  "skipUnsupportedNetwork": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "skipUnscreenableTransaction",
                                                  "skipUnsupportedNetwork",
                                                  "skipUnsupportedAsset",
                                                  "skipChainalysisFailure"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "alerts",
                                              "exposures",
                                              "addresses",
                                              "fallbackBehaviours"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "ChainalysisTransactionPrescreening"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "autoClearAfterDeliveredTimeoutSeconds": {
                                                "type": "integer",
                                                "minimum": 0
                                              },
                                              "autoTriggerTimeoutSeconds": {
                                                "type": "integer",
                                                "minimum": 0
                                              },
                                              "vendor": {
                                                "type": "string",
                                                "enum": [
                                                  "Notabene"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "vendor",
                                              "autoTriggerTimeoutSeconds"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "TravelRuleTransactionPrescreening"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ],
                                        "title": "TravelRuleTransactionPrescreening",
                                        "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                      }
                                    ]
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Active",
                                      "Archived"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "name",
                                  "status",
                                  "activityKind",
                                  "rule",
                                  "action"
                                ],
                                "title": "Wallets:Sign"
                              },
                              {
                                "properties": {
                                  "action": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "NoAction"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind"
                                        ],
                                        "title": "NoAction",
                                        "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                      }
                                    ]
                                  },
                                  "activityKind": {
                                    "type": "string",
                                    "enum": [
                                      "Wallets:IncomingTransaction"
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string"
                                  },
                                  "dateUpdated": {
                                    "type": "string"
                                  },
                                  "filters": {
                                    "properties": {
                                      "walletId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      },
                                      "walletTags": {
                                        "properties": {
                                          "hasAll": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          },
                                          "hasAny": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "rule": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "alerts": {
                                                "properties": {
                                                  "alertLevel": {
                                                    "type": "string",
                                                    "enum": [
                                                      "LOW",
                                                      "MEDIUM",
                                                      "HIGH",
                                                      "SEVERE"
                                                    ]
                                                  },
                                                  "categoryIds": {
                                                    "items": {
                                                      "type": "integer",
                                                      "exclusiveMinimum": 0
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "alertLevel",
                                                  "categoryIds"
                                                ]
                                              },
                                              "exposures": {
                                                "properties": {
                                                  "direct": {
                                                    "properties": {
                                                      "categoryIds": {
                                                        "items": {
                                                          "type": "integer",
                                                          "exclusiveMinimum": 0
                                                        },
                                                        "type": "array"
                                                      }
                                                    },
                                                    "type": "object",
                                                    "required": [
                                                      "categoryIds"
                                                    ]
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "direct"
                                                ]
                                              },
                                              "fallbackBehaviours": {
                                                "properties": {
                                                  "skipChainalysisFailure": {
                                                    "type": "boolean"
                                                  },
                                                  "skipUnscreenableTransaction": {
                                                    "type": "boolean"
                                                  },
                                                  "skipUnsupportedAsset": {
                                                    "type": "boolean"
                                                  },
                                                  "skipUnsupportedNetwork": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "skipUnscreenableTransaction",
                                                  "skipUnsupportedNetwork",
                                                  "skipUnsupportedAsset",
                                                  "skipChainalysisFailure"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "alerts",
                                              "exposures",
                                              "fallbackBehaviours"
                                            ]
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "ChainalysisTransactionScreening"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "kind",
                                          "configuration"
                                        ],
                                        "title": "ChainalysisTransactionPrescreening",
                                        "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                      }
                                    ]
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Active",
                                      "Archived"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "name",
                                  "status",
                                  "activityKind",
                                  "rule",
                                  "action"
                                ],
                                "title": "Wallets:IncomingTransaction"
                              }
                            ]
                          },
                          {
                            "properties": {
                              "pendingChangeRequest": {
                                "properties": {
                                  "approvalId": {
                                    "type": "string"
                                  },
                                  "body": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "action": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "approvalGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "approvers": {
                                                          "properties": {
                                                            "userId": {
                                                              "properties": {
                                                                "in": {
                                                                  "items": {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  "type": "array",
                                                                  "maxItems": 100,
                                                                  "minItems": 1
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object",
                                                              "required": [
                                                                "in"
                                                              ]
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object"
                                                        },
                                                        "initiatorCanApprove": {
                                                          "type": "boolean",
                                                          "description": "Whether the initiator of the activity can participate in the approval."
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "quorum": {
                                                          "type": "integer",
                                                          "minimum": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "quorum",
                                                        "approvers"
                                                      ]
                                                    },
                                                    "type": "array",
                                                    "minItems": 1
                                                  },
                                                  "autoRejectTimeout": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "RequestApproval"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "approvalGroups"
                                                ],
                                                "title": "RequestApproval",
                                                "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Block"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "Block",
                                                "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                              }
                                            ]
                                          },
                                          "activityKind": {
                                            "type": "string",
                                            "enum": [
                                              "Alias:Modify"
                                            ]
                                          },
                                          "dateCreated": {
                                            "type": "string"
                                          },
                                          "dateUpdated": {
                                            "type": "string"
                                          },
                                          "filters": {
                                            "type": "object"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rule": {
                                            "properties": {
                                              "configuration": {
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "AlwaysTrigger"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "AlwaysTrigger",
                                            "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active",
                                              "Archived"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "activityKind",
                                          "rule",
                                          "action"
                                        ],
                                        "title": "Alias:Modify"
                                      },
                                      {
                                        "properties": {
                                          "action": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "approvalGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "approvers": {
                                                          "properties": {
                                                            "userId": {
                                                              "properties": {
                                                                "in": {
                                                                  "items": {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  "type": "array",
                                                                  "maxItems": 100,
                                                                  "minItems": 1
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object",
                                                              "required": [
                                                                "in"
                                                              ]
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object"
                                                        },
                                                        "initiatorCanApprove": {
                                                          "type": "boolean",
                                                          "description": "Whether the initiator of the activity can participate in the approval."
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "quorum": {
                                                          "type": "integer",
                                                          "minimum": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "quorum",
                                                        "approvers"
                                                      ]
                                                    },
                                                    "type": "array",
                                                    "minItems": 1
                                                  },
                                                  "autoRejectTimeout": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "RequestApproval"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "approvalGroups"
                                                ],
                                                "title": "RequestApproval",
                                                "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Block"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "Block",
                                                "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                              }
                                            ]
                                          },
                                          "activityKind": {
                                            "type": "string",
                                            "enum": [
                                              "Permissions:Assign"
                                            ]
                                          },
                                          "dateCreated": {
                                            "type": "string"
                                          },
                                          "dateUpdated": {
                                            "type": "string"
                                          },
                                          "filters": {
                                            "properties": {
                                              "permissionId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "permissionId"
                                            ]
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rule": {
                                            "properties": {
                                              "configuration": {
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "AlwaysTrigger"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "AlwaysTrigger",
                                            "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active",
                                              "Archived"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "activityKind",
                                          "rule",
                                          "action"
                                        ],
                                        "title": "Permissions:Assign"
                                      },
                                      {
                                        "properties": {
                                          "action": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "approvalGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "approvers": {
                                                          "properties": {
                                                            "userId": {
                                                              "properties": {
                                                                "in": {
                                                                  "items": {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  "type": "array",
                                                                  "maxItems": 100,
                                                                  "minItems": 1
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object",
                                                              "required": [
                                                                "in"
                                                              ]
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object"
                                                        },
                                                        "initiatorCanApprove": {
                                                          "type": "boolean",
                                                          "description": "Whether the initiator of the activity can participate in the approval."
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "quorum": {
                                                          "type": "integer",
                                                          "minimum": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "quorum",
                                                        "approvers"
                                                      ]
                                                    },
                                                    "type": "array",
                                                    "minItems": 1
                                                  },
                                                  "autoRejectTimeout": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "RequestApproval"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "approvalGroups"
                                                ],
                                                "title": "RequestApproval",
                                                "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Block"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "Block",
                                                "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                              }
                                            ]
                                          },
                                          "activityKind": {
                                            "type": "string",
                                            "enum": [
                                              "Permissions:Modify"
                                            ]
                                          },
                                          "dateCreated": {
                                            "type": "string"
                                          },
                                          "dateUpdated": {
                                            "type": "string"
                                          },
                                          "filters": {
                                            "properties": {
                                              "permissionId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "permissionId"
                                            ]
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rule": {
                                            "properties": {
                                              "configuration": {
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "AlwaysTrigger"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "AlwaysTrigger",
                                            "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active",
                                              "Archived"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "activityKind",
                                          "rule",
                                          "action"
                                        ],
                                        "title": "Permissions:Modify"
                                      },
                                      {
                                        "properties": {
                                          "action": {
                                            "properties": {
                                              "approvalGroups": {
                                                "items": {
                                                  "properties": {
                                                    "approvers": {
                                                      "properties": {
                                                        "userId": {
                                                          "properties": {
                                                            "in": {
                                                              "items": {
                                                                "type": "string",
                                                                "minLength": 1
                                                              },
                                                              "type": "array",
                                                              "maxItems": 100,
                                                              "minItems": 1
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object",
                                                          "required": [
                                                            "in"
                                                          ]
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object"
                                                    },
                                                    "initiatorCanApprove": {
                                                      "type": "boolean",
                                                      "description": "Whether the initiator of the activity can participate in the approval."
                                                    },
                                                    "name": {
                                                      "type": "string"
                                                    },
                                                    "quorum": {
                                                      "type": "integer",
                                                      "minimum": 1
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "quorum",
                                                    "approvers"
                                                  ]
                                                },
                                                "type": "array",
                                                "minItems": 1
                                              },
                                              "autoRejectTimeout": {
                                                "type": "integer",
                                                "minimum": 1
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "RequestApproval"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "approvalGroups"
                                            ],
                                            "title": "RequestApproval",
                                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                          },
                                          "activityKind": {
                                            "type": "string",
                                            "enum": [
                                              "Policies:Modify"
                                            ]
                                          },
                                          "dateCreated": {
                                            "type": "string"
                                          },
                                          "dateUpdated": {
                                            "type": "string"
                                          },
                                          "filters": {
                                            "properties": {
                                              "policyId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "policyId"
                                            ]
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rule": {
                                            "properties": {
                                              "configuration": {
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "AlwaysTrigger"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "AlwaysTrigger",
                                            "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active",
                                              "Archived"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "activityKind",
                                          "rule",
                                          "action"
                                        ],
                                        "title": "Policies:Modify"
                                      },
                                      {
                                        "properties": {
                                          "action": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "approvalGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "approvers": {
                                                          "properties": {
                                                            "userId": {
                                                              "properties": {
                                                                "in": {
                                                                  "items": {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  "type": "array",
                                                                  "maxItems": 100,
                                                                  "minItems": 1
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object",
                                                              "required": [
                                                                "in"
                                                              ]
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object"
                                                        },
                                                        "initiatorCanApprove": {
                                                          "type": "boolean",
                                                          "description": "Whether the initiator of the activity can participate in the approval."
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "quorum": {
                                                          "type": "integer",
                                                          "minimum": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "quorum",
                                                        "approvers"
                                                      ]
                                                    },
                                                    "type": "array",
                                                    "minItems": 1
                                                  },
                                                  "autoRejectTimeout": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "RequestApproval"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "approvalGroups"
                                                ],
                                                "title": "RequestApproval",
                                                "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "Block"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "Block",
                                                "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                              },
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NoAction"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "NoAction",
                                                "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                              }
                                            ]
                                          },
                                          "activityKind": {
                                            "type": "string",
                                            "enum": [
                                              "Wallets:Sign"
                                            ]
                                          },
                                          "dateCreated": {
                                            "type": "string"
                                          },
                                          "dateUpdated": {
                                            "type": "string"
                                          },
                                          "filters": {
                                            "properties": {
                                              "walletId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              },
                                              "walletTags": {
                                                "properties": {
                                                  "hasAll": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  },
                                                  "hasAny": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rule": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "AlwaysTrigger"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "AlwaysTrigger",
                                                "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                              },
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "addresses": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "description": "Whitelisted recipient addresses"
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "addresses"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "TransactionRecipientWhitelist"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ],
                                                "title": "TransactionRecipientWhitelist",
                                                "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                              },
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "currency": {
                                                        "type": "string",
                                                        "enum": [
                                                          "USD"
                                                        ],
                                                        "description": "Fiat currency, currently only `USD`"
                                                      },
                                                      "limit": {
                                                        "type": "number",
                                                        "description": "Amount limit in `currency`"
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "limit",
                                                      "currency"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "TransactionAmountLimit"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ],
                                                "title": "TransactionAmountLimit",
                                                "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                              },
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "currency": {
                                                        "type": "string",
                                                        "enum": [
                                                          "USD"
                                                        ],
                                                        "description": "Currency for the amount limit above"
                                                      },
                                                      "limit": {
                                                        "type": "number",
                                                        "description": "Amount limit in `currency`"
                                                      },
                                                      "timeframe": {
                                                        "type": "integer",
                                                        "maximum": 43200,
                                                        "minimum": 1,
                                                        "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "limit",
                                                      "currency",
                                                      "timeframe"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "TransactionAmountVelocity"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ],
                                                "title": "TransactionAmountVelocity",
                                                "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                              },
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "limit": {
                                                        "type": "number",
                                                        "description": "Count limit"
                                                      },
                                                      "timeframe": {
                                                        "type": "integer",
                                                        "maximum": 43200,
                                                        "minimum": 1,
                                                        "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "limit",
                                                      "timeframe"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "TransactionCountVelocity"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ],
                                                "title": "TransactionCountVelocity",
                                                "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                              },
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "addresses": {
                                                        "properties": {
                                                          "categoryIds": {
                                                            "items": {
                                                              "type": "integer",
                                                              "exclusiveMinimum": 0
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "categoryIds"
                                                        ]
                                                      },
                                                      "alerts": {
                                                        "properties": {
                                                          "alertLevel": {
                                                            "type": "string",
                                                            "enum": [
                                                              "LOW",
                                                              "MEDIUM",
                                                              "HIGH",
                                                              "SEVERE"
                                                            ]
                                                          },
                                                          "categoryIds": {
                                                            "items": {
                                                              "type": "integer",
                                                              "exclusiveMinimum": 0
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "alertLevel",
                                                          "categoryIds"
                                                        ]
                                                      },
                                                      "exposures": {
                                                        "properties": {
                                                          "direct": {
                                                            "properties": {
                                                              "categoryIds": {
                                                                "items": {
                                                                  "type": "integer",
                                                                  "exclusiveMinimum": 0
                                                                },
                                                                "type": "array"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "categoryIds"
                                                            ]
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "direct"
                                                        ]
                                                      },
                                                      "fallbackBehaviours": {
                                                        "properties": {
                                                          "skipChainalysisFailure": {
                                                            "type": "boolean"
                                                          },
                                                          "skipUnscreenableTransaction": {
                                                            "type": "boolean"
                                                          },
                                                          "skipUnsupportedAsset": {
                                                            "type": "boolean"
                                                          },
                                                          "skipUnsupportedNetwork": {
                                                            "type": "boolean"
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "skipUnscreenableTransaction",
                                                          "skipUnsupportedNetwork",
                                                          "skipUnsupportedAsset",
                                                          "skipChainalysisFailure"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "alerts",
                                                      "exposures",
                                                      "addresses",
                                                      "fallbackBehaviours"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "ChainalysisTransactionPrescreening"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ]
                                              },
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "autoClearAfterDeliveredTimeoutSeconds": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                      },
                                                      "autoTriggerTimeoutSeconds": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                      },
                                                      "vendor": {
                                                        "type": "string",
                                                        "enum": [
                                                          "Notabene"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "vendor",
                                                      "autoTriggerTimeoutSeconds"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "TravelRuleTransactionPrescreening"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ],
                                                "title": "TravelRuleTransactionPrescreening",
                                                "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                              }
                                            ]
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active",
                                              "Archived"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "activityKind",
                                          "rule",
                                          "action"
                                        ],
                                        "title": "Wallets:Sign"
                                      },
                                      {
                                        "properties": {
                                          "action": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "NoAction"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "NoAction",
                                                "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                              }
                                            ]
                                          },
                                          "activityKind": {
                                            "type": "string",
                                            "enum": [
                                              "Wallets:IncomingTransaction"
                                            ]
                                          },
                                          "dateCreated": {
                                            "type": "string"
                                          },
                                          "dateUpdated": {
                                            "type": "string"
                                          },
                                          "filters": {
                                            "properties": {
                                              "walletId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              },
                                              "walletTags": {
                                                "properties": {
                                                  "hasAll": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  },
                                                  "hasAny": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "rule": {
                                            "oneOf": [
                                              {
                                                "properties": {
                                                  "configuration": {
                                                    "properties": {
                                                      "alerts": {
                                                        "properties": {
                                                          "alertLevel": {
                                                            "type": "string",
                                                            "enum": [
                                                              "LOW",
                                                              "MEDIUM",
                                                              "HIGH",
                                                              "SEVERE"
                                                            ]
                                                          },
                                                          "categoryIds": {
                                                            "items": {
                                                              "type": "integer",
                                                              "exclusiveMinimum": 0
                                                            },
                                                            "type": "array"
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "alertLevel",
                                                          "categoryIds"
                                                        ]
                                                      },
                                                      "exposures": {
                                                        "properties": {
                                                          "direct": {
                                                            "properties": {
                                                              "categoryIds": {
                                                                "items": {
                                                                  "type": "integer",
                                                                  "exclusiveMinimum": 0
                                                                },
                                                                "type": "array"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "categoryIds"
                                                            ]
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "direct"
                                                        ]
                                                      },
                                                      "fallbackBehaviours": {
                                                        "properties": {
                                                          "skipChainalysisFailure": {
                                                            "type": "boolean"
                                                          },
                                                          "skipUnscreenableTransaction": {
                                                            "type": "boolean"
                                                          },
                                                          "skipUnsupportedAsset": {
                                                            "type": "boolean"
                                                          },
                                                          "skipUnsupportedNetwork": {
                                                            "type": "boolean"
                                                          }
                                                        },
                                                        "type": "object",
                                                        "required": [
                                                          "skipUnscreenableTransaction",
                                                          "skipUnsupportedNetwork",
                                                          "skipUnsupportedAsset",
                                                          "skipChainalysisFailure"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "alerts",
                                                      "exposures",
                                                      "fallbackBehaviours"
                                                    ]
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "ChainalysisTransactionScreening"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "configuration"
                                                ],
                                                "title": "ChainalysisTransactionPrescreening",
                                                "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                              }
                                            ]
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active",
                                              "Archived"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "activityKind",
                                          "rule",
                                          "action"
                                        ],
                                        "title": "Wallets:IncomingTransaction"
                                      }
                                    ]
                                  },
                                  "dateCreated": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "dateResolved": {
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "entityId": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Policy"
                                    ]
                                  },
                                  "operationKind": {
                                    "type": "string",
                                    "enum": [
                                      "Update"
                                    ]
                                  },
                                  "requester": {
                                    "properties": {
                                      "appId": {
                                        "type": "string"
                                      },
                                      "tokenId": {
                                        "type": "string"
                                      },
                                      "userId": {
                                        "type": "string"
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "userId"
                                    ]
                                  },
                                  "status": {
                                    "type": "string",
                                    "enum": [
                                      "Applied",
                                      "Failed",
                                      "Pending",
                                      "Rejected"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "id",
                                  "requester",
                                  "kind",
                                  "operationKind",
                                  "status",
                                  "entityId",
                                  "dateCreated",
                                  "body"
                                ]
                              }
                            },
                            "type": "object"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Create Policy",
        "description": "Setup a new Policy for your organization.\n  \n  Every policy requires a rule to be specified. Upon policy evaluation, the configuration specified in the rule will be used to determine whether the policy should trigger or not for a given activity.\n  \n  By exposing controls on permissions and policies, Dfns enables the specification of an admin quorum to approve sensitive actions which could change system governance.   Note Dfns does not expose a separate \"admin quorum\" concept like some of our competitors - we simply enable this use case as another configuration of the policy engine itself.   This was chosen to promote flexibility as not every customer will have the same requirements around creating and managing admin quorums.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Alias:Modify"
                        ]
                      },
                      "filters": {
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Alias:Modify",
                    "description": ""
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Permissions:Assign"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "permissionId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "permissionId"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Permissions:Assign",
                    "description": "A \"`Permissions:Assign`\" activity represents any activity which involves assigning a permission (or revoking it, aka \"deleting a permission assignment\"). These activities are Assignment change requests, created as a result of calling either:\n\n* the endpoint [Assign Permission](https://docs.dfns.co/api-reference/permissions/assign-permission)\n* the endpoint [Revoke Permission](https://docs.dfns.co/api-reference/permissions/revoke-permission)"
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Permissions:Modify"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "permissionId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "permissionId"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Permissions:Modify",
                    "description": "A \"`Permissions:Modify`\" activity represents any activity which involves updating or archiving a permission. These activities are Permission change requests, created as a result of calling either:\n\n* the endpoint [Update Permission](https://docs.dfns.co/api-reference/permissions/update-permission)\n* the endpoint [Delete Permission](https://docs.dfns.co/api-reference/permissions/delete-permission)"
                  },
                  {
                    "properties": {
                      "action": {
                        "properties": {
                          "approvalGroups": {
                            "items": {
                              "properties": {
                                "approvers": {
                                  "properties": {
                                    "userId": {
                                      "properties": {
                                        "in": {
                                          "items": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "type": "array",
                                          "maxItems": 100,
                                          "minItems": 1
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "in"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "initiatorCanApprove": {
                                  "type": "boolean",
                                  "description": "Whether the initiator of the activity can participate in the approval."
                                },
                                "name": {
                                  "type": "string"
                                },
                                "quorum": {
                                  "type": "integer",
                                  "minimum": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "quorum",
                                "approvers"
                              ]
                            },
                            "type": "array",
                            "minItems": 1
                          },
                          "autoRejectTimeout": {
                            "type": "integer",
                            "minimum": 1
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "RequestApproval"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "approvalGroups"
                        ],
                        "title": "RequestApproval",
                        "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Policies:Modify"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "policyId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "policyId"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Policies:Modify",
                    "description": "A \"`Policies:Modify`\" activity represents any activity which involves updating or archiving a policy. These activities are Policy change requests, created as a result of calling either:\n\n* the endpoint [Update Policy](https://docs.dfns.co/api-reference/policies/update-policy)\n* the endpoint [Delete Policy](https://docs.dfns.co/api-reference/policies/delete-policy)\n"
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "NoAction"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "NoAction",
                            "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Wallets:Sign"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "walletId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          },
                          "walletTags": {
                            "properties": {
                              "hasAll": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "hasAny": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "oneOf": [
                          {
                            "properties": {
                              "configuration": {
                                "additionalProperties": false,
                                "type": "object"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "AlwaysTrigger"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "AlwaysTrigger",
                            "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "addresses": {
                                    "items": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "type": "array",
                                    "description": "Whitelisted recipient addresses"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "addresses"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionRecipientWhitelist"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionRecipientWhitelist",
                            "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "USD"
                                    ],
                                    "description": "Fiat currency, currently only `USD`"
                                  },
                                  "limit": {
                                    "type": "number",
                                    "description": "Amount limit in `currency`"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "limit",
                                  "currency"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionAmountLimit"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionAmountLimit",
                            "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "USD"
                                    ],
                                    "description": "Currency for the amount limit above"
                                  },
                                  "limit": {
                                    "type": "number",
                                    "description": "Amount limit in `currency`"
                                  },
                                  "timeframe": {
                                    "type": "integer",
                                    "maximum": 43200,
                                    "minimum": 1,
                                    "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "limit",
                                  "currency",
                                  "timeframe"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionAmountVelocity"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionAmountVelocity",
                            "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "limit": {
                                    "type": "number",
                                    "description": "Count limit"
                                  },
                                  "timeframe": {
                                    "type": "integer",
                                    "maximum": 43200,
                                    "minimum": 1,
                                    "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "limit",
                                  "timeframe"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionCountVelocity"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionCountVelocity",
                            "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "addresses": {
                                    "properties": {
                                      "categoryIds": {
                                        "items": {
                                          "type": "integer",
                                          "exclusiveMinimum": 0
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "categoryIds"
                                    ]
                                  },
                                  "alerts": {
                                    "properties": {
                                      "alertLevel": {
                                        "type": "string",
                                        "enum": [
                                          "LOW",
                                          "MEDIUM",
                                          "HIGH",
                                          "SEVERE"
                                        ]
                                      },
                                      "categoryIds": {
                                        "items": {
                                          "type": "integer",
                                          "exclusiveMinimum": 0
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "alertLevel",
                                      "categoryIds"
                                    ]
                                  },
                                  "exposures": {
                                    "properties": {
                                      "direct": {
                                        "properties": {
                                          "categoryIds": {
                                            "items": {
                                              "type": "integer",
                                              "exclusiveMinimum": 0
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "categoryIds"
                                        ]
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "direct"
                                    ]
                                  },
                                  "fallbackBehaviours": {
                                    "properties": {
                                      "skipChainalysisFailure": {
                                        "type": "boolean"
                                      },
                                      "skipUnscreenableTransaction": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedAsset": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedNetwork": {
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "skipUnscreenableTransaction",
                                      "skipUnsupportedNetwork",
                                      "skipUnsupportedAsset",
                                      "skipChainalysisFailure"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "alerts",
                                  "exposures",
                                  "addresses",
                                  "fallbackBehaviours"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "ChainalysisTransactionPrescreening"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ]
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "autoClearAfterDeliveredTimeoutSeconds": {
                                    "type": "integer",
                                    "minimum": 0
                                  },
                                  "autoTriggerTimeoutSeconds": {
                                    "type": "integer",
                                    "minimum": 0
                                  },
                                  "vendor": {
                                    "type": "string",
                                    "enum": [
                                      "Notabene"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "vendor",
                                  "autoTriggerTimeoutSeconds"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TravelRuleTransactionPrescreening"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TravelRuleTransactionPrescreening",
                            "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Wallets:Sign",
                    "description": "A \"`Wallets:Sign`\" activity represents any activity which involves signing with a wallet. Currently, in our API, these can be:\n\n* a Transfer Request (created using the endpoint [Transfer Asset from Wallet](https://docs.dfns.co/api-reference/wallets/transfer-asset))\n* a Transaction Request (created using the endpoint [Broadcast Transaction from Wallet](https://docs.dfns.co/api-reference/wallets/sign-and-broadcast-transaction))\n* a Signature Request (created using the endpoint [Generate Signature from Wallet](https://docs.dfns.co/api-reference/keys/generate-signature))\n"
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "NoAction"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "NoAction",
                            "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Wallets:IncomingTransaction"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "walletId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          },
                          "walletTags": {
                            "properties": {
                              "hasAll": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "hasAny": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "oneOf": [
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "alerts": {
                                    "properties": {
                                      "alertLevel": {
                                        "type": "string",
                                        "enum": [
                                          "LOW",
                                          "MEDIUM",
                                          "HIGH",
                                          "SEVERE"
                                        ]
                                      },
                                      "categoryIds": {
                                        "items": {
                                          "type": "integer",
                                          "exclusiveMinimum": 0
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "alertLevel",
                                      "categoryIds"
                                    ]
                                  },
                                  "exposures": {
                                    "properties": {
                                      "direct": {
                                        "properties": {
                                          "categoryIds": {
                                            "items": {
                                              "type": "integer",
                                              "exclusiveMinimum": 0
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "categoryIds"
                                        ]
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "direct"
                                    ]
                                  },
                                  "fallbackBehaviours": {
                                    "properties": {
                                      "skipChainalysisFailure": {
                                        "type": "boolean"
                                      },
                                      "skipUnscreenableTransaction": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedAsset": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedNetwork": {
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "skipUnscreenableTransaction",
                                      "skipUnsupportedNetwork",
                                      "skipUnsupportedAsset",
                                      "skipChainalysisFailure"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "alerts",
                                  "exposures",
                                  "fallbackBehaviours"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "ChainalysisTransactionScreening"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "ChainalysisTransactionPrescreening",
                            "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Wallets:IncomingTransaction",
                    "description": "A \"`Wallets:IncomingTransaction`\" activity represents when our indexers detected an incoming transaction into a wallet. This activity kind has to be used with the rule kind \"`ChainalysisTransactionScreening`\" (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page), and the action kind \"`NoAction`\", meaning that no actual action will be taken as a result of the Chainalysis screening, other than notifying you through a webhook event if the policy is triggered. The reason for that, is that the incoming transaction is already on-chain, so the funds are already in the wallet, we cannot block that transfer on chain."
                  }
                ]
              },
              "examples": {
                "Chainalysis Transaction Prescreening": {
                  "value": {
                    "name": "chainalysis prescreening policy",
                    "activityKind": "Wallets:Sign",
                    "rule": {
                      "kind": "ChainalysisTransactionPrescreening",
                      "configuration": {
                        "alerts": {
                          "alertLevel": "LOW",
                          "categoryIds": []
                        },
                        "exposures": {
                          "direct": {
                            "categoryIds": []
                          }
                        },
                        "addresses": {
                          "alertLevel": "LOW",
                          "categoryIds": []
                        },
                        "fallbackBehaviours": {
                          "skipUnscreenableTransaction": false,
                          "skipUnsupportedNetwork": false,
                          "skipUnsupportedAsset": false,
                          "skipChainalysisFailure": false
                        }
                      }
                    },
                    "action": {
                      "kind": "Block"
                    },
                    "filters": {
                      "walletId": {
                        "in": [
                          "wa-4sql3-a6ct4-8j2q8ih86d853rgg",
                          "wa-j9btt-5s9o8-i3r8373ddg0usn3"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Alias:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Alias:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Permissions:Assign"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "permissionId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "permissionId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Permissions:Assign"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Permissions:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "permissionId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "permissionId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Permissions:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "properties": {
                            "approvalGroups": {
                              "items": {
                                "properties": {
                                  "approvers": {
                                    "properties": {
                                      "userId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "initiatorCanApprove": {
                                    "type": "boolean",
                                    "description": "Whether the initiator of the activity can participate in the approval."
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "quorum": {
                                    "type": "integer",
                                    "minimum": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "quorum",
                                  "approvers"
                                ]
                              },
                              "type": "array",
                              "minItems": 1
                            },
                            "autoRejectTimeout": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "RequestApproval"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "approvalGroups"
                          ],
                          "title": "RequestApproval",
                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Policies:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "policyId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "policyId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Policies:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "NoAction"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "NoAction",
                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Wallets:Sign"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "walletId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            },
                            "walletTags": {
                              "properties": {
                                "hasAll": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                },
                                "hasAny": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "oneOf": [
                            {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "addresses": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "description": "Whitelisted recipient addresses"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "addresses"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionRecipientWhitelist"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionRecipientWhitelist",
                              "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "currency": {
                                      "type": "string",
                                      "enum": [
                                        "USD"
                                      ],
                                      "description": "Fiat currency, currently only `USD`"
                                    },
                                    "limit": {
                                      "type": "number",
                                      "description": "Amount limit in `currency`"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "currency"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionAmountLimit"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionAmountLimit",
                              "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "currency": {
                                      "type": "string",
                                      "enum": [
                                        "USD"
                                      ],
                                      "description": "Currency for the amount limit above"
                                    },
                                    "limit": {
                                      "type": "number",
                                      "description": "Amount limit in `currency`"
                                    },
                                    "timeframe": {
                                      "type": "integer",
                                      "maximum": 43200,
                                      "minimum": 1,
                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "currency",
                                    "timeframe"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionAmountVelocity"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionAmountVelocity",
                              "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "limit": {
                                      "type": "number",
                                      "description": "Count limit"
                                    },
                                    "timeframe": {
                                      "type": "integer",
                                      "maximum": 43200,
                                      "minimum": 1,
                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "timeframe"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionCountVelocity"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionCountVelocity",
                              "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "addresses": {
                                      "properties": {
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "categoryIds"
                                      ]
                                    },
                                    "alerts": {
                                      "properties": {
                                        "alertLevel": {
                                          "type": "string",
                                          "enum": [
                                            "LOW",
                                            "MEDIUM",
                                            "HIGH",
                                            "SEVERE"
                                          ]
                                        },
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "alertLevel",
                                        "categoryIds"
                                      ]
                                    },
                                    "exposures": {
                                      "properties": {
                                        "direct": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "direct"
                                      ]
                                    },
                                    "fallbackBehaviours": {
                                      "properties": {
                                        "skipChainalysisFailure": {
                                          "type": "boolean"
                                        },
                                        "skipUnscreenableTransaction": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedAsset": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedNetwork": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "skipUnscreenableTransaction",
                                        "skipUnsupportedNetwork",
                                        "skipUnsupportedAsset",
                                        "skipChainalysisFailure"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "alerts",
                                    "exposures",
                                    "addresses",
                                    "fallbackBehaviours"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "ChainalysisTransactionPrescreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ]
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "autoClearAfterDeliveredTimeoutSeconds": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "autoTriggerTimeoutSeconds": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "vendor": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "vendor",
                                    "autoTriggerTimeoutSeconds"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TravelRuleTransactionPrescreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TravelRuleTransactionPrescreening",
                              "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Wallets:Sign"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "NoAction"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "NoAction",
                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Wallets:IncomingTransaction"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "walletId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            },
                            "walletTags": {
                              "properties": {
                                "hasAll": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                },
                                "hasAny": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "oneOf": [
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "alerts": {
                                      "properties": {
                                        "alertLevel": {
                                          "type": "string",
                                          "enum": [
                                            "LOW",
                                            "MEDIUM",
                                            "HIGH",
                                            "SEVERE"
                                          ]
                                        },
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "alertLevel",
                                        "categoryIds"
                                      ]
                                    },
                                    "exposures": {
                                      "properties": {
                                        "direct": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "direct"
                                      ]
                                    },
                                    "fallbackBehaviours": {
                                      "properties": {
                                        "skipChainalysisFailure": {
                                          "type": "boolean"
                                        },
                                        "skipUnscreenableTransaction": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedAsset": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedNetwork": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "skipUnscreenableTransaction",
                                        "skipUnsupportedNetwork",
                                        "skipUnsupportedAsset",
                                        "skipChainalysisFailure"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "alerts",
                                    "exposures",
                                    "fallbackBehaviours"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "ChainalysisTransactionScreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "ChainalysisTransactionPrescreening",
                              "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Wallets:IncomingTransaction"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Create`: Always required."
        }
      }
    },
    "/v2/policies/{policyId}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get Policy",
        "description": "Retrieve information about a specific policy.",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "oneOf": [
                        {
                          "properties": {
                            "action": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "approvalGroups": {
                                      "items": {
                                        "properties": {
                                          "approvers": {
                                            "properties": {
                                              "userId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "initiatorCanApprove": {
                                            "type": "boolean",
                                            "description": "Whether the initiator of the activity can participate in the approval."
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "quorum": {
                                            "type": "integer",
                                            "minimum": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "quorum",
                                          "approvers"
                                        ]
                                      },
                                      "type": "array",
                                      "minItems": 1
                                    },
                                    "autoRejectTimeout": {
                                      "type": "integer",
                                      "minimum": 1
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "RequestApproval"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "approvalGroups"
                                  ],
                                  "title": "RequestApproval",
                                  "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                },
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Block"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "Block",
                                  "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                }
                              ]
                            },
                            "activityKind": {
                              "type": "string",
                              "enum": [
                                "Alias:Modify"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "dateUpdated": {
                              "type": "string"
                            },
                            "filters": {
                              "type": "object"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "rule": {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Archived"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "status",
                            "activityKind",
                            "rule",
                            "action"
                          ],
                          "title": "Alias:Modify"
                        },
                        {
                          "properties": {
                            "action": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "approvalGroups": {
                                      "items": {
                                        "properties": {
                                          "approvers": {
                                            "properties": {
                                              "userId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "initiatorCanApprove": {
                                            "type": "boolean",
                                            "description": "Whether the initiator of the activity can participate in the approval."
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "quorum": {
                                            "type": "integer",
                                            "minimum": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "quorum",
                                          "approvers"
                                        ]
                                      },
                                      "type": "array",
                                      "minItems": 1
                                    },
                                    "autoRejectTimeout": {
                                      "type": "integer",
                                      "minimum": 1
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "RequestApproval"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "approvalGroups"
                                  ],
                                  "title": "RequestApproval",
                                  "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                },
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Block"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "Block",
                                  "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                }
                              ]
                            },
                            "activityKind": {
                              "type": "string",
                              "enum": [
                                "Permissions:Assign"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "dateUpdated": {
                              "type": "string"
                            },
                            "filters": {
                              "properties": {
                                "permissionId": {
                                  "properties": {
                                    "in": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "in"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "permissionId"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "rule": {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Archived"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "status",
                            "activityKind",
                            "rule",
                            "action"
                          ],
                          "title": "Permissions:Assign"
                        },
                        {
                          "properties": {
                            "action": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "approvalGroups": {
                                      "items": {
                                        "properties": {
                                          "approvers": {
                                            "properties": {
                                              "userId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "initiatorCanApprove": {
                                            "type": "boolean",
                                            "description": "Whether the initiator of the activity can participate in the approval."
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "quorum": {
                                            "type": "integer",
                                            "minimum": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "quorum",
                                          "approvers"
                                        ]
                                      },
                                      "type": "array",
                                      "minItems": 1
                                    },
                                    "autoRejectTimeout": {
                                      "type": "integer",
                                      "minimum": 1
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "RequestApproval"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "approvalGroups"
                                  ],
                                  "title": "RequestApproval",
                                  "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                },
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Block"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "Block",
                                  "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                }
                              ]
                            },
                            "activityKind": {
                              "type": "string",
                              "enum": [
                                "Permissions:Modify"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "dateUpdated": {
                              "type": "string"
                            },
                            "filters": {
                              "properties": {
                                "permissionId": {
                                  "properties": {
                                    "in": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "in"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "permissionId"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "rule": {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Archived"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "status",
                            "activityKind",
                            "rule",
                            "action"
                          ],
                          "title": "Permissions:Modify"
                        },
                        {
                          "properties": {
                            "action": {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            "activityKind": {
                              "type": "string",
                              "enum": [
                                "Policies:Modify"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "dateUpdated": {
                              "type": "string"
                            },
                            "filters": {
                              "properties": {
                                "policyId": {
                                  "properties": {
                                    "in": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "in"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "policyId"
                              ]
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "rule": {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Archived"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "status",
                            "activityKind",
                            "rule",
                            "action"
                          ],
                          "title": "Policies:Modify"
                        },
                        {
                          "properties": {
                            "action": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "approvalGroups": {
                                      "items": {
                                        "properties": {
                                          "approvers": {
                                            "properties": {
                                              "userId": {
                                                "properties": {
                                                  "in": {
                                                    "items": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "type": "array",
                                                    "maxItems": 100,
                                                    "minItems": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "in"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object"
                                          },
                                          "initiatorCanApprove": {
                                            "type": "boolean",
                                            "description": "Whether the initiator of the activity can participate in the approval."
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "quorum": {
                                            "type": "integer",
                                            "minimum": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "quorum",
                                          "approvers"
                                        ]
                                      },
                                      "type": "array",
                                      "minItems": 1
                                    },
                                    "autoRejectTimeout": {
                                      "type": "integer",
                                      "minimum": 1
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "RequestApproval"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "approvalGroups"
                                  ],
                                  "title": "RequestApproval",
                                  "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                },
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Block"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "Block",
                                  "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                },
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "NoAction"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "NoAction",
                                  "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                }
                              ]
                            },
                            "activityKind": {
                              "type": "string",
                              "enum": [
                                "Wallets:Sign"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "dateUpdated": {
                              "type": "string"
                            },
                            "filters": {
                              "properties": {
                                "walletId": {
                                  "properties": {
                                    "in": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "in"
                                  ]
                                },
                                "walletTags": {
                                  "properties": {
                                    "hasAll": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    },
                                    "hasAny": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object"
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "rule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "configuration": {
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "AlwaysTrigger"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "AlwaysTrigger",
                                  "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                },
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "addresses": {
                                          "items": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "type": "array",
                                          "description": "Whitelisted recipient addresses"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "addresses"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "TransactionRecipientWhitelist"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ],
                                  "title": "TransactionRecipientWhitelist",
                                  "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                },
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "currency": {
                                          "type": "string",
                                          "enum": [
                                            "USD"
                                          ],
                                          "description": "Fiat currency, currently only `USD`"
                                        },
                                        "limit": {
                                          "type": "number",
                                          "description": "Amount limit in `currency`"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "limit",
                                        "currency"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "TransactionAmountLimit"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ],
                                  "title": "TransactionAmountLimit",
                                  "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                },
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "currency": {
                                          "type": "string",
                                          "enum": [
                                            "USD"
                                          ],
                                          "description": "Currency for the amount limit above"
                                        },
                                        "limit": {
                                          "type": "number",
                                          "description": "Amount limit in `currency`"
                                        },
                                        "timeframe": {
                                          "type": "integer",
                                          "maximum": 43200,
                                          "minimum": 1,
                                          "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "limit",
                                        "currency",
                                        "timeframe"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "TransactionAmountVelocity"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ],
                                  "title": "TransactionAmountVelocity",
                                  "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                },
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "limit": {
                                          "type": "number",
                                          "description": "Count limit"
                                        },
                                        "timeframe": {
                                          "type": "integer",
                                          "maximum": 43200,
                                          "minimum": 1,
                                          "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "limit",
                                        "timeframe"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "TransactionCountVelocity"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ],
                                  "title": "TransactionCountVelocity",
                                  "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                },
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "addresses": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        },
                                        "alerts": {
                                          "properties": {
                                            "alertLevel": {
                                              "type": "string",
                                              "enum": [
                                                "LOW",
                                                "MEDIUM",
                                                "HIGH",
                                                "SEVERE"
                                              ]
                                            },
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "alertLevel",
                                            "categoryIds"
                                          ]
                                        },
                                        "exposures": {
                                          "properties": {
                                            "direct": {
                                              "properties": {
                                                "categoryIds": {
                                                  "items": {
                                                    "type": "integer",
                                                    "exclusiveMinimum": 0
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "type": "object",
                                              "required": [
                                                "categoryIds"
                                              ]
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "direct"
                                          ]
                                        },
                                        "fallbackBehaviours": {
                                          "properties": {
                                            "skipChainalysisFailure": {
                                              "type": "boolean"
                                            },
                                            "skipUnscreenableTransaction": {
                                              "type": "boolean"
                                            },
                                            "skipUnsupportedAsset": {
                                              "type": "boolean"
                                            },
                                            "skipUnsupportedNetwork": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "skipUnscreenableTransaction",
                                            "skipUnsupportedNetwork",
                                            "skipUnsupportedAsset",
                                            "skipChainalysisFailure"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "alerts",
                                        "exposures",
                                        "addresses",
                                        "fallbackBehaviours"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "ChainalysisTransactionPrescreening"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ]
                                },
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "autoClearAfterDeliveredTimeoutSeconds": {
                                          "type": "integer",
                                          "minimum": 0
                                        },
                                        "autoTriggerTimeoutSeconds": {
                                          "type": "integer",
                                          "minimum": 0
                                        },
                                        "vendor": {
                                          "type": "string",
                                          "enum": [
                                            "Notabene"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "vendor",
                                        "autoTriggerTimeoutSeconds"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "TravelRuleTransactionPrescreening"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ],
                                  "title": "TravelRuleTransactionPrescreening",
                                  "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                }
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Archived"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "status",
                            "activityKind",
                            "rule",
                            "action"
                          ],
                          "title": "Wallets:Sign"
                        },
                        {
                          "properties": {
                            "action": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "NoAction"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind"
                                  ],
                                  "title": "NoAction",
                                  "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                }
                              ]
                            },
                            "activityKind": {
                              "type": "string",
                              "enum": [
                                "Wallets:IncomingTransaction"
                              ]
                            },
                            "dateCreated": {
                              "type": "string"
                            },
                            "dateUpdated": {
                              "type": "string"
                            },
                            "filters": {
                              "properties": {
                                "walletId": {
                                  "properties": {
                                    "in": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "in"
                                  ]
                                },
                                "walletTags": {
                                  "properties": {
                                    "hasAll": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    },
                                    "hasAny": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "maxItems": 100,
                                      "minItems": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object"
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "rule": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "configuration": {
                                      "properties": {
                                        "alerts": {
                                          "properties": {
                                            "alertLevel": {
                                              "type": "string",
                                              "enum": [
                                                "LOW",
                                                "MEDIUM",
                                                "HIGH",
                                                "SEVERE"
                                              ]
                                            },
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "alertLevel",
                                            "categoryIds"
                                          ]
                                        },
                                        "exposures": {
                                          "properties": {
                                            "direct": {
                                              "properties": {
                                                "categoryIds": {
                                                  "items": {
                                                    "type": "integer",
                                                    "exclusiveMinimum": 0
                                                  },
                                                  "type": "array"
                                                }
                                              },
                                              "type": "object",
                                              "required": [
                                                "categoryIds"
                                              ]
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "direct"
                                          ]
                                        },
                                        "fallbackBehaviours": {
                                          "properties": {
                                            "skipChainalysisFailure": {
                                              "type": "boolean"
                                            },
                                            "skipUnscreenableTransaction": {
                                              "type": "boolean"
                                            },
                                            "skipUnsupportedAsset": {
                                              "type": "boolean"
                                            },
                                            "skipUnsupportedNetwork": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "skipUnscreenableTransaction",
                                            "skipUnsupportedNetwork",
                                            "skipUnsupportedAsset",
                                            "skipChainalysisFailure"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "alerts",
                                        "exposures",
                                        "fallbackBehaviours"
                                      ]
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "ChainalysisTransactionScreening"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "kind",
                                    "configuration"
                                  ],
                                  "title": "ChainalysisTransactionPrescreening",
                                  "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                }
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Active",
                                "Archived"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "name",
                            "status",
                            "activityKind",
                            "rule",
                            "action"
                          ],
                          "title": "Wallets:IncomingTransaction"
                        }
                      ]
                    },
                    {
                      "properties": {
                        "pendingChangeRequest": {
                          "properties": {
                            "approvalId": {
                              "type": "string"
                            },
                            "body": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "action": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "approvalGroups": {
                                              "items": {
                                                "properties": {
                                                  "approvers": {
                                                    "properties": {
                                                      "userId": {
                                                        "properties": {
                                                          "in": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "maxItems": 100,
                                                            "minItems": 1
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "in"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "initiatorCanApprove": {
                                                    "type": "boolean",
                                                    "description": "Whether the initiator of the activity can participate in the approval."
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "quorum": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "quorum",
                                                  "approvers"
                                                ]
                                              },
                                              "type": "array",
                                              "minItems": 1
                                            },
                                            "autoRejectTimeout": {
                                              "type": "integer",
                                              "minimum": 1
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "RequestApproval"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "approvalGroups"
                                          ],
                                          "title": "RequestApproval",
                                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                        },
                                        {
                                          "properties": {
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "Block"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "Block",
                                          "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                        }
                                      ]
                                    },
                                    "activityKind": {
                                      "type": "string",
                                      "enum": [
                                        "Alias:Modify"
                                      ]
                                    },
                                    "dateCreated": {
                                      "type": "string"
                                    },
                                    "dateUpdated": {
                                      "type": "string"
                                    },
                                    "filters": {
                                      "type": "object"
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "rule": {
                                      "properties": {
                                        "configuration": {
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "AlwaysTrigger"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "AlwaysTrigger",
                                      "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active",
                                        "Archived"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "activityKind",
                                    "rule",
                                    "action"
                                  ],
                                  "title": "Alias:Modify"
                                },
                                {
                                  "properties": {
                                    "action": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "approvalGroups": {
                                              "items": {
                                                "properties": {
                                                  "approvers": {
                                                    "properties": {
                                                      "userId": {
                                                        "properties": {
                                                          "in": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "maxItems": 100,
                                                            "minItems": 1
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "in"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "initiatorCanApprove": {
                                                    "type": "boolean",
                                                    "description": "Whether the initiator of the activity can participate in the approval."
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "quorum": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "quorum",
                                                  "approvers"
                                                ]
                                              },
                                              "type": "array",
                                              "minItems": 1
                                            },
                                            "autoRejectTimeout": {
                                              "type": "integer",
                                              "minimum": 1
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "RequestApproval"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "approvalGroups"
                                          ],
                                          "title": "RequestApproval",
                                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                        },
                                        {
                                          "properties": {
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "Block"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "Block",
                                          "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                        }
                                      ]
                                    },
                                    "activityKind": {
                                      "type": "string",
                                      "enum": [
                                        "Permissions:Assign"
                                      ]
                                    },
                                    "dateCreated": {
                                      "type": "string"
                                    },
                                    "dateUpdated": {
                                      "type": "string"
                                    },
                                    "filters": {
                                      "properties": {
                                        "permissionId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "permissionId"
                                      ]
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "rule": {
                                      "properties": {
                                        "configuration": {
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "AlwaysTrigger"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "AlwaysTrigger",
                                      "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active",
                                        "Archived"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "activityKind",
                                    "rule",
                                    "action"
                                  ],
                                  "title": "Permissions:Assign"
                                },
                                {
                                  "properties": {
                                    "action": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "approvalGroups": {
                                              "items": {
                                                "properties": {
                                                  "approvers": {
                                                    "properties": {
                                                      "userId": {
                                                        "properties": {
                                                          "in": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "maxItems": 100,
                                                            "minItems": 1
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "in"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "initiatorCanApprove": {
                                                    "type": "boolean",
                                                    "description": "Whether the initiator of the activity can participate in the approval."
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "quorum": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "quorum",
                                                  "approvers"
                                                ]
                                              },
                                              "type": "array",
                                              "minItems": 1
                                            },
                                            "autoRejectTimeout": {
                                              "type": "integer",
                                              "minimum": 1
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "RequestApproval"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "approvalGroups"
                                          ],
                                          "title": "RequestApproval",
                                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                        },
                                        {
                                          "properties": {
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "Block"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "Block",
                                          "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                        }
                                      ]
                                    },
                                    "activityKind": {
                                      "type": "string",
                                      "enum": [
                                        "Permissions:Modify"
                                      ]
                                    },
                                    "dateCreated": {
                                      "type": "string"
                                    },
                                    "dateUpdated": {
                                      "type": "string"
                                    },
                                    "filters": {
                                      "properties": {
                                        "permissionId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "permissionId"
                                      ]
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "rule": {
                                      "properties": {
                                        "configuration": {
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "AlwaysTrigger"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "AlwaysTrigger",
                                      "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active",
                                        "Archived"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "activityKind",
                                    "rule",
                                    "action"
                                  ],
                                  "title": "Permissions:Modify"
                                },
                                {
                                  "properties": {
                                    "action": {
                                      "properties": {
                                        "approvalGroups": {
                                          "items": {
                                            "properties": {
                                              "approvers": {
                                                "properties": {
                                                  "userId": {
                                                    "properties": {
                                                      "in": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "in"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "initiatorCanApprove": {
                                                "type": "boolean",
                                                "description": "Whether the initiator of the activity can participate in the approval."
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "quorum": {
                                                "type": "integer",
                                                "minimum": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "quorum",
                                              "approvers"
                                            ]
                                          },
                                          "type": "array",
                                          "minItems": 1
                                        },
                                        "autoRejectTimeout": {
                                          "type": "integer",
                                          "minimum": 1
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "RequestApproval"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "approvalGroups"
                                      ],
                                      "title": "RequestApproval",
                                      "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                    },
                                    "activityKind": {
                                      "type": "string",
                                      "enum": [
                                        "Policies:Modify"
                                      ]
                                    },
                                    "dateCreated": {
                                      "type": "string"
                                    },
                                    "dateUpdated": {
                                      "type": "string"
                                    },
                                    "filters": {
                                      "properties": {
                                        "policyId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "policyId"
                                      ]
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "rule": {
                                      "properties": {
                                        "configuration": {
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "AlwaysTrigger"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "AlwaysTrigger",
                                      "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active",
                                        "Archived"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "activityKind",
                                    "rule",
                                    "action"
                                  ],
                                  "title": "Policies:Modify"
                                },
                                {
                                  "properties": {
                                    "action": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "approvalGroups": {
                                              "items": {
                                                "properties": {
                                                  "approvers": {
                                                    "properties": {
                                                      "userId": {
                                                        "properties": {
                                                          "in": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "maxItems": 100,
                                                            "minItems": 1
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "in"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "initiatorCanApprove": {
                                                    "type": "boolean",
                                                    "description": "Whether the initiator of the activity can participate in the approval."
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "quorum": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "quorum",
                                                  "approvers"
                                                ]
                                              },
                                              "type": "array",
                                              "minItems": 1
                                            },
                                            "autoRejectTimeout": {
                                              "type": "integer",
                                              "minimum": 1
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "RequestApproval"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "approvalGroups"
                                          ],
                                          "title": "RequestApproval",
                                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                        },
                                        {
                                          "properties": {
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "Block"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "Block",
                                          "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                        },
                                        {
                                          "properties": {
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "NoAction"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "NoAction",
                                          "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                        }
                                      ]
                                    },
                                    "activityKind": {
                                      "type": "string",
                                      "enum": [
                                        "Wallets:Sign"
                                      ]
                                    },
                                    "dateCreated": {
                                      "type": "string"
                                    },
                                    "dateUpdated": {
                                      "type": "string"
                                    },
                                    "filters": {
                                      "properties": {
                                        "walletId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        },
                                        "walletTags": {
                                          "properties": {
                                            "hasAll": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            },
                                            "hasAny": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "rule": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "addresses": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "description": "Whitelisted recipient addresses"
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "addresses"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "TransactionRecipientWhitelist"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ],
                                          "title": "TransactionRecipientWhitelist",
                                          "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                        },
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "currency": {
                                                  "type": "string",
                                                  "enum": [
                                                    "USD"
                                                  ],
                                                  "description": "Fiat currency, currently only `USD`"
                                                },
                                                "limit": {
                                                  "type": "number",
                                                  "description": "Amount limit in `currency`"
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "limit",
                                                "currency"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "TransactionAmountLimit"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ],
                                          "title": "TransactionAmountLimit",
                                          "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                        },
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "currency": {
                                                  "type": "string",
                                                  "enum": [
                                                    "USD"
                                                  ],
                                                  "description": "Currency for the amount limit above"
                                                },
                                                "limit": {
                                                  "type": "number",
                                                  "description": "Amount limit in `currency`"
                                                },
                                                "timeframe": {
                                                  "type": "integer",
                                                  "maximum": 43200,
                                                  "minimum": 1,
                                                  "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "limit",
                                                "currency",
                                                "timeframe"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "TransactionAmountVelocity"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ],
                                          "title": "TransactionAmountVelocity",
                                          "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                        },
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "limit": {
                                                  "type": "number",
                                                  "description": "Count limit"
                                                },
                                                "timeframe": {
                                                  "type": "integer",
                                                  "maximum": 43200,
                                                  "minimum": 1,
                                                  "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "limit",
                                                "timeframe"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "TransactionCountVelocity"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ],
                                          "title": "TransactionCountVelocity",
                                          "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                        },
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "addresses": {
                                                  "properties": {
                                                    "categoryIds": {
                                                      "items": {
                                                        "type": "integer",
                                                        "exclusiveMinimum": 0
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "categoryIds"
                                                  ]
                                                },
                                                "alerts": {
                                                  "properties": {
                                                    "alertLevel": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "SEVERE"
                                                      ]
                                                    },
                                                    "categoryIds": {
                                                      "items": {
                                                        "type": "integer",
                                                        "exclusiveMinimum": 0
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "alertLevel",
                                                    "categoryIds"
                                                  ]
                                                },
                                                "exposures": {
                                                  "properties": {
                                                    "direct": {
                                                      "properties": {
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "categoryIds"
                                                      ]
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "direct"
                                                  ]
                                                },
                                                "fallbackBehaviours": {
                                                  "properties": {
                                                    "skipChainalysisFailure": {
                                                      "type": "boolean"
                                                    },
                                                    "skipUnscreenableTransaction": {
                                                      "type": "boolean"
                                                    },
                                                    "skipUnsupportedAsset": {
                                                      "type": "boolean"
                                                    },
                                                    "skipUnsupportedNetwork": {
                                                      "type": "boolean"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "skipUnscreenableTransaction",
                                                    "skipUnsupportedNetwork",
                                                    "skipUnsupportedAsset",
                                                    "skipChainalysisFailure"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "alerts",
                                                "exposures",
                                                "addresses",
                                                "fallbackBehaviours"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "ChainalysisTransactionPrescreening"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ]
                                        },
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "autoClearAfterDeliveredTimeoutSeconds": {
                                                  "type": "integer",
                                                  "minimum": 0
                                                },
                                                "autoTriggerTimeoutSeconds": {
                                                  "type": "integer",
                                                  "minimum": 0
                                                },
                                                "vendor": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Notabene"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "vendor",
                                                "autoTriggerTimeoutSeconds"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "TravelRuleTransactionPrescreening"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ],
                                          "title": "TravelRuleTransactionPrescreening",
                                          "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                        }
                                      ]
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active",
                                        "Archived"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "activityKind",
                                    "rule",
                                    "action"
                                  ],
                                  "title": "Wallets:Sign"
                                },
                                {
                                  "properties": {
                                    "action": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "NoAction"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "NoAction",
                                          "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                        }
                                      ]
                                    },
                                    "activityKind": {
                                      "type": "string",
                                      "enum": [
                                        "Wallets:IncomingTransaction"
                                      ]
                                    },
                                    "dateCreated": {
                                      "type": "string"
                                    },
                                    "dateUpdated": {
                                      "type": "string"
                                    },
                                    "filters": {
                                      "properties": {
                                        "walletId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        },
                                        "walletTags": {
                                          "properties": {
                                            "hasAll": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            },
                                            "hasAny": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "rule": {
                                      "oneOf": [
                                        {
                                          "properties": {
                                            "configuration": {
                                              "properties": {
                                                "alerts": {
                                                  "properties": {
                                                    "alertLevel": {
                                                      "type": "string",
                                                      "enum": [
                                                        "LOW",
                                                        "MEDIUM",
                                                        "HIGH",
                                                        "SEVERE"
                                                      ]
                                                    },
                                                    "categoryIds": {
                                                      "items": {
                                                        "type": "integer",
                                                        "exclusiveMinimum": 0
                                                      },
                                                      "type": "array"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "alertLevel",
                                                    "categoryIds"
                                                  ]
                                                },
                                                "exposures": {
                                                  "properties": {
                                                    "direct": {
                                                      "properties": {
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "categoryIds"
                                                      ]
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "direct"
                                                  ]
                                                },
                                                "fallbackBehaviours": {
                                                  "properties": {
                                                    "skipChainalysisFailure": {
                                                      "type": "boolean"
                                                    },
                                                    "skipUnscreenableTransaction": {
                                                      "type": "boolean"
                                                    },
                                                    "skipUnsupportedAsset": {
                                                      "type": "boolean"
                                                    },
                                                    "skipUnsupportedNetwork": {
                                                      "type": "boolean"
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "skipUnscreenableTransaction",
                                                    "skipUnsupportedNetwork",
                                                    "skipUnsupportedAsset",
                                                    "skipChainalysisFailure"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "alerts",
                                                "exposures",
                                                "fallbackBehaviours"
                                              ]
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "ChainalysisTransactionScreening"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "configuration"
                                          ],
                                          "title": "ChainalysisTransactionPrescreening",
                                          "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                        }
                                      ]
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active",
                                        "Archived"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "activityKind",
                                    "rule",
                                    "action"
                                  ],
                                  "title": "Wallets:IncomingTransaction"
                                }
                              ]
                            },
                            "dateCreated": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "dateResolved": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "entityId": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Policy"
                              ]
                            },
                            "operationKind": {
                              "type": "string",
                              "enum": [
                                "Update"
                              ]
                            },
                            "requester": {
                              "properties": {
                                "appId": {
                                  "type": "string"
                                },
                                "tokenId": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "userId"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "enum": [
                                "Applied",
                                "Failed",
                                "Pending",
                                "Rejected"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "id",
                            "requester",
                            "kind",
                            "operationKind",
                            "status",
                            "entityId",
                            "dateCreated",
                            "body"
                          ]
                        }
                      },
                      "type": "object"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Update Policy",
        "description": "Update an existing policy.",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Alias:Modify"
                        ]
                      },
                      "filters": {
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Alias:Modify",
                    "description": ""
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Permissions:Assign"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "permissionId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "permissionId"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Permissions:Assign",
                    "description": "A \"`Permissions:Assign`\" activity represents any activity which involves assigning a permission (or revoking it, aka \"deleting a permission assignment\"). These activities are Assignment change requests, created as a result of calling either:\n\n* the endpoint [Assign Permission](https://docs.dfns.co/api-reference/permissions/assign-permission)\n* the endpoint [Revoke Permission](https://docs.dfns.co/api-reference/permissions/revoke-permission)"
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Permissions:Modify"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "permissionId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "permissionId"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Permissions:Modify",
                    "description": "A \"`Permissions:Modify`\" activity represents any activity which involves updating or archiving a permission. These activities are Permission change requests, created as a result of calling either:\n\n* the endpoint [Update Permission](https://docs.dfns.co/api-reference/permissions/update-permission)\n* the endpoint [Delete Permission](https://docs.dfns.co/api-reference/permissions/delete-permission)"
                  },
                  {
                    "properties": {
                      "action": {
                        "properties": {
                          "approvalGroups": {
                            "items": {
                              "properties": {
                                "approvers": {
                                  "properties": {
                                    "userId": {
                                      "properties": {
                                        "in": {
                                          "items": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "type": "array",
                                          "maxItems": 100,
                                          "minItems": 1
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "in"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "initiatorCanApprove": {
                                  "type": "boolean",
                                  "description": "Whether the initiator of the activity can participate in the approval."
                                },
                                "name": {
                                  "type": "string"
                                },
                                "quorum": {
                                  "type": "integer",
                                  "minimum": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "quorum",
                                "approvers"
                              ]
                            },
                            "type": "array",
                            "minItems": 1
                          },
                          "autoRejectTimeout": {
                            "type": "integer",
                            "minimum": 1
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "RequestApproval"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "approvalGroups"
                        ],
                        "title": "RequestApproval",
                        "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Policies:Modify"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "policyId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "policyId"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "properties": {
                          "configuration": {
                            "additionalProperties": false,
                            "type": "object"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "AlwaysTrigger"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "AlwaysTrigger",
                        "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Policies:Modify",
                    "description": "A \"`Policies:Modify`\" activity represents any activity which involves updating or archiving a policy. These activities are Policy change requests, created as a result of calling either:\n\n* the endpoint [Update Policy](https://docs.dfns.co/api-reference/policies/update-policy)\n* the endpoint [Delete Policy](https://docs.dfns.co/api-reference/policies/delete-policy)\n"
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "approvalGroups": {
                                "items": {
                                  "properties": {
                                    "approvers": {
                                      "properties": {
                                        "userId": {
                                          "properties": {
                                            "in": {
                                              "items": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": "array",
                                              "maxItems": 100,
                                              "minItems": 1
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "in"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object"
                                    },
                                    "initiatorCanApprove": {
                                      "type": "boolean",
                                      "description": "Whether the initiator of the activity can participate in the approval."
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "quorum": {
                                      "type": "integer",
                                      "minimum": 1
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "quorum",
                                    "approvers"
                                  ]
                                },
                                "type": "array",
                                "minItems": 1
                              },
                              "autoRejectTimeout": {
                                "type": "integer",
                                "minimum": 1
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "RequestApproval"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "approvalGroups"
                            ],
                            "title": "RequestApproval",
                            "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Block"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "Block",
                            "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "NoAction"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "NoAction",
                            "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Wallets:Sign"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "walletId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          },
                          "walletTags": {
                            "properties": {
                              "hasAll": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "hasAny": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "oneOf": [
                          {
                            "properties": {
                              "configuration": {
                                "additionalProperties": false,
                                "type": "object"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "AlwaysTrigger"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "AlwaysTrigger",
                            "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "addresses": {
                                    "items": {
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "type": "array",
                                    "description": "Whitelisted recipient addresses"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "addresses"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionRecipientWhitelist"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionRecipientWhitelist",
                            "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "USD"
                                    ],
                                    "description": "Fiat currency, currently only `USD`"
                                  },
                                  "limit": {
                                    "type": "number",
                                    "description": "Amount limit in `currency`"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "limit",
                                  "currency"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionAmountLimit"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionAmountLimit",
                            "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "currency": {
                                    "type": "string",
                                    "enum": [
                                      "USD"
                                    ],
                                    "description": "Currency for the amount limit above"
                                  },
                                  "limit": {
                                    "type": "number",
                                    "description": "Amount limit in `currency`"
                                  },
                                  "timeframe": {
                                    "type": "integer",
                                    "maximum": 43200,
                                    "minimum": 1,
                                    "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "limit",
                                  "currency",
                                  "timeframe"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionAmountVelocity"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionAmountVelocity",
                            "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "limit": {
                                    "type": "number",
                                    "description": "Count limit"
                                  },
                                  "timeframe": {
                                    "type": "integer",
                                    "maximum": 43200,
                                    "minimum": 1,
                                    "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "limit",
                                  "timeframe"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TransactionCountVelocity"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TransactionCountVelocity",
                            "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "addresses": {
                                    "properties": {
                                      "categoryIds": {
                                        "items": {
                                          "type": "integer",
                                          "exclusiveMinimum": 0
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "categoryIds"
                                    ]
                                  },
                                  "alerts": {
                                    "properties": {
                                      "alertLevel": {
                                        "type": "string",
                                        "enum": [
                                          "LOW",
                                          "MEDIUM",
                                          "HIGH",
                                          "SEVERE"
                                        ]
                                      },
                                      "categoryIds": {
                                        "items": {
                                          "type": "integer",
                                          "exclusiveMinimum": 0
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "alertLevel",
                                      "categoryIds"
                                    ]
                                  },
                                  "exposures": {
                                    "properties": {
                                      "direct": {
                                        "properties": {
                                          "categoryIds": {
                                            "items": {
                                              "type": "integer",
                                              "exclusiveMinimum": 0
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "categoryIds"
                                        ]
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "direct"
                                    ]
                                  },
                                  "fallbackBehaviours": {
                                    "properties": {
                                      "skipChainalysisFailure": {
                                        "type": "boolean"
                                      },
                                      "skipUnscreenableTransaction": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedAsset": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedNetwork": {
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "skipUnscreenableTransaction",
                                      "skipUnsupportedNetwork",
                                      "skipUnsupportedAsset",
                                      "skipChainalysisFailure"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "alerts",
                                  "exposures",
                                  "addresses",
                                  "fallbackBehaviours"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "ChainalysisTransactionPrescreening"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ]
                          },
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "autoClearAfterDeliveredTimeoutSeconds": {
                                    "type": "integer",
                                    "minimum": 0
                                  },
                                  "autoTriggerTimeoutSeconds": {
                                    "type": "integer",
                                    "minimum": 0
                                  },
                                  "vendor": {
                                    "type": "string",
                                    "enum": [
                                      "Notabene"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "vendor",
                                  "autoTriggerTimeoutSeconds"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "TravelRuleTransactionPrescreening"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "TravelRuleTransactionPrescreening",
                            "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Wallets:Sign",
                    "description": "A \"`Wallets:Sign`\" activity represents any activity which involves signing with a wallet. Currently, in our API, these can be:\n\n* a Transfer Request (created using the endpoint [Transfer Asset from Wallet](https://docs.dfns.co/api-reference/wallets/transfer-asset))\n* a Transaction Request (created using the endpoint [Broadcast Transaction from Wallet](https://docs.dfns.co/api-reference/wallets/sign-and-broadcast-transaction))\n* a Signature Request (created using the endpoint [Generate Signature from Wallet](https://docs.dfns.co/api-reference/keys/generate-signature))\n"
                  },
                  {
                    "properties": {
                      "action": {
                        "oneOf": [
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "NoAction"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "title": "NoAction",
                            "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                          }
                        ]
                      },
                      "activityKind": {
                        "type": "string",
                        "enum": [
                          "Wallets:IncomingTransaction"
                        ]
                      },
                      "filters": {
                        "properties": {
                          "walletId": {
                            "properties": {
                              "in": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "in"
                            ]
                          },
                          "walletTags": {
                            "properties": {
                              "hasAll": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              },
                              "hasAny": {
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "type": "array",
                                "maxItems": 100,
                                "minItems": 1
                              }
                            },
                            "additionalProperties": false,
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object"
                      },
                      "name": {
                        "type": "string"
                      },
                      "rule": {
                        "oneOf": [
                          {
                            "properties": {
                              "configuration": {
                                "properties": {
                                  "alerts": {
                                    "properties": {
                                      "alertLevel": {
                                        "type": "string",
                                        "enum": [
                                          "LOW",
                                          "MEDIUM",
                                          "HIGH",
                                          "SEVERE"
                                        ]
                                      },
                                      "categoryIds": {
                                        "items": {
                                          "type": "integer",
                                          "exclusiveMinimum": 0
                                        },
                                        "type": "array"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "alertLevel",
                                      "categoryIds"
                                    ]
                                  },
                                  "exposures": {
                                    "properties": {
                                      "direct": {
                                        "properties": {
                                          "categoryIds": {
                                            "items": {
                                              "type": "integer",
                                              "exclusiveMinimum": 0
                                            },
                                            "type": "array"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "categoryIds"
                                        ]
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "direct"
                                    ]
                                  },
                                  "fallbackBehaviours": {
                                    "properties": {
                                      "skipChainalysisFailure": {
                                        "type": "boolean"
                                      },
                                      "skipUnscreenableTransaction": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedAsset": {
                                        "type": "boolean"
                                      },
                                      "skipUnsupportedNetwork": {
                                        "type": "boolean"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "skipUnscreenableTransaction",
                                      "skipUnsupportedNetwork",
                                      "skipUnsupportedAsset",
                                      "skipChainalysisFailure"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "alerts",
                                  "exposures",
                                  "fallbackBehaviours"
                                ]
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "ChainalysisTransactionScreening"
                                ]
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "configuration"
                            ],
                            "title": "ChainalysisTransactionPrescreening",
                            "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "name",
                      "activityKind",
                      "rule",
                      "action"
                    ],
                    "title": "Wallets:IncomingTransaction",
                    "description": "A \"`Wallets:IncomingTransaction`\" activity represents when our indexers detected an incoming transaction into a wallet. This activity kind has to be used with the rule kind \"`ChainalysisTransactionScreening`\" (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page), and the action kind \"`NoAction`\", meaning that no actual action will be taken as a result of the Chainalysis screening, other than notifying you through a webhook event if the policy is triggered. The reason for that, is that the incoming transaction is already on-chain, so the funds are already in the wallet, we cannot block that transfer on chain."
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Alias:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Alias:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Permissions:Assign"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "permissionId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "permissionId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Permissions:Assign"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Permissions:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "permissionId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "permissionId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Permissions:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "properties": {
                            "approvalGroups": {
                              "items": {
                                "properties": {
                                  "approvers": {
                                    "properties": {
                                      "userId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "initiatorCanApprove": {
                                    "type": "boolean",
                                    "description": "Whether the initiator of the activity can participate in the approval."
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "quorum": {
                                    "type": "integer",
                                    "minimum": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "quorum",
                                  "approvers"
                                ]
                              },
                              "type": "array",
                              "minItems": 1
                            },
                            "autoRejectTimeout": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "RequestApproval"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "approvalGroups"
                          ],
                          "title": "RequestApproval",
                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Policies:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "policyId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "policyId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Policies:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "NoAction"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "NoAction",
                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Wallets:Sign"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "walletId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            },
                            "walletTags": {
                              "properties": {
                                "hasAll": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                },
                                "hasAny": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "oneOf": [
                            {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "addresses": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "description": "Whitelisted recipient addresses"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "addresses"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionRecipientWhitelist"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionRecipientWhitelist",
                              "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "currency": {
                                      "type": "string",
                                      "enum": [
                                        "USD"
                                      ],
                                      "description": "Fiat currency, currently only `USD`"
                                    },
                                    "limit": {
                                      "type": "number",
                                      "description": "Amount limit in `currency`"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "currency"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionAmountLimit"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionAmountLimit",
                              "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "currency": {
                                      "type": "string",
                                      "enum": [
                                        "USD"
                                      ],
                                      "description": "Currency for the amount limit above"
                                    },
                                    "limit": {
                                      "type": "number",
                                      "description": "Amount limit in `currency`"
                                    },
                                    "timeframe": {
                                      "type": "integer",
                                      "maximum": 43200,
                                      "minimum": 1,
                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "currency",
                                    "timeframe"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionAmountVelocity"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionAmountVelocity",
                              "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "limit": {
                                      "type": "number",
                                      "description": "Count limit"
                                    },
                                    "timeframe": {
                                      "type": "integer",
                                      "maximum": 43200,
                                      "minimum": 1,
                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "timeframe"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionCountVelocity"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionCountVelocity",
                              "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "addresses": {
                                      "properties": {
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "categoryIds"
                                      ]
                                    },
                                    "alerts": {
                                      "properties": {
                                        "alertLevel": {
                                          "type": "string",
                                          "enum": [
                                            "LOW",
                                            "MEDIUM",
                                            "HIGH",
                                            "SEVERE"
                                          ]
                                        },
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "alertLevel",
                                        "categoryIds"
                                      ]
                                    },
                                    "exposures": {
                                      "properties": {
                                        "direct": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "direct"
                                      ]
                                    },
                                    "fallbackBehaviours": {
                                      "properties": {
                                        "skipChainalysisFailure": {
                                          "type": "boolean"
                                        },
                                        "skipUnscreenableTransaction": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedAsset": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedNetwork": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "skipUnscreenableTransaction",
                                        "skipUnsupportedNetwork",
                                        "skipUnsupportedAsset",
                                        "skipChainalysisFailure"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "alerts",
                                    "exposures",
                                    "addresses",
                                    "fallbackBehaviours"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "ChainalysisTransactionPrescreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ]
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "autoClearAfterDeliveredTimeoutSeconds": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "autoTriggerTimeoutSeconds": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "vendor": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "vendor",
                                    "autoTriggerTimeoutSeconds"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TravelRuleTransactionPrescreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TravelRuleTransactionPrescreening",
                              "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Wallets:Sign"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "NoAction"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "NoAction",
                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Wallets:IncomingTransaction"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "walletId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            },
                            "walletTags": {
                              "properties": {
                                "hasAll": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                },
                                "hasAny": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "oneOf": [
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "alerts": {
                                      "properties": {
                                        "alertLevel": {
                                          "type": "string",
                                          "enum": [
                                            "LOW",
                                            "MEDIUM",
                                            "HIGH",
                                            "SEVERE"
                                          ]
                                        },
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "alertLevel",
                                        "categoryIds"
                                      ]
                                    },
                                    "exposures": {
                                      "properties": {
                                        "direct": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "direct"
                                      ]
                                    },
                                    "fallbackBehaviours": {
                                      "properties": {
                                        "skipChainalysisFailure": {
                                          "type": "boolean"
                                        },
                                        "skipUnscreenableTransaction": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedAsset": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedNetwork": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "skipUnscreenableTransaction",
                                        "skipUnsupportedNetwork",
                                        "skipUnsupportedAsset",
                                        "skipChainalysisFailure"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "alerts",
                                    "exposures",
                                    "fallbackBehaviours"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "ChainalysisTransactionScreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "ChainalysisTransactionPrescreening",
                              "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Wallets:IncomingTransaction"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Update`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete Policy",
        "description": "Delete an existing policy.",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Alias:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Alias:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Permissions:Assign"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "permissionId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "permissionId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Permissions:Assign"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Permissions:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "permissionId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "permissionId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Permissions:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "properties": {
                            "approvalGroups": {
                              "items": {
                                "properties": {
                                  "approvers": {
                                    "properties": {
                                      "userId": {
                                        "properties": {
                                          "in": {
                                            "items": {
                                              "type": "string",
                                              "minLength": 1
                                            },
                                            "type": "array",
                                            "maxItems": 100,
                                            "minItems": 1
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "in"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object"
                                  },
                                  "initiatorCanApprove": {
                                    "type": "boolean",
                                    "description": "Whether the initiator of the activity can participate in the approval."
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "quorum": {
                                    "type": "integer",
                                    "minimum": 1
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "quorum",
                                  "approvers"
                                ]
                              },
                              "type": "array",
                              "minItems": 1
                            },
                            "autoRejectTimeout": {
                              "type": "integer",
                              "minimum": 1
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "RequestApproval"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "approvalGroups"
                          ],
                          "title": "RequestApproval",
                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Policies:Modify"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "policyId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "policyId"
                          ]
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "properties": {
                            "configuration": {
                              "additionalProperties": false,
                              "type": "object"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "AlwaysTrigger"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "AlwaysTrigger",
                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Policies:Modify"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "approvalGroups": {
                                  "items": {
                                    "properties": {
                                      "approvers": {
                                        "properties": {
                                          "userId": {
                                            "properties": {
                                              "in": {
                                                "items": {
                                                  "type": "string",
                                                  "minLength": 1
                                                },
                                                "type": "array",
                                                "maxItems": 100,
                                                "minItems": 1
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "in"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object"
                                      },
                                      "initiatorCanApprove": {
                                        "type": "boolean",
                                        "description": "Whether the initiator of the activity can participate in the approval."
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "quorum": {
                                        "type": "integer",
                                        "minimum": 1
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "quorum",
                                      "approvers"
                                    ]
                                  },
                                  "type": "array",
                                  "minItems": 1
                                },
                                "autoRejectTimeout": {
                                  "type": "integer",
                                  "minimum": 1
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "RequestApproval"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "approvalGroups"
                              ],
                              "title": "RequestApproval",
                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Block"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "Block",
                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                            },
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "NoAction"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "NoAction",
                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Wallets:Sign"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "walletId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            },
                            "walletTags": {
                              "properties": {
                                "hasAll": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                },
                                "hasAny": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "oneOf": [
                            {
                              "properties": {
                                "configuration": {
                                  "additionalProperties": false,
                                  "type": "object"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "AlwaysTrigger"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "AlwaysTrigger",
                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "addresses": {
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": "array",
                                      "description": "Whitelisted recipient addresses"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "addresses"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionRecipientWhitelist"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionRecipientWhitelist",
                              "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "currency": {
                                      "type": "string",
                                      "enum": [
                                        "USD"
                                      ],
                                      "description": "Fiat currency, currently only `USD`"
                                    },
                                    "limit": {
                                      "type": "number",
                                      "description": "Amount limit in `currency`"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "currency"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionAmountLimit"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionAmountLimit",
                              "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "currency": {
                                      "type": "string",
                                      "enum": [
                                        "USD"
                                      ],
                                      "description": "Currency for the amount limit above"
                                    },
                                    "limit": {
                                      "type": "number",
                                      "description": "Amount limit in `currency`"
                                    },
                                    "timeframe": {
                                      "type": "integer",
                                      "maximum": 43200,
                                      "minimum": 1,
                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "currency",
                                    "timeframe"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionAmountVelocity"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionAmountVelocity",
                              "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "limit": {
                                      "type": "number",
                                      "description": "Count limit"
                                    },
                                    "timeframe": {
                                      "type": "integer",
                                      "maximum": 43200,
                                      "minimum": 1,
                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "limit",
                                    "timeframe"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TransactionCountVelocity"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TransactionCountVelocity",
                              "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "addresses": {
                                      "properties": {
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "categoryIds"
                                      ]
                                    },
                                    "alerts": {
                                      "properties": {
                                        "alertLevel": {
                                          "type": "string",
                                          "enum": [
                                            "LOW",
                                            "MEDIUM",
                                            "HIGH",
                                            "SEVERE"
                                          ]
                                        },
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "alertLevel",
                                        "categoryIds"
                                      ]
                                    },
                                    "exposures": {
                                      "properties": {
                                        "direct": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "direct"
                                      ]
                                    },
                                    "fallbackBehaviours": {
                                      "properties": {
                                        "skipChainalysisFailure": {
                                          "type": "boolean"
                                        },
                                        "skipUnscreenableTransaction": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedAsset": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedNetwork": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "skipUnscreenableTransaction",
                                        "skipUnsupportedNetwork",
                                        "skipUnsupportedAsset",
                                        "skipChainalysisFailure"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "alerts",
                                    "exposures",
                                    "addresses",
                                    "fallbackBehaviours"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "ChainalysisTransactionPrescreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ]
                            },
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "autoClearAfterDeliveredTimeoutSeconds": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "autoTriggerTimeoutSeconds": {
                                      "type": "integer",
                                      "minimum": 0
                                    },
                                    "vendor": {
                                      "type": "string",
                                      "enum": [
                                        "Notabene"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "vendor",
                                    "autoTriggerTimeoutSeconds"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "TravelRuleTransactionPrescreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "TravelRuleTransactionPrescreening",
                              "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Wallets:Sign"
                    },
                    {
                      "properties": {
                        "action": {
                          "oneOf": [
                            {
                              "properties": {
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "NoAction"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind"
                              ],
                              "title": "NoAction",
                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                            }
                          ]
                        },
                        "activityKind": {
                          "type": "string",
                          "enum": [
                            "Wallets:IncomingTransaction"
                          ]
                        },
                        "dateCreated": {
                          "type": "string"
                        },
                        "dateUpdated": {
                          "type": "string"
                        },
                        "filters": {
                          "properties": {
                            "walletId": {
                              "properties": {
                                "in": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "in"
                              ]
                            },
                            "walletTags": {
                              "properties": {
                                "hasAll": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                },
                                "hasAny": {
                                  "items": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": "array",
                                  "maxItems": 100,
                                  "minItems": 1
                                }
                              },
                              "additionalProperties": false,
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object"
                        },
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "rule": {
                          "oneOf": [
                            {
                              "properties": {
                                "configuration": {
                                  "properties": {
                                    "alerts": {
                                      "properties": {
                                        "alertLevel": {
                                          "type": "string",
                                          "enum": [
                                            "LOW",
                                            "MEDIUM",
                                            "HIGH",
                                            "SEVERE"
                                          ]
                                        },
                                        "categoryIds": {
                                          "items": {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "alertLevel",
                                        "categoryIds"
                                      ]
                                    },
                                    "exposures": {
                                      "properties": {
                                        "direct": {
                                          "properties": {
                                            "categoryIds": {
                                              "items": {
                                                "type": "integer",
                                                "exclusiveMinimum": 0
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "categoryIds"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "direct"
                                      ]
                                    },
                                    "fallbackBehaviours": {
                                      "properties": {
                                        "skipChainalysisFailure": {
                                          "type": "boolean"
                                        },
                                        "skipUnscreenableTransaction": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedAsset": {
                                          "type": "boolean"
                                        },
                                        "skipUnsupportedNetwork": {
                                          "type": "boolean"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "skipUnscreenableTransaction",
                                        "skipUnsupportedNetwork",
                                        "skipUnsupportedAsset",
                                        "skipChainalysisFailure"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "alerts",
                                    "exposures",
                                    "fallbackBehaviours"
                                  ]
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "ChainalysisTransactionScreening"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "kind",
                                "configuration"
                              ],
                              "title": "ChainalysisTransactionPrescreening",
                              "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                            }
                          ]
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "Active",
                            "Archived"
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "id",
                        "name",
                        "status",
                        "activityKind",
                        "rule",
                        "action"
                      ],
                      "title": "Wallets:IncomingTransaction"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Archive`: Always required."
        }
      }
    },
    "/v2/policy-approvals": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "List Approvals",
        "description": "Retrieve the list of pending approval requests.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "Pending",
                "Approved",
                "Denied",
                "Expired"
              ]
            }
          },
          {
            "name": "initiatorId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approverId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "activity": {
                            "oneOf": [
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Wallets:Sign"
                                    ]
                                  },
                                  "signatureRequest": {
                                    "properties": {
                                      "approvalId": {
                                        "type": "string"
                                      },
                                      "dateConfirmed": {
                                        "type": "string"
                                      },
                                      "datePolicyResolved": {
                                        "type": "string"
                                      },
                                      "dateRequested": {
                                        "type": "string"
                                      },
                                      "dateSigned": {
                                        "type": "string"
                                      },
                                      "externalId": {
                                        "type": "string"
                                      },
                                      "fee": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "keyId": {
                                        "type": "string"
                                      },
                                      "network": {
                                        "$ref": "#/components/schemas/Network",
                                        "summary": null,
                                        "description": null
                                      },
                                      "reason": {
                                        "type": "string"
                                      },
                                      "requestBody": {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "hash": {
                                                "type": "string",
                                                "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                                                "description": "32-byte hash in hex encoded format."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Hash"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "taprootMerkleRoot": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                                                "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "hash"
                                            ],
                                            "title": "Hash",
                                            "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Message"
                                                ]
                                              },
                                              "message": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "An arbitrary hex encoded message."
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "message"
                                            ],
                                            "title": "Message",
                                            "description": "Signs an arbitrary hex encoded arbitrary message."
                                          },
                                          {
                                            "properties": {
                                              "address": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The address of the contract the signer's EOA will be delegated to."
                                              },
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "chainId": {
                                                "type": "number",
                                                "description": "Chain ID."
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Eip7702"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "nonce": {
                                                "type": "number",
                                                "description": "The current nonce of the signer EOA."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "address",
                                              "nonce",
                                              "chainId"
                                            ],
                                            "title": "EIP-7702 Authorization",
                                            "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Transaction"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "transaction": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The unsigned hex-encoded transaction."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "transaction"
                                            ],
                                            "title": "Transaction",
                                            "description": "Signs an unsigned transaction."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "domain": {
                                                "properties": {
                                                  "chainId": {
                                                    "anyOf": [
                                                      {
                                                        "type": "integer",
                                                        "exclusiveMinimum": 0
                                                      },
                                                      {
                                                        "type": "string"
                                                      }
                                                    ],
                                                    "description": "Chain ID."
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "description": "Name of the signing domain."
                                                  },
                                                  "salt": {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]{64}$",
                                                    "description": "32-byte value as a last-resort domain separator."
                                                  },
                                                  "verifyingContract": {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]{40}$",
                                                    "description": "The address of the contract that will verify the signature."
                                                  },
                                                  "version": {
                                                    "type": "string",
                                                    "description": "Current major version of the signing domain."
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "description": "Domain separator."
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Eip712"
                                                ]
                                              },
                                              "message": {
                                                "additionalProperties": {},
                                                "type": "object",
                                                "description": "Structured message to sign."
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "types": {
                                                "additionalProperties": {
                                                  "items": {
                                                    "properties": {
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "type": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "name",
                                                      "type"
                                                    ]
                                                  },
                                                  "type": "array"
                                                },
                                                "type": "object",
                                                "description": "Type definitions."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "types",
                                              "domain",
                                              "message"
                                            ],
                                            "title": "EIP-712 TypedData",
                                            "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Psbt"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "psbt": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The hex encoded PSBT."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "psbt"
                                            ],
                                            "title": "PSBT",
                                            "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "format": {
                                                "type": "string",
                                                "enum": [
                                                  "Simple",
                                                  "Full"
                                                ],
                                                "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Bip322"
                                                ]
                                              },
                                              "message": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The generic message hex encoded."
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "message"
                                            ],
                                            "title": "BIP-322",
                                            "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "command": {
                                                "type": "string",
                                                "description": "The Pact command JSON, serialized into a string."
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "PactCommand"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "command"
                                            ],
                                            "title": "PactCommand",
                                            "description": "Signs an unsigned Pact command."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "SignDocDirect"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "signDoc": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The hex encoded `SignDoc` Protobuf."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "signDoc"
                                            ],
                                            "title": "SignDocDirect",
                                            "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "SignerPayload"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "payload": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                                  },
                                                  {
                                                    "type": "object"
                                                  }
                                                ],
                                                "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "payload"
                                            ],
                                            "title": "SignerPayload",
                                            "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                          },
                                          {
                                            "properties": {
                                              "blockchainKind": {
                                                "$ref": "#/components/schemas/BlockchainKind",
                                                "summary": null,
                                                "description": null
                                              },
                                              "context": {
                                                "type": "string",
                                                "enum": [
                                                  "Signature1"
                                                ]
                                              },
                                              "externalAad": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Cip8"
                                                ]
                                              },
                                              "network": {
                                                "$ref": "#/components/schemas/Network",
                                                "summary": null,
                                                "description": null
                                              },
                                              "payload": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The generic message hex encoded."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "context"
                                            ],
                                            "title": "CIP-8",
                                            "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                          }
                                        ]
                                      },
                                      "requester": {
                                        "properties": {
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "userId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "userId"
                                        ]
                                      },
                                      "signature": {
                                        "properties": {
                                          "encoded": {
                                            "type": "string"
                                          },
                                          "r": {
                                            "type": "string"
                                          },
                                          "recid": {
                                            "type": "number"
                                          },
                                          "s": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "r",
                                          "s"
                                        ]
                                      },
                                      "signatures": {
                                        "items": {
                                          "properties": {
                                            "encoded": {
                                              "type": "string"
                                            },
                                            "r": {
                                              "type": "string"
                                            },
                                            "recid": {
                                              "type": "number"
                                            },
                                            "s": {
                                              "type": "string"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "r",
                                            "s"
                                          ]
                                        },
                                        "type": "array"
                                      },
                                      "signedData": {
                                        "type": "string"
                                      },
                                      "status": {
                                        "type": "string",
                                        "enum": [
                                          "Pending",
                                          "Executing",
                                          "Signed",
                                          "Confirmed",
                                          "Failed",
                                          "Rejected"
                                        ]
                                      },
                                      "txHash": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "keyId",
                                      "requester",
                                      "requestBody",
                                      "status",
                                      "dateRequested"
                                    ]
                                  },
                                  "swapRequest": {
                                    "$ref": "#/components/schemas/Swap",
                                    "summary": null,
                                    "description": null
                                  },
                                  "transactionRequest": {
                                    "properties": {
                                      "approvalId": {
                                        "type": "string"
                                      },
                                      "dateBroadcasted": {
                                        "type": "string"
                                      },
                                      "dateConfirmed": {
                                        "type": "string"
                                      },
                                      "datePolicyResolved": {
                                        "type": "string"
                                      },
                                      "dateRequested": {
                                        "type": "string"
                                      },
                                      "externalId": {
                                        "type": "string"
                                      },
                                      "fee": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "network": {
                                        "$ref": "#/components/schemas/Network",
                                        "summary": null,
                                        "description": null
                                      },
                                      "reason": {
                                        "type": "string"
                                      },
                                      "requestBody": {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Transaction"
                                                ]
                                              },
                                              "transaction": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                                  },
                                                  {
                                                    "type": "object"
                                                  }
                                                ],
                                                "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "transaction"
                                            ],
                                            "title": "Transaction",
                                            "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                                          },
                                          {
                                            "properties": {
                                              "data": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "gasLimit": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Evm"
                                                ]
                                              },
                                              "nonce": {
                                                "anyOf": [
                                                  {
                                                    "type": "integer",
                                                    "minimum": 0
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ],
                                                "description": "The current nonce of the signer EOA."
                                              },
                                              "to": {
                                                "type": "string",
                                                "pattern": "^0x[0-9a-fA-F]{40}$"
                                              },
                                              "value": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "EVM Transaction",
                                            "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                                          },
                                          {
                                            "properties": {
                                              "data": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "gasLimit": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Eip1559"
                                                ]
                                              },
                                              "maxFeePerGas": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              },
                                              "maxPriorityFeePerGas": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              },
                                              "nonce": {
                                                "anyOf": [
                                                  {
                                                    "type": "integer",
                                                    "minimum": 0
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              },
                                              "to": {
                                                "type": "string",
                                                "pattern": "^0x[0-9a-fA-F]{40}$"
                                              },
                                              "value": {
                                                "anyOf": [
                                                  {
                                                    "type": "string",
                                                    "pattern": "^\\d+$"
                                                  },
                                                  {
                                                    "type": "string",
                                                    "pattern": "^0x[0-9a-fA-F]*$"
                                                  }
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "EVM EIP-1559",
                                            "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                                          },
                                          {
                                            "properties": {
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Psbt"
                                                ]
                                              },
                                              "psbt": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "The hex encoded PSBT."
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "psbt"
                                            ],
                                            "title": "PSBT",
                                            "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                          },
                                          {
                                            "properties": {
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "Json"
                                                ]
                                              },
                                              "transaction": {
                                                "type": "object"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "transaction"
                                            ],
                                            "title": "PSBT",
                                            "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                          },
                                          {
                                            "properties": {
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "SignDocDirect"
                                                ]
                                              },
                                              "signDoc": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "signDoc"
                                            ],
                                            "title": "SignDocDirect",
                                            "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                                          },
                                          {
                                            "properties": {
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "feeSponsorId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "UserOperations"
                                                ]
                                              },
                                              "userOperations": {
                                                "items": {
                                                  "properties": {
                                                    "data": {
                                                      "type": "string",
                                                      "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                      "description": "ABI encoded function call data in hex format."
                                                    },
                                                    "to": {
                                                      "type": "string",
                                                      "pattern": "^0x[0-9a-fA-F]{40}$",
                                                      "description": "The destination address or target contract."
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "pattern": "^\\d+$",
                                                      "description": "The amount of native tokens to transfer in minimum denomination."
                                                    }
                                                  },
                                                  "type": "object",
                                                  "required": [
                                                    "to"
                                                  ]
                                                },
                                                "type": "array"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "userOperations",
                                              "feeSponsorId"
                                            ],
                                            "title": "EVM Sponsored transaction",
                                            "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                                          },
                                          {
                                            "properties": {
                                              "decision": {
                                                "type": "string",
                                                "enum": [
                                                  "Accept",
                                                  "Reject"
                                                ]
                                              },
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "SettleOffer"
                                                ]
                                              },
                                              "txHash": {
                                                "type": "string"
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind",
                                              "txHash",
                                              "decision"
                                            ],
                                            "title": "Canton Offer Settlement",
                                            "description": "Settle a Canton Offer."
                                          },
                                          {
                                            "properties": {
                                              "externalId": {
                                                "type": "string",
                                                "maxLength": 50,
                                                "minLength": 1,
                                                "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                              },
                                              "kind": {
                                                "type": "string",
                                                "enum": [
                                                  "TransferPreapproval"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "kind"
                                            ],
                                            "title": "Canton Transfer Preapproval",
                                            "description": "Enable canton coin auto approval."
                                          }
                                        ]
                                      },
                                      "requester": {
                                        "properties": {
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "userId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "userId"
                                        ]
                                      },
                                      "status": {
                                        "type": "string",
                                        "enum": [
                                          "Pending",
                                          "Executing",
                                          "Broadcasted",
                                          "Confirmed",
                                          "Failed",
                                          "Rejected"
                                        ]
                                      },
                                      "txHash": {
                                        "type": "string"
                                      },
                                      "walletId": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "walletId",
                                      "network",
                                      "requester",
                                      "requestBody",
                                      "status",
                                      "dateRequested"
                                    ]
                                  },
                                  "transferRequest": {
                                    "$ref": "#/components/schemas/TransferRequest",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind"
                                ],
                                "title": "Wallets:Sign",
                                "description": "\n      A \"`Wallets:Sign`\" activity represents any activity which involves signing with a wallet. Currently, in our API, these can be:\n\n* a Transfer Request (created using the endpoint [Transfer Asset from Wallet](https://docs.dfns.co/api-reference/wallets/transfer-asset))\n* a Transaction Request (created using the endpoint [Broadcast Transaction from Wallet](https://docs.dfns.co/api-reference/wallets/sign-and-broadcast-transaction))\n* a Signature Request (created using the endpoint [Generate Signature from Wallet](https://docs.dfns.co/api-reference/keys/generate-signature))\n"
                              },
                              {
                                "properties": {
                                  "blockchainEvent": {
                                    "oneOf": [
                                      {
                                        "properties": {
                                          "balanceId": {
                                            "type": "string"
                                          },
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "decimals": {
                                            "type": "number",
                                            "description": "@deprecated use metadata.asset.decimals instead"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "NativeTransfer"
                                            ]
                                          },
                                          "liquidityPool": {
                                            "type": "string"
                                          },
                                          "memo": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "symbol": {
                                            "type": "string",
                                            "description": "@deprecated use metadata.asset.symbol instead"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean",
                                            "description": "@deprecated use metadata.asset.verified instead"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "value",
                                          "symbol",
                                          "decimals"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Aip21Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "metadataAddress": {
                                            "type": "string"
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "metadataAddress",
                                          "from",
                                          "to",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "assetId": {
                                            "type": "string"
                                          },
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "clawback": {
                                            "type": "boolean"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "AsaTransfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "optIn": {
                                            "type": "boolean"
                                          },
                                          "optOut": {
                                            "type": "boolean"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "assetId",
                                          "from",
                                          "to",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "assetId": {
                                            "type": "string"
                                          },
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "AssetTransfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "assetId",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "coin": {
                                            "type": "string"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "CoinTransfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "tos": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "coin",
                                          "from",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "contract": {
                                            "type": "string"
                                          },
                                          "decimals": {
                                            "type": "number",
                                            "description": "@deprecated use metadata.asset.decimals instead"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Erc20Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "symbol": {
                                            "type": "string",
                                            "description": "@deprecated use metadata.asset.symbol instead"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean",
                                            "description": "@deprecated use metadata.asset.verified instead"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "contract",
                                          "from",
                                          "to",
                                          "value",
                                          "decimals"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "contract": {
                                            "type": "string"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Erc721Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "symbol": {
                                            "type": "string",
                                            "description": "@deprecated use metadata.asset.symbol instead"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean",
                                            "description": "@deprecated use metadata.asset.verified instead"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "contract",
                                          "from",
                                          "to",
                                          "tokenId"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Hip17Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "serialNumber": {
                                            "type": "string"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "tokenId",
                                          "serialNumber"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "froms": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "HtsTransfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "tos": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "froms",
                                          "tos",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Kip5Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "module": {
                                            "type": "string"
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "sourceChain": {
                                            "type": "string"
                                          },
                                          "targetChain": {
                                            "type": "string"
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "value",
                                          "module"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "coin": {
                                            "type": "string"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "LockedCoinTransfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "tos": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "coin",
                                          "from",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "assetCode": {
                                            "type": "string"
                                          },
                                          "balanceId": {
                                            "type": "string"
                                          },
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "issuer": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Sep41Transfer"
                                            ]
                                          },
                                          "liquidityPool": {
                                            "type": "string"
                                          },
                                          "memo": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "issuer",
                                          "assetCode",
                                          "from",
                                          "to",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "SplTransfer",
                                              "Spl2022Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "mint": {
                                            "type": "string"
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "mint",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Tep74Transfer"
                                            ]
                                          },
                                          "master": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "master",
                                          "from",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Trc10Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "tokenId",
                                          "from",
                                          "to",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "contract": {
                                            "type": "string"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Trc20Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "contract",
                                          "from",
                                          "to",
                                          "value"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "contract": {
                                            "type": "string"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "from": {
                                            "type": "string"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "Trc721Transfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "to": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "contract",
                                          "from",
                                          "to",
                                          "tokenId"
                                        ]
                                      },
                                      {
                                        "properties": {
                                          "blockNumber": {
                                            "type": "number"
                                          },
                                          "direction": {
                                            "type": "string",
                                            "enum": [
                                              "In",
                                              "Out"
                                            ]
                                          },
                                          "fee": {
                                            "type": "string"
                                          },
                                          "froms": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "index": {
                                            "type": "string"
                                          },
                                          "kind": {
                                            "type": "string",
                                            "enum": [
                                              "UtxoTransfer"
                                            ]
                                          },
                                          "metadata": {
                                            "properties": {
                                              "asset": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              },
                                              "fee": {
                                                "properties": {
                                                  "decimals": {
                                                    "type": "integer"
                                                  },
                                                  "quotes": {
                                                    "properties": {
                                                      "EUR": {
                                                        "type": "number"
                                                      },
                                                      "USD": {
                                                        "type": "number"
                                                      }
                                                    },
                                                    "type": "object"
                                                  },
                                                  "symbol": {
                                                    "type": "string"
                                                  },
                                                  "verified": {
                                                    "type": "boolean"
                                                  }
                                                },
                                                "type": "object"
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "asset"
                                            ]
                                          },
                                          "network": {
                                            "$ref": "#/components/schemas/Network",
                                            "summary": null,
                                            "description": null
                                          },
                                          "timestamp": {
                                            "type": "string"
                                          },
                                          "tos": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "txHash": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          },
                                          "walletId": {
                                            "type": "string"
                                          }
                                        },
                                        "type": "object",
                                        "required": [
                                          "walletId",
                                          "direction",
                                          "network",
                                          "blockNumber",
                                          "txHash",
                                          "timestamp",
                                          "metadata",
                                          "kind",
                                          "froms",
                                          "tos",
                                          "value"
                                        ]
                                      }
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Wallets:IncomingTransaction"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "blockchainEvent"
                                ],
                                "title": "Wallets:IncomingTransaction",
                                "description": "A \"`Wallets:IncomingTransaction`\" activity represents when our indexers detected an incoming transaction into a wallet. This activity kind has to be used with the rule kind \"`ChainalysisTransactionScreening`\" (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page), and the action kind \"`NoAction`\", meaning that no actual action will be taken as a result of the Chainalysis screening, other than notifying you through a webhook event if the policy is triggered. The reason for that, is that the incoming transaction is already on-chain, so the funds are already in the wallet, we cannot block that transfer on chain."
                              },
                              {
                                "properties": {
                                  "changeRequest": {
                                    "properties": {
                                      "approvalId": {
                                        "type": "string"
                                      },
                                      "body": {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "action": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "approvalGroups": {
                                                        "items": {
                                                          "properties": {
                                                            "approvers": {
                                                              "properties": {
                                                                "userId": {
                                                                  "properties": {
                                                                    "in": {
                                                                      "items": {
                                                                        "type": "string",
                                                                        "minLength": 1
                                                                      },
                                                                      "type": "array",
                                                                      "maxItems": 100,
                                                                      "minItems": 1
                                                                    }
                                                                  },
                                                                  "additionalProperties": false,
                                                                  "type": "object",
                                                                  "required": [
                                                                    "in"
                                                                  ]
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object"
                                                            },
                                                            "initiatorCanApprove": {
                                                              "type": "boolean",
                                                              "description": "Whether the initiator of the activity can participate in the approval."
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "quorum": {
                                                              "type": "integer",
                                                              "minimum": 1
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object",
                                                          "required": [
                                                            "quorum",
                                                            "approvers"
                                                          ]
                                                        },
                                                        "type": "array",
                                                        "minItems": 1
                                                      },
                                                      "autoRejectTimeout": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "RequestApproval"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "approvalGroups"
                                                    ],
                                                    "title": "RequestApproval",
                                                    "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                                  },
                                                  {
                                                    "properties": {
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "Block"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "Block",
                                                    "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                                  }
                                                ]
                                              },
                                              "activityKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Alias:Modify"
                                                ]
                                              },
                                              "dateCreated": {
                                                "type": "string"
                                              },
                                              "dateUpdated": {
                                                "type": "string"
                                              },
                                              "filters": {
                                                "type": "object"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "rule": {
                                                "properties": {
                                                  "configuration": {
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "AlwaysTrigger"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "AlwaysTrigger",
                                                "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                              },
                                              "status": {
                                                "type": "string",
                                                "enum": [
                                                  "Active",
                                                  "Archived"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "id",
                                              "name",
                                              "status",
                                              "activityKind",
                                              "rule",
                                              "action"
                                            ],
                                            "title": "Alias:Modify"
                                          },
                                          {
                                            "properties": {
                                              "action": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "approvalGroups": {
                                                        "items": {
                                                          "properties": {
                                                            "approvers": {
                                                              "properties": {
                                                                "userId": {
                                                                  "properties": {
                                                                    "in": {
                                                                      "items": {
                                                                        "type": "string",
                                                                        "minLength": 1
                                                                      },
                                                                      "type": "array",
                                                                      "maxItems": 100,
                                                                      "minItems": 1
                                                                    }
                                                                  },
                                                                  "additionalProperties": false,
                                                                  "type": "object",
                                                                  "required": [
                                                                    "in"
                                                                  ]
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object"
                                                            },
                                                            "initiatorCanApprove": {
                                                              "type": "boolean",
                                                              "description": "Whether the initiator of the activity can participate in the approval."
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "quorum": {
                                                              "type": "integer",
                                                              "minimum": 1
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object",
                                                          "required": [
                                                            "quorum",
                                                            "approvers"
                                                          ]
                                                        },
                                                        "type": "array",
                                                        "minItems": 1
                                                      },
                                                      "autoRejectTimeout": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "RequestApproval"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "approvalGroups"
                                                    ],
                                                    "title": "RequestApproval",
                                                    "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                                  },
                                                  {
                                                    "properties": {
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "Block"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "Block",
                                                    "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                                  }
                                                ]
                                              },
                                              "activityKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Permissions:Assign"
                                                ]
                                              },
                                              "dateCreated": {
                                                "type": "string"
                                              },
                                              "dateUpdated": {
                                                "type": "string"
                                              },
                                              "filters": {
                                                "properties": {
                                                  "permissionId": {
                                                    "properties": {
                                                      "in": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "in"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "permissionId"
                                                ]
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "rule": {
                                                "properties": {
                                                  "configuration": {
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "AlwaysTrigger"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "AlwaysTrigger",
                                                "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                              },
                                              "status": {
                                                "type": "string",
                                                "enum": [
                                                  "Active",
                                                  "Archived"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "id",
                                              "name",
                                              "status",
                                              "activityKind",
                                              "rule",
                                              "action"
                                            ],
                                            "title": "Permissions:Assign"
                                          },
                                          {
                                            "properties": {
                                              "action": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "approvalGroups": {
                                                        "items": {
                                                          "properties": {
                                                            "approvers": {
                                                              "properties": {
                                                                "userId": {
                                                                  "properties": {
                                                                    "in": {
                                                                      "items": {
                                                                        "type": "string",
                                                                        "minLength": 1
                                                                      },
                                                                      "type": "array",
                                                                      "maxItems": 100,
                                                                      "minItems": 1
                                                                    }
                                                                  },
                                                                  "additionalProperties": false,
                                                                  "type": "object",
                                                                  "required": [
                                                                    "in"
                                                                  ]
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object"
                                                            },
                                                            "initiatorCanApprove": {
                                                              "type": "boolean",
                                                              "description": "Whether the initiator of the activity can participate in the approval."
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "quorum": {
                                                              "type": "integer",
                                                              "minimum": 1
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object",
                                                          "required": [
                                                            "quorum",
                                                            "approvers"
                                                          ]
                                                        },
                                                        "type": "array",
                                                        "minItems": 1
                                                      },
                                                      "autoRejectTimeout": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "RequestApproval"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "approvalGroups"
                                                    ],
                                                    "title": "RequestApproval",
                                                    "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                                  },
                                                  {
                                                    "properties": {
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "Block"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "Block",
                                                    "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                                  }
                                                ]
                                              },
                                              "activityKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Permissions:Modify"
                                                ]
                                              },
                                              "dateCreated": {
                                                "type": "string"
                                              },
                                              "dateUpdated": {
                                                "type": "string"
                                              },
                                              "filters": {
                                                "properties": {
                                                  "permissionId": {
                                                    "properties": {
                                                      "in": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "in"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "permissionId"
                                                ]
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "rule": {
                                                "properties": {
                                                  "configuration": {
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "AlwaysTrigger"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "AlwaysTrigger",
                                                "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                              },
                                              "status": {
                                                "type": "string",
                                                "enum": [
                                                  "Active",
                                                  "Archived"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "id",
                                              "name",
                                              "status",
                                              "activityKind",
                                              "rule",
                                              "action"
                                            ],
                                            "title": "Permissions:Modify"
                                          },
                                          {
                                            "properties": {
                                              "action": {
                                                "properties": {
                                                  "approvalGroups": {
                                                    "items": {
                                                      "properties": {
                                                        "approvers": {
                                                          "properties": {
                                                            "userId": {
                                                              "properties": {
                                                                "in": {
                                                                  "items": {
                                                                    "type": "string",
                                                                    "minLength": 1
                                                                  },
                                                                  "type": "array",
                                                                  "maxItems": 100,
                                                                  "minItems": 1
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object",
                                                              "required": [
                                                                "in"
                                                              ]
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object"
                                                        },
                                                        "initiatorCanApprove": {
                                                          "type": "boolean",
                                                          "description": "Whether the initiator of the activity can participate in the approval."
                                                        },
                                                        "name": {
                                                          "type": "string"
                                                        },
                                                        "quorum": {
                                                          "type": "integer",
                                                          "minimum": 1
                                                        }
                                                      },
                                                      "additionalProperties": false,
                                                      "type": "object",
                                                      "required": [
                                                        "quorum",
                                                        "approvers"
                                                      ]
                                                    },
                                                    "type": "array",
                                                    "minItems": 1
                                                  },
                                                  "autoRejectTimeout": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "RequestApproval"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind",
                                                  "approvalGroups"
                                                ],
                                                "title": "RequestApproval",
                                                "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                              },
                                              "activityKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Policies:Modify"
                                                ]
                                              },
                                              "dateCreated": {
                                                "type": "string"
                                              },
                                              "dateUpdated": {
                                                "type": "string"
                                              },
                                              "filters": {
                                                "properties": {
                                                  "policyId": {
                                                    "properties": {
                                                      "in": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "in"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "policyId"
                                                ]
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "rule": {
                                                "properties": {
                                                  "configuration": {
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "kind": {
                                                    "type": "string",
                                                    "enum": [
                                                      "AlwaysTrigger"
                                                    ]
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "kind"
                                                ],
                                                "title": "AlwaysTrigger",
                                                "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                              },
                                              "status": {
                                                "type": "string",
                                                "enum": [
                                                  "Active",
                                                  "Archived"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "id",
                                              "name",
                                              "status",
                                              "activityKind",
                                              "rule",
                                              "action"
                                            ],
                                            "title": "Policies:Modify"
                                          },
                                          {
                                            "properties": {
                                              "action": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "approvalGroups": {
                                                        "items": {
                                                          "properties": {
                                                            "approvers": {
                                                              "properties": {
                                                                "userId": {
                                                                  "properties": {
                                                                    "in": {
                                                                      "items": {
                                                                        "type": "string",
                                                                        "minLength": 1
                                                                      },
                                                                      "type": "array",
                                                                      "maxItems": 100,
                                                                      "minItems": 1
                                                                    }
                                                                  },
                                                                  "additionalProperties": false,
                                                                  "type": "object",
                                                                  "required": [
                                                                    "in"
                                                                  ]
                                                                }
                                                              },
                                                              "additionalProperties": false,
                                                              "type": "object"
                                                            },
                                                            "initiatorCanApprove": {
                                                              "type": "boolean",
                                                              "description": "Whether the initiator of the activity can participate in the approval."
                                                            },
                                                            "name": {
                                                              "type": "string"
                                                            },
                                                            "quorum": {
                                                              "type": "integer",
                                                              "minimum": 1
                                                            }
                                                          },
                                                          "additionalProperties": false,
                                                          "type": "object",
                                                          "required": [
                                                            "quorum",
                                                            "approvers"
                                                          ]
                                                        },
                                                        "type": "array",
                                                        "minItems": 1
                                                      },
                                                      "autoRejectTimeout": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "RequestApproval"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "approvalGroups"
                                                    ],
                                                    "title": "RequestApproval",
                                                    "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                                  },
                                                  {
                                                    "properties": {
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "Block"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "Block",
                                                    "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                                  },
                                                  {
                                                    "properties": {
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "NoAction"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "NoAction",
                                                    "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                                  }
                                                ]
                                              },
                                              "activityKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Wallets:Sign"
                                                ]
                                              },
                                              "dateCreated": {
                                                "type": "string"
                                              },
                                              "dateUpdated": {
                                                "type": "string"
                                              },
                                              "filters": {
                                                "properties": {
                                                  "walletId": {
                                                    "properties": {
                                                      "in": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "in"
                                                    ]
                                                  },
                                                  "walletTags": {
                                                    "properties": {
                                                      "hasAll": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      },
                                                      "hasAny": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "rule": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "AlwaysTrigger"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "AlwaysTrigger",
                                                    "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                                  },
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "addresses": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "description": "Whitelisted recipient addresses"
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "addresses"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "TransactionRecipientWhitelist"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ],
                                                    "title": "TransactionRecipientWhitelist",
                                                    "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                                  },
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "currency": {
                                                            "type": "string",
                                                            "enum": [
                                                              "USD"
                                                            ],
                                                            "description": "Fiat currency, currently only `USD`"
                                                          },
                                                          "limit": {
                                                            "type": "number",
                                                            "description": "Amount limit in `currency`"
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "limit",
                                                          "currency"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "TransactionAmountLimit"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ],
                                                    "title": "TransactionAmountLimit",
                                                    "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                                  },
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "currency": {
                                                            "type": "string",
                                                            "enum": [
                                                              "USD"
                                                            ],
                                                            "description": "Currency for the amount limit above"
                                                          },
                                                          "limit": {
                                                            "type": "number",
                                                            "description": "Amount limit in `currency`"
                                                          },
                                                          "timeframe": {
                                                            "type": "integer",
                                                            "maximum": 43200,
                                                            "minimum": 1,
                                                            "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "limit",
                                                          "currency",
                                                          "timeframe"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "TransactionAmountVelocity"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ],
                                                    "title": "TransactionAmountVelocity",
                                                    "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                                  },
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "limit": {
                                                            "type": "number",
                                                            "description": "Count limit"
                                                          },
                                                          "timeframe": {
                                                            "type": "integer",
                                                            "maximum": 43200,
                                                            "minimum": 1,
                                                            "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "limit",
                                                          "timeframe"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "TransactionCountVelocity"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ],
                                                    "title": "TransactionCountVelocity",
                                                    "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                                  },
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "addresses": {
                                                            "properties": {
                                                              "categoryIds": {
                                                                "items": {
                                                                  "type": "integer",
                                                                  "exclusiveMinimum": 0
                                                                },
                                                                "type": "array"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "categoryIds"
                                                            ]
                                                          },
                                                          "alerts": {
                                                            "properties": {
                                                              "alertLevel": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "LOW",
                                                                  "MEDIUM",
                                                                  "HIGH",
                                                                  "SEVERE"
                                                                ]
                                                              },
                                                              "categoryIds": {
                                                                "items": {
                                                                  "type": "integer",
                                                                  "exclusiveMinimum": 0
                                                                },
                                                                "type": "array"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "alertLevel",
                                                              "categoryIds"
                                                            ]
                                                          },
                                                          "exposures": {
                                                            "properties": {
                                                              "direct": {
                                                                "properties": {
                                                                  "categoryIds": {
                                                                    "items": {
                                                                      "type": "integer",
                                                                      "exclusiveMinimum": 0
                                                                    },
                                                                    "type": "array"
                                                                  }
                                                                },
                                                                "type": "object",
                                                                "required": [
                                                                  "categoryIds"
                                                                ]
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "direct"
                                                            ]
                                                          },
                                                          "fallbackBehaviours": {
                                                            "properties": {
                                                              "skipChainalysisFailure": {
                                                                "type": "boolean"
                                                              },
                                                              "skipUnscreenableTransaction": {
                                                                "type": "boolean"
                                                              },
                                                              "skipUnsupportedAsset": {
                                                                "type": "boolean"
                                                              },
                                                              "skipUnsupportedNetwork": {
                                                                "type": "boolean"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "skipUnscreenableTransaction",
                                                              "skipUnsupportedNetwork",
                                                              "skipUnsupportedAsset",
                                                              "skipChainalysisFailure"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "alerts",
                                                          "exposures",
                                                          "addresses",
                                                          "fallbackBehaviours"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "ChainalysisTransactionPrescreening"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ]
                                                  },
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "autoClearAfterDeliveredTimeoutSeconds": {
                                                            "type": "integer",
                                                            "minimum": 0
                                                          },
                                                          "autoTriggerTimeoutSeconds": {
                                                            "type": "integer",
                                                            "minimum": 0
                                                          },
                                                          "vendor": {
                                                            "type": "string",
                                                            "enum": [
                                                              "Notabene"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "vendor",
                                                          "autoTriggerTimeoutSeconds"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "TravelRuleTransactionPrescreening"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ],
                                                    "title": "TravelRuleTransactionPrescreening",
                                                    "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                                  }
                                                ]
                                              },
                                              "status": {
                                                "type": "string",
                                                "enum": [
                                                  "Active",
                                                  "Archived"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "id",
                                              "name",
                                              "status",
                                              "activityKind",
                                              "rule",
                                              "action"
                                            ],
                                            "title": "Wallets:Sign"
                                          },
                                          {
                                            "properties": {
                                              "action": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "NoAction"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind"
                                                    ],
                                                    "title": "NoAction",
                                                    "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                                  }
                                                ]
                                              },
                                              "activityKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Wallets:IncomingTransaction"
                                                ]
                                              },
                                              "dateCreated": {
                                                "type": "string"
                                              },
                                              "dateUpdated": {
                                                "type": "string"
                                              },
                                              "filters": {
                                                "properties": {
                                                  "walletId": {
                                                    "properties": {
                                                      "in": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "in"
                                                    ]
                                                  },
                                                  "walletTags": {
                                                    "properties": {
                                                      "hasAll": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      },
                                                      "hasAny": {
                                                        "items": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "type": "array",
                                                        "maxItems": 100,
                                                        "minItems": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object"
                                              },
                                              "id": {
                                                "type": "string"
                                              },
                                              "name": {
                                                "type": "string"
                                              },
                                              "rule": {
                                                "oneOf": [
                                                  {
                                                    "properties": {
                                                      "configuration": {
                                                        "properties": {
                                                          "alerts": {
                                                            "properties": {
                                                              "alertLevel": {
                                                                "type": "string",
                                                                "enum": [
                                                                  "LOW",
                                                                  "MEDIUM",
                                                                  "HIGH",
                                                                  "SEVERE"
                                                                ]
                                                              },
                                                              "categoryIds": {
                                                                "items": {
                                                                  "type": "integer",
                                                                  "exclusiveMinimum": 0
                                                                },
                                                                "type": "array"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "alertLevel",
                                                              "categoryIds"
                                                            ]
                                                          },
                                                          "exposures": {
                                                            "properties": {
                                                              "direct": {
                                                                "properties": {
                                                                  "categoryIds": {
                                                                    "items": {
                                                                      "type": "integer",
                                                                      "exclusiveMinimum": 0
                                                                    },
                                                                    "type": "array"
                                                                  }
                                                                },
                                                                "type": "object",
                                                                "required": [
                                                                  "categoryIds"
                                                                ]
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "direct"
                                                            ]
                                                          },
                                                          "fallbackBehaviours": {
                                                            "properties": {
                                                              "skipChainalysisFailure": {
                                                                "type": "boolean"
                                                              },
                                                              "skipUnscreenableTransaction": {
                                                                "type": "boolean"
                                                              },
                                                              "skipUnsupportedAsset": {
                                                                "type": "boolean"
                                                              },
                                                              "skipUnsupportedNetwork": {
                                                                "type": "boolean"
                                                              }
                                                            },
                                                            "type": "object",
                                                            "required": [
                                                              "skipUnscreenableTransaction",
                                                              "skipUnsupportedNetwork",
                                                              "skipUnsupportedAsset",
                                                              "skipChainalysisFailure"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "alerts",
                                                          "exposures",
                                                          "fallbackBehaviours"
                                                        ]
                                                      },
                                                      "kind": {
                                                        "type": "string",
                                                        "enum": [
                                                          "ChainalysisTransactionScreening"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "kind",
                                                      "configuration"
                                                    ],
                                                    "title": "ChainalysisTransactionPrescreening",
                                                    "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                                  }
                                                ]
                                              },
                                              "status": {
                                                "type": "string",
                                                "enum": [
                                                  "Active",
                                                  "Archived"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "id",
                                              "name",
                                              "status",
                                              "activityKind",
                                              "rule",
                                              "action"
                                            ],
                                            "title": "Wallets:IncomingTransaction"
                                          }
                                        ]
                                      },
                                      "dateCreated": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "dateResolved": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "entityId": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "Policy"
                                        ]
                                      },
                                      "operationKind": {
                                        "type": "string",
                                        "enum": [
                                          "Update"
                                        ]
                                      },
                                      "requester": {
                                        "properties": {
                                          "appId": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "userId": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "userId"
                                        ]
                                      },
                                      "status": {
                                        "type": "string",
                                        "enum": [
                                          "Applied",
                                          "Failed",
                                          "Pending",
                                          "Rejected"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "requester",
                                      "kind",
                                      "operationKind",
                                      "status",
                                      "entityId",
                                      "dateCreated",
                                      "body"
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Policies:Modify"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "changeRequest"
                                ],
                                "title": "Policies:Modify",
                                "description": "\n      A \"`Policies:Modify`\" activity represents any activity which involves updating or archiving a policy. These activities are Policy change requests, created as a result of calling either:\n\n* the endpoint [Update Policy](https://docs.dfns.co/api-reference/policies/update-policy)\n* the endpoint [Delete Policy](https://docs.dfns.co/api-reference/policies/delete-policy)\n"
                              },
                              {
                                "properties": {
                                  "changeRequest": {
                                    "properties": {
                                      "approvalId": {
                                        "type": "string"
                                      },
                                      "body": {
                                        "properties": {
                                          "id": {
                                            "type": "string"
                                          },
                                          "isArchived": {
                                            "type": "boolean"
                                          },
                                          "isImmutable": {
                                            "type": "boolean"
                                          },
                                          "name": {
                                            "type": "string"
                                          },
                                          "operations": {
                                            "items": {
                                              "type": "string"
                                            },
                                            "type": "array"
                                          },
                                          "status": {
                                            "type": "string",
                                            "enum": [
                                              "Active"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "name",
                                          "status",
                                          "operations",
                                          "isImmutable",
                                          "isArchived"
                                        ]
                                      },
                                      "dateCreated": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "dateResolved": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "entityId": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "Permission"
                                        ]
                                      },
                                      "operationKind": {
                                        "type": "string",
                                        "enum": [
                                          "Update"
                                        ]
                                      },
                                      "requester": {
                                        "properties": {
                                          "appId": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "userId": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "userId"
                                        ]
                                      },
                                      "status": {
                                        "type": "string",
                                        "enum": [
                                          "Applied",
                                          "Failed",
                                          "Pending",
                                          "Rejected"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "requester",
                                      "status",
                                      "entityId",
                                      "dateCreated",
                                      "kind",
                                      "operationKind",
                                      "body"
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Permissions:Modify"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "changeRequest"
                                ],
                                "title": "Permissions:Modify",
                                "description": "\n      A \"`Permissions:Modify`\" activity represents any activity which involves updating or archiving a permission. These activities are Permission change requests, created as a result of calling either:\n\n* the endpoint [Update Permission](https://docs.dfns.co/api-reference/permissions/update-permission)\n* the endpoint [Delete Permission](https://docs.dfns.co/api-reference/permissions/delete-permission)\n"
                              },
                              {
                                "properties": {
                                  "changeRequest": {
                                    "properties": {
                                      "approvalId": {
                                        "type": "string"
                                      },
                                      "body": {
                                        "properties": {
                                          "id": {
                                            "type": "string"
                                          },
                                          "identityId": {
                                            "type": "string"
                                          },
                                          "isImmutable": {
                                            "type": "boolean"
                                          },
                                          "permissionId": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "id",
                                          "permissionId",
                                          "identityId",
                                          "isImmutable"
                                        ]
                                      },
                                      "dateCreated": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "dateResolved": {
                                        "type": "string",
                                        "format": "date-time"
                                      },
                                      "entityId": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "Assignment"
                                        ]
                                      },
                                      "operationKind": {
                                        "type": "string",
                                        "enum": [
                                          "Create",
                                          "Delete"
                                        ]
                                      },
                                      "requester": {
                                        "properties": {
                                          "appId": {
                                            "type": "string"
                                          },
                                          "tokenId": {
                                            "type": "string"
                                          },
                                          "userId": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "userId"
                                        ]
                                      },
                                      "status": {
                                        "type": "string",
                                        "enum": [
                                          "Applied",
                                          "Failed",
                                          "Pending",
                                          "Rejected"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "requester",
                                      "status",
                                      "entityId",
                                      "dateCreated",
                                      "kind",
                                      "operationKind",
                                      "body"
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Permissions:Assign"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "changeRequest"
                                ],
                                "title": "Permissions:Assign",
                                "description": "\n      A \"`Permissions:Assign`\" activity represents any activity which involves assigning a permission (or revoking it, aka \"deleting a permission assignment\"). These activities are Assignment change requests, created as a result of calling either:\n\n* the endpoint [Assign Permission](https://docs.dfns.co/api-reference/permissions/assign-permission)\n* the endpoint [Revoke Permission](https://docs.dfns.co/api-reference/permissions/revoke-permission)\n"
                              },
                              {
                                "properties": {
                                  "changeRequest": {
                                    "properties": {
                                      "body": {
                                        "oneOf": [
                                          {
                                            "properties": {
                                              "alias": {
                                                "type": "string"
                                              },
                                              "description": {
                                                "type": "string",
                                                "maxLength": 200,
                                                "minLength": 1
                                              },
                                              "entityId": {
                                                "type": "string"
                                              },
                                              "operationKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Create"
                                                ]
                                              },
                                              "values": {
                                                "properties": {
                                                  "add": {
                                                    "items": {
                                                      "properties": {
                                                        "memo": {
                                                          "type": "string",
                                                          "maxLength": 64,
                                                          "minLength": 1,
                                                          "pattern": "^[a-zA-Z0-9]+$"
                                                        },
                                                        "network": {
                                                          "$ref": "#/components/schemas/Network",
                                                          "summary": null,
                                                          "description": null
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "maxLength": 300,
                                                          "minLength": 1,
                                                          "pattern": "^[a-zA-Z0-9_:-]+$"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "network",
                                                        "value"
                                                      ]
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "add"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "entityId",
                                              "alias",
                                              "operationKind",
                                              "values"
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "alias": {
                                                "type": "string"
                                              },
                                              "description": {
                                                "type": "string",
                                                "maxLength": 200,
                                                "minLength": 1
                                              },
                                              "entityId": {
                                                "type": "string"
                                              },
                                              "operationKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Update"
                                                ]
                                              },
                                              "values": {
                                                "properties": {
                                                  "add": {
                                                    "items": {
                                                      "properties": {
                                                        "memo": {
                                                          "type": "string",
                                                          "maxLength": 64,
                                                          "minLength": 1,
                                                          "pattern": "^[a-zA-Z0-9]+$"
                                                        },
                                                        "network": {
                                                          "$ref": "#/components/schemas/Network",
                                                          "summary": null,
                                                          "description": null
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "maxLength": 300,
                                                          "minLength": 1,
                                                          "pattern": "^[a-zA-Z0-9_:-]+$"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "network",
                                                        "value"
                                                      ]
                                                    },
                                                    "type": "array"
                                                  },
                                                  "remove": {
                                                    "items": {
                                                      "properties": {
                                                        "memo": {
                                                          "type": "string",
                                                          "maxLength": 64,
                                                          "minLength": 1,
                                                          "pattern": "^[a-zA-Z0-9]+$"
                                                        },
                                                        "network": {
                                                          "$ref": "#/components/schemas/Network",
                                                          "summary": null,
                                                          "description": null
                                                        },
                                                        "value": {
                                                          "type": "string",
                                                          "maxLength": 300,
                                                          "minLength": 1,
                                                          "pattern": "^[a-zA-Z0-9_:-]+$"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "network",
                                                        "value"
                                                      ]
                                                    },
                                                    "type": "array"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "add",
                                                  "remove"
                                                ]
                                              }
                                            },
                                            "additionalProperties": false,
                                            "type": "object",
                                            "required": [
                                              "entityId",
                                              "alias",
                                              "operationKind",
                                              "values"
                                            ]
                                          },
                                          {
                                            "properties": {
                                              "alias": {
                                                "type": "string"
                                              },
                                              "entityId": {
                                                "type": "string"
                                              },
                                              "operationKind": {
                                                "type": "string",
                                                "enum": [
                                                  "Delete"
                                                ]
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "entityId",
                                              "alias",
                                              "operationKind"
                                            ]
                                          }
                                        ]
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "enum": [
                                          "Alias"
                                        ]
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "id",
                                      "kind",
                                      "body"
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Alias:Modify"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "changeRequest"
                                ],
                                "title": "Alias:Modify",
                                "description": ""
                              }
                            ]
                          },
                          "dateCreated": {
                            "type": "string"
                          },
                          "dateResolved": {
                            "type": "string"
                          },
                          "dateUpdated": {
                            "type": "string"
                          },
                          "decisions": {
                            "items": {
                              "properties": {
                                "date": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "userId": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string",
                                  "enum": [
                                    "Approved",
                                    "Denied"
                                  ]
                                }
                              },
                              "type": "object",
                              "required": [
                                "userId",
                                "date",
                                "reason",
                                "value"
                              ]
                            },
                            "type": "array"
                          },
                          "expirationDate": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "initiatorId": {
                            "type": "string"
                          },
                          "policyEvaluations": {
                            "items": {
                              "properties": {
                                "policyId": {
                                  "type": "string"
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "triggered": {
                                  "type": "boolean"
                                }
                              },
                              "type": "object",
                              "required": [
                                "policyId",
                                "triggered",
                                "reason"
                              ]
                            },
                            "type": "array"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Pending",
                              "Approved",
                              "Denied",
                              "Expired"
                            ]
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "id",
                          "initiatorId",
                          "activity",
                          "status",
                          "dateUpdated",
                          "policyEvaluations",
                          "decisions"
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Approvals:Read`: Always required."
        }
      }
    },
    "/v2/policy-approvals/{approvalId}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get Approval",
        "description": "Retrieve information about a specific approval request.",
        "parameters": [
          {
            "name": "approvalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "activity": {
                      "oneOf": [
                        {
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Wallets:Sign"
                              ]
                            },
                            "signatureRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "dateConfirmed": {
                                  "type": "string"
                                },
                                "datePolicyResolved": {
                                  "type": "string"
                                },
                                "dateRequested": {
                                  "type": "string"
                                },
                                "dateSigned": {
                                  "type": "string"
                                },
                                "externalId": {
                                  "type": "string"
                                },
                                "fee": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "keyId": {
                                  "type": "string"
                                },
                                "network": {
                                  "$ref": "#/components/schemas/Network",
                                  "summary": null,
                                  "description": null
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "requestBody": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "hash": {
                                          "type": "string",
                                          "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                                          "description": "32-byte hash in hex encoded format."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Hash"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "taprootMerkleRoot": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                                          "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "hash"
                                      ],
                                      "title": "Hash",
                                      "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Message"
                                          ]
                                        },
                                        "message": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "An arbitrary hex encoded message."
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "message"
                                      ],
                                      "title": "Message",
                                      "description": "Signs an arbitrary hex encoded arbitrary message."
                                    },
                                    {
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The address of the contract the signer's EOA will be delegated to."
                                        },
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "chainId": {
                                          "type": "number",
                                          "description": "Chain ID."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Eip7702"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "nonce": {
                                          "type": "number",
                                          "description": "The current nonce of the signer EOA."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "address",
                                        "nonce",
                                        "chainId"
                                      ],
                                      "title": "EIP-7702 Authorization",
                                      "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Transaction"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "transaction": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The unsigned hex-encoded transaction."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "transaction"
                                      ],
                                      "title": "Transaction",
                                      "description": "Signs an unsigned transaction."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "domain": {
                                          "properties": {
                                            "chainId": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "exclusiveMinimum": 0
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ],
                                              "description": "Chain ID."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "Name of the signing domain."
                                            },
                                            "salt": {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]{64}$",
                                              "description": "32-byte value as a last-resort domain separator."
                                            },
                                            "verifyingContract": {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]{40}$",
                                              "description": "The address of the contract that will verify the signature."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "Current major version of the signing domain."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "description": "Domain separator."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Eip712"
                                          ]
                                        },
                                        "message": {
                                          "additionalProperties": {},
                                          "type": "object",
                                          "description": "Structured message to sign."
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "types": {
                                          "additionalProperties": {
                                            "items": {
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "name",
                                                "type"
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "type": "object",
                                          "description": "Type definitions."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "types",
                                        "domain",
                                        "message"
                                      ],
                                      "title": "EIP-712 TypedData",
                                      "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Psbt"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "psbt": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The hex encoded PSBT."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "psbt"
                                      ],
                                      "title": "PSBT",
                                      "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "format": {
                                          "type": "string",
                                          "enum": [
                                            "Simple",
                                            "Full"
                                          ],
                                          "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Bip322"
                                          ]
                                        },
                                        "message": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The generic message hex encoded."
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "message"
                                      ],
                                      "title": "BIP-322",
                                      "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "command": {
                                          "type": "string",
                                          "description": "The Pact command JSON, serialized into a string."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "PactCommand"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "command"
                                      ],
                                      "title": "PactCommand",
                                      "description": "Signs an unsigned Pact command."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SignDocDirect"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "signDoc": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The hex encoded `SignDoc` Protobuf."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "signDoc"
                                      ],
                                      "title": "SignDocDirect",
                                      "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SignerPayload"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "payload": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                            },
                                            {
                                              "type": "object"
                                            }
                                          ],
                                          "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "payload"
                                      ],
                                      "title": "SignerPayload",
                                      "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "context": {
                                          "type": "string",
                                          "enum": [
                                            "Signature1"
                                          ]
                                        },
                                        "externalAad": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Cip8"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "payload": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The generic message hex encoded."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "context"
                                      ],
                                      "title": "CIP-8",
                                      "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                    }
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "signature": {
                                  "properties": {
                                    "encoded": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "recid": {
                                      "type": "number"
                                    },
                                    "s": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "r",
                                    "s"
                                  ]
                                },
                                "signatures": {
                                  "items": {
                                    "properties": {
                                      "encoded": {
                                        "type": "string"
                                      },
                                      "r": {
                                        "type": "string"
                                      },
                                      "recid": {
                                        "type": "number"
                                      },
                                      "s": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "r",
                                      "s"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "signedData": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Pending",
                                    "Executing",
                                    "Signed",
                                    "Confirmed",
                                    "Failed",
                                    "Rejected"
                                  ]
                                },
                                "txHash": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "id",
                                "keyId",
                                "requester",
                                "requestBody",
                                "status",
                                "dateRequested"
                              ]
                            },
                            "swapRequest": {
                              "$ref": "#/components/schemas/Swap",
                              "summary": null,
                              "description": null
                            },
                            "transactionRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "dateBroadcasted": {
                                  "type": "string"
                                },
                                "dateConfirmed": {
                                  "type": "string"
                                },
                                "datePolicyResolved": {
                                  "type": "string"
                                },
                                "dateRequested": {
                                  "type": "string"
                                },
                                "externalId": {
                                  "type": "string"
                                },
                                "fee": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "network": {
                                  "$ref": "#/components/schemas/Network",
                                  "summary": null,
                                  "description": null
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "requestBody": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Transaction"
                                          ]
                                        },
                                        "transaction": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                            },
                                            {
                                              "type": "object"
                                            }
                                          ],
                                          "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "transaction"
                                      ],
                                      "title": "Transaction",
                                      "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                                    },
                                    {
                                      "properties": {
                                        "data": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "gasLimit": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Evm"
                                          ]
                                        },
                                        "nonce": {
                                          "anyOf": [
                                            {
                                              "type": "integer",
                                              "minimum": 0
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ],
                                          "description": "The current nonce of the signer EOA."
                                        },
                                        "to": {
                                          "type": "string",
                                          "pattern": "^0x[0-9a-fA-F]{40}$"
                                        },
                                        "value": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "EVM Transaction",
                                      "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                                    },
                                    {
                                      "properties": {
                                        "data": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "gasLimit": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Eip1559"
                                          ]
                                        },
                                        "maxFeePerGas": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "maxPriorityFeePerGas": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "nonce": {
                                          "anyOf": [
                                            {
                                              "type": "integer",
                                              "minimum": 0
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "to": {
                                          "type": "string",
                                          "pattern": "^0x[0-9a-fA-F]{40}$"
                                        },
                                        "value": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "EVM EIP-1559",
                                      "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Psbt"
                                          ]
                                        },
                                        "psbt": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The hex encoded PSBT."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "psbt"
                                      ],
                                      "title": "PSBT",
                                      "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Json"
                                          ]
                                        },
                                        "transaction": {
                                          "type": "object"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "transaction"
                                      ],
                                      "title": "PSBT",
                                      "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SignDocDirect"
                                          ]
                                        },
                                        "signDoc": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "signDoc"
                                      ],
                                      "title": "SignDocDirect",
                                      "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "feeSponsorId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "UserOperations"
                                          ]
                                        },
                                        "userOperations": {
                                          "items": {
                                            "properties": {
                                              "data": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "ABI encoded function call data in hex format."
                                              },
                                              "to": {
                                                "type": "string",
                                                "pattern": "^0x[0-9a-fA-F]{40}$",
                                                "description": "The destination address or target contract."
                                              },
                                              "value": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "The amount of native tokens to transfer in minimum denomination."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "to"
                                            ]
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "userOperations",
                                        "feeSponsorId"
                                      ],
                                      "title": "EVM Sponsored transaction",
                                      "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                                    },
                                    {
                                      "properties": {
                                        "decision": {
                                          "type": "string",
                                          "enum": [
                                            "Accept",
                                            "Reject"
                                          ]
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SettleOffer"
                                          ]
                                        },
                                        "txHash": {
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "txHash",
                                        "decision"
                                      ],
                                      "title": "Canton Offer Settlement",
                                      "description": "Settle a Canton Offer."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "TransferPreapproval"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "Canton Transfer Preapproval",
                                      "description": "Enable canton coin auto approval."
                                    }
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Pending",
                                    "Executing",
                                    "Broadcasted",
                                    "Confirmed",
                                    "Failed",
                                    "Rejected"
                                  ]
                                },
                                "txHash": {
                                  "type": "string"
                                },
                                "walletId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "id",
                                "walletId",
                                "network",
                                "requester",
                                "requestBody",
                                "status",
                                "dateRequested"
                              ]
                            },
                            "transferRequest": {
                              "$ref": "#/components/schemas/TransferRequest",
                              "summary": null,
                              "description": null
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "Wallets:Sign",
                          "description": "\n      A \"`Wallets:Sign`\" activity represents any activity which involves signing with a wallet. Currently, in our API, these can be:\n\n* a Transfer Request (created using the endpoint [Transfer Asset from Wallet](https://docs.dfns.co/api-reference/wallets/transfer-asset))\n* a Transaction Request (created using the endpoint [Broadcast Transaction from Wallet](https://docs.dfns.co/api-reference/wallets/sign-and-broadcast-transaction))\n* a Signature Request (created using the endpoint [Generate Signature from Wallet](https://docs.dfns.co/api-reference/keys/generate-signature))\n"
                        },
                        {
                          "properties": {
                            "blockchainEvent": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "balanceId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "decimals": {
                                      "type": "number",
                                      "description": "@deprecated use metadata.asset.decimals instead"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "NativeTransfer"
                                      ]
                                    },
                                    "liquidityPool": {
                                      "type": "string"
                                    },
                                    "memo": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "@deprecated use metadata.asset.symbol instead"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "description": "@deprecated use metadata.asset.verified instead"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "value",
                                    "symbol",
                                    "decimals"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Aip21Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "metadataAddress": {
                                      "type": "string"
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "metadataAddress",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "assetId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "clawback": {
                                      "type": "boolean"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "AsaTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "optIn": {
                                      "type": "boolean"
                                    },
                                    "optOut": {
                                      "type": "boolean"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "assetId",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "assetId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "AssetTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "assetId",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "coin": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "CoinTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "coin",
                                    "from",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "decimals": {
                                      "type": "number",
                                      "description": "@deprecated use metadata.asset.decimals instead"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Erc20Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "@deprecated use metadata.asset.symbol instead"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "description": "@deprecated use metadata.asset.verified instead"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "value",
                                    "decimals"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Erc721Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "@deprecated use metadata.asset.symbol instead"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "description": "@deprecated use metadata.asset.verified instead"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "tokenId"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Hip17Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "serialNumber": {
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "tokenId",
                                    "serialNumber"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "froms": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "HtsTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "froms",
                                    "tos",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Kip5Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "module": {
                                      "type": "string"
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "sourceChain": {
                                      "type": "string"
                                    },
                                    "targetChain": {
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "value",
                                    "module"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "coin": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "LockedCoinTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "coin",
                                    "from",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "assetCode": {
                                      "type": "string"
                                    },
                                    "balanceId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "issuer": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Sep41Transfer"
                                      ]
                                    },
                                    "liquidityPool": {
                                      "type": "string"
                                    },
                                    "memo": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "issuer",
                                    "assetCode",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "SplTransfer",
                                        "Spl2022Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "mint": {
                                      "type": "string"
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "mint",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Tep74Transfer"
                                      ]
                                    },
                                    "master": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "master",
                                    "from",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Trc10Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "tokenId",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Trc20Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Trc721Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "tokenId"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "froms": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "UtxoTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "froms",
                                    "tos",
                                    "value"
                                  ]
                                }
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Wallets:IncomingTransaction"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "blockchainEvent"
                          ],
                          "title": "Wallets:IncomingTransaction",
                          "description": "A \"`Wallets:IncomingTransaction`\" activity represents when our indexers detected an incoming transaction into a wallet. This activity kind has to be used with the rule kind \"`ChainalysisTransactionScreening`\" (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page), and the action kind \"`NoAction`\", meaning that no actual action will be taken as a result of the Chainalysis screening, other than notifying you through a webhook event if the policy is triggered. The reason for that, is that the incoming transaction is already on-chain, so the funds are already in the wallet, we cannot block that transfer on chain."
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "body": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Alias:Modify"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Alias:Modify"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Permissions:Assign"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "permissionId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "permissionId"
                                          ]
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Permissions:Assign"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Permissions:Modify"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "permissionId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "permissionId"
                                          ]
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Permissions:Modify"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "properties": {
                                            "approvalGroups": {
                                              "items": {
                                                "properties": {
                                                  "approvers": {
                                                    "properties": {
                                                      "userId": {
                                                        "properties": {
                                                          "in": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "maxItems": 100,
                                                            "minItems": 1
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "in"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "initiatorCanApprove": {
                                                    "type": "boolean",
                                                    "description": "Whether the initiator of the activity can participate in the approval."
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "quorum": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "quorum",
                                                  "approvers"
                                                ]
                                              },
                                              "type": "array",
                                              "minItems": 1
                                            },
                                            "autoRejectTimeout": {
                                              "type": "integer",
                                              "minimum": 1
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "RequestApproval"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "approvalGroups"
                                          ],
                                          "title": "RequestApproval",
                                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Policies:Modify"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "policyId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "policyId"
                                          ]
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Policies:Modify"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NoAction"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "NoAction",
                                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Wallets:Sign"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "walletId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            },
                                            "walletTags": {
                                              "properties": {
                                                "hasAll": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                },
                                                "hasAny": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object"
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "additionalProperties": false,
                                                  "type": "object"
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AlwaysTrigger"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "AlwaysTrigger",
                                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "addresses": {
                                                      "items": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "type": "array",
                                                      "description": "Whitelisted recipient addresses"
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "addresses"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionRecipientWhitelist"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionRecipientWhitelist",
                                              "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "currency": {
                                                      "type": "string",
                                                      "enum": [
                                                        "USD"
                                                      ],
                                                      "description": "Fiat currency, currently only `USD`"
                                                    },
                                                    "limit": {
                                                      "type": "number",
                                                      "description": "Amount limit in `currency`"
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "limit",
                                                    "currency"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionAmountLimit"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionAmountLimit",
                                              "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "currency": {
                                                      "type": "string",
                                                      "enum": [
                                                        "USD"
                                                      ],
                                                      "description": "Currency for the amount limit above"
                                                    },
                                                    "limit": {
                                                      "type": "number",
                                                      "description": "Amount limit in `currency`"
                                                    },
                                                    "timeframe": {
                                                      "type": "integer",
                                                      "maximum": 43200,
                                                      "minimum": 1,
                                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "limit",
                                                    "currency",
                                                    "timeframe"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionAmountVelocity"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionAmountVelocity",
                                              "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "limit": {
                                                      "type": "number",
                                                      "description": "Count limit"
                                                    },
                                                    "timeframe": {
                                                      "type": "integer",
                                                      "maximum": 43200,
                                                      "minimum": 1,
                                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "limit",
                                                    "timeframe"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionCountVelocity"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionCountVelocity",
                                              "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "addresses": {
                                                      "properties": {
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "categoryIds"
                                                      ]
                                                    },
                                                    "alerts": {
                                                      "properties": {
                                                        "alertLevel": {
                                                          "type": "string",
                                                          "enum": [
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH",
                                                            "SEVERE"
                                                          ]
                                                        },
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "alertLevel",
                                                        "categoryIds"
                                                      ]
                                                    },
                                                    "exposures": {
                                                      "properties": {
                                                        "direct": {
                                                          "properties": {
                                                            "categoryIds": {
                                                              "items": {
                                                                "type": "integer",
                                                                "exclusiveMinimum": 0
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object",
                                                          "required": [
                                                            "categoryIds"
                                                          ]
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "direct"
                                                      ]
                                                    },
                                                    "fallbackBehaviours": {
                                                      "properties": {
                                                        "skipChainalysisFailure": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnscreenableTransaction": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedAsset": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedNetwork": {
                                                          "type": "boolean"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "skipUnscreenableTransaction",
                                                        "skipUnsupportedNetwork",
                                                        "skipUnsupportedAsset",
                                                        "skipChainalysisFailure"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "alerts",
                                                    "exposures",
                                                    "addresses",
                                                    "fallbackBehaviours"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "ChainalysisTransactionPrescreening"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ]
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "autoClearAfterDeliveredTimeoutSeconds": {
                                                      "type": "integer",
                                                      "minimum": 0
                                                    },
                                                    "autoTriggerTimeoutSeconds": {
                                                      "type": "integer",
                                                      "minimum": 0
                                                    },
                                                    "vendor": {
                                                      "type": "string",
                                                      "enum": [
                                                        "Notabene"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "vendor",
                                                    "autoTriggerTimeoutSeconds"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TravelRuleTransactionPrescreening"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TravelRuleTransactionPrescreening",
                                              "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                            }
                                          ]
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Wallets:Sign"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NoAction"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "NoAction",
                                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Wallets:IncomingTransaction"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "walletId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            },
                                            "walletTags": {
                                              "properties": {
                                                "hasAll": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                },
                                                "hasAny": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object"
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "alerts": {
                                                      "properties": {
                                                        "alertLevel": {
                                                          "type": "string",
                                                          "enum": [
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH",
                                                            "SEVERE"
                                                          ]
                                                        },
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "alertLevel",
                                                        "categoryIds"
                                                      ]
                                                    },
                                                    "exposures": {
                                                      "properties": {
                                                        "direct": {
                                                          "properties": {
                                                            "categoryIds": {
                                                              "items": {
                                                                "type": "integer",
                                                                "exclusiveMinimum": 0
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object",
                                                          "required": [
                                                            "categoryIds"
                                                          ]
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "direct"
                                                      ]
                                                    },
                                                    "fallbackBehaviours": {
                                                      "properties": {
                                                        "skipChainalysisFailure": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnscreenableTransaction": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedAsset": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedNetwork": {
                                                          "type": "boolean"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "skipUnscreenableTransaction",
                                                        "skipUnsupportedNetwork",
                                                        "skipUnsupportedAsset",
                                                        "skipChainalysisFailure"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "alerts",
                                                    "exposures",
                                                    "fallbackBehaviours"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "ChainalysisTransactionScreening"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "ChainalysisTransactionPrescreening",
                                              "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                            }
                                          ]
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Wallets:IncomingTransaction"
                                    }
                                  ]
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "dateResolved": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "entityId": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Policy"
                                  ]
                                },
                                "operationKind": {
                                  "type": "string",
                                  "enum": [
                                    "Update"
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "appId": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Applied",
                                    "Failed",
                                    "Pending",
                                    "Rejected"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "requester",
                                "kind",
                                "operationKind",
                                "status",
                                "entityId",
                                "dateCreated",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Policies:Modify"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Policies:Modify",
                          "description": "\n      A \"`Policies:Modify`\" activity represents any activity which involves updating or archiving a policy. These activities are Policy change requests, created as a result of calling either:\n\n* the endpoint [Update Policy](https://docs.dfns.co/api-reference/policies/update-policy)\n* the endpoint [Delete Policy](https://docs.dfns.co/api-reference/policies/delete-policy)\n"
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "body": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "isArchived": {
                                      "type": "boolean"
                                    },
                                    "isImmutable": {
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "operations": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "operations",
                                    "isImmutable",
                                    "isArchived"
                                  ]
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "dateResolved": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "entityId": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Permission"
                                  ]
                                },
                                "operationKind": {
                                  "type": "string",
                                  "enum": [
                                    "Update"
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "appId": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Applied",
                                    "Failed",
                                    "Pending",
                                    "Rejected"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "requester",
                                "status",
                                "entityId",
                                "dateCreated",
                                "kind",
                                "operationKind",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Permissions:Modify"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Permissions:Modify",
                          "description": "\n      A \"`Permissions:Modify`\" activity represents any activity which involves updating or archiving a permission. These activities are Permission change requests, created as a result of calling either:\n\n* the endpoint [Update Permission](https://docs.dfns.co/api-reference/permissions/update-permission)\n* the endpoint [Delete Permission](https://docs.dfns.co/api-reference/permissions/delete-permission)\n"
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "body": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "identityId": {
                                      "type": "string"
                                    },
                                    "isImmutable": {
                                      "type": "boolean"
                                    },
                                    "permissionId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "permissionId",
                                    "identityId",
                                    "isImmutable"
                                  ]
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "dateResolved": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "entityId": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Assignment"
                                  ]
                                },
                                "operationKind": {
                                  "type": "string",
                                  "enum": [
                                    "Create",
                                    "Delete"
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "appId": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Applied",
                                    "Failed",
                                    "Pending",
                                    "Rejected"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "requester",
                                "status",
                                "entityId",
                                "dateCreated",
                                "kind",
                                "operationKind",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Permissions:Assign"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Permissions:Assign",
                          "description": "\n      A \"`Permissions:Assign`\" activity represents any activity which involves assigning a permission (or revoking it, aka \"deleting a permission assignment\"). These activities are Assignment change requests, created as a result of calling either:\n\n* the endpoint [Assign Permission](https://docs.dfns.co/api-reference/permissions/assign-permission)\n* the endpoint [Revoke Permission](https://docs.dfns.co/api-reference/permissions/revoke-permission)\n"
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "body": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "alias": {
                                          "type": "string"
                                        },
                                        "description": {
                                          "type": "string",
                                          "maxLength": 200,
                                          "minLength": 1
                                        },
                                        "entityId": {
                                          "type": "string"
                                        },
                                        "operationKind": {
                                          "type": "string",
                                          "enum": [
                                            "Create"
                                          ]
                                        },
                                        "values": {
                                          "properties": {
                                            "add": {
                                              "items": {
                                                "properties": {
                                                  "memo": {
                                                    "type": "string",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9]+$"
                                                  },
                                                  "network": {
                                                    "$ref": "#/components/schemas/Network",
                                                    "summary": null,
                                                    "description": null
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "maxLength": 300,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9_:-]+$"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "network",
                                                  "value"
                                                ]
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "add"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "entityId",
                                        "alias",
                                        "operationKind",
                                        "values"
                                      ]
                                    },
                                    {
                                      "properties": {
                                        "alias": {
                                          "type": "string"
                                        },
                                        "description": {
                                          "type": "string",
                                          "maxLength": 200,
                                          "minLength": 1
                                        },
                                        "entityId": {
                                          "type": "string"
                                        },
                                        "operationKind": {
                                          "type": "string",
                                          "enum": [
                                            "Update"
                                          ]
                                        },
                                        "values": {
                                          "properties": {
                                            "add": {
                                              "items": {
                                                "properties": {
                                                  "memo": {
                                                    "type": "string",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9]+$"
                                                  },
                                                  "network": {
                                                    "$ref": "#/components/schemas/Network",
                                                    "summary": null,
                                                    "description": null
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "maxLength": 300,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9_:-]+$"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "network",
                                                  "value"
                                                ]
                                              },
                                              "type": "array"
                                            },
                                            "remove": {
                                              "items": {
                                                "properties": {
                                                  "memo": {
                                                    "type": "string",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9]+$"
                                                  },
                                                  "network": {
                                                    "$ref": "#/components/schemas/Network",
                                                    "summary": null,
                                                    "description": null
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "maxLength": 300,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9_:-]+$"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "network",
                                                  "value"
                                                ]
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "add",
                                            "remove"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "entityId",
                                        "alias",
                                        "operationKind",
                                        "values"
                                      ]
                                    },
                                    {
                                      "properties": {
                                        "alias": {
                                          "type": "string"
                                        },
                                        "entityId": {
                                          "type": "string"
                                        },
                                        "operationKind": {
                                          "type": "string",
                                          "enum": [
                                            "Delete"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "entityId",
                                        "alias",
                                        "operationKind"
                                      ]
                                    }
                                  ]
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Alias"
                                  ]
                                }
                              },
                              "type": "object",
                              "required": [
                                "id",
                                "kind",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Alias:Modify"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Alias:Modify",
                          "description": ""
                        }
                      ]
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateResolved": {
                      "type": "string"
                    },
                    "dateUpdated": {
                      "type": "string"
                    },
                    "decisions": {
                      "items": {
                        "properties": {
                          "date": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "enum": [
                              "Approved",
                              "Denied"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "userId",
                          "date",
                          "reason",
                          "value"
                        ]
                      },
                      "type": "array"
                    },
                    "expirationDate": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "initiatorId": {
                      "type": "string"
                    },
                    "policyEvaluations": {
                      "items": {
                        "properties": {
                          "policyId": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "triggered": {
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "required": [
                          "policyId",
                          "triggered",
                          "reason"
                        ]
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Approved",
                        "Denied",
                        "Expired"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "initiatorId",
                    "activity",
                    "status",
                    "dateUpdated",
                    "policyEvaluations",
                    "decisions"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Policies:Approvals:Read`: Always required."
        }
      }
    },
    "/v2/policy-approvals/{approvalId}/decisions": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Create Approval Decision",
        "description": "Approve or Reject an Approval request.",
        "parameters": [
          {
            "name": "approvalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "reason": {
                    "type": "string",
                    "maxLength": 1000
                  },
                  "value": {
                    "type": "string",
                    "enum": [
                      "Approved",
                      "Denied"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "activity": {
                      "oneOf": [
                        {
                          "properties": {
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Wallets:Sign"
                              ]
                            },
                            "signatureRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "dateConfirmed": {
                                  "type": "string"
                                },
                                "datePolicyResolved": {
                                  "type": "string"
                                },
                                "dateRequested": {
                                  "type": "string"
                                },
                                "dateSigned": {
                                  "type": "string"
                                },
                                "externalId": {
                                  "type": "string"
                                },
                                "fee": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "keyId": {
                                  "type": "string"
                                },
                                "network": {
                                  "$ref": "#/components/schemas/Network",
                                  "summary": null,
                                  "description": null
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "requestBody": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "hash": {
                                          "type": "string",
                                          "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                                          "description": "32-byte hash in hex encoded format."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Hash"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "taprootMerkleRoot": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                                          "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "hash"
                                      ],
                                      "title": "Hash",
                                      "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Message"
                                          ]
                                        },
                                        "message": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "An arbitrary hex encoded message."
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "message"
                                      ],
                                      "title": "Message",
                                      "description": "Signs an arbitrary hex encoded arbitrary message."
                                    },
                                    {
                                      "properties": {
                                        "address": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The address of the contract the signer's EOA will be delegated to."
                                        },
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "chainId": {
                                          "type": "number",
                                          "description": "Chain ID."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Eip7702"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "nonce": {
                                          "type": "number",
                                          "description": "The current nonce of the signer EOA."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "address",
                                        "nonce",
                                        "chainId"
                                      ],
                                      "title": "EIP-7702 Authorization",
                                      "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Transaction"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "transaction": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The unsigned hex-encoded transaction."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "transaction"
                                      ],
                                      "title": "Transaction",
                                      "description": "Signs an unsigned transaction."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "domain": {
                                          "properties": {
                                            "chainId": {
                                              "anyOf": [
                                                {
                                                  "type": "integer",
                                                  "exclusiveMinimum": 0
                                                },
                                                {
                                                  "type": "string"
                                                }
                                              ],
                                              "description": "Chain ID."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "Name of the signing domain."
                                            },
                                            "salt": {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]{64}$",
                                              "description": "32-byte value as a last-resort domain separator."
                                            },
                                            "verifyingContract": {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]{40}$",
                                              "description": "The address of the contract that will verify the signature."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "Current major version of the signing domain."
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "description": "Domain separator."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Eip712"
                                          ]
                                        },
                                        "message": {
                                          "additionalProperties": {},
                                          "type": "object",
                                          "description": "Structured message to sign."
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "types": {
                                          "additionalProperties": {
                                            "items": {
                                              "properties": {
                                                "name": {
                                                  "type": "string"
                                                },
                                                "type": {
                                                  "type": "string"
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "name",
                                                "type"
                                              ]
                                            },
                                            "type": "array"
                                          },
                                          "type": "object",
                                          "description": "Type definitions."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "types",
                                        "domain",
                                        "message"
                                      ],
                                      "title": "EIP-712 TypedData",
                                      "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Psbt"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "psbt": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The hex encoded PSBT."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "psbt"
                                      ],
                                      "title": "PSBT",
                                      "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "format": {
                                          "type": "string",
                                          "enum": [
                                            "Simple",
                                            "Full"
                                          ],
                                          "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Bip322"
                                          ]
                                        },
                                        "message": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The generic message hex encoded."
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "message"
                                      ],
                                      "title": "BIP-322",
                                      "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "command": {
                                          "type": "string",
                                          "description": "The Pact command JSON, serialized into a string."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "PactCommand"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "command"
                                      ],
                                      "title": "PactCommand",
                                      "description": "Signs an unsigned Pact command."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SignDocDirect"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "signDoc": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The hex encoded `SignDoc` Protobuf."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "signDoc"
                                      ],
                                      "title": "SignDocDirect",
                                      "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SignerPayload"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "payload": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                            },
                                            {
                                              "type": "object"
                                            }
                                          ],
                                          "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "payload"
                                      ],
                                      "title": "SignerPayload",
                                      "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                    },
                                    {
                                      "properties": {
                                        "blockchainKind": {
                                          "$ref": "#/components/schemas/BlockchainKind",
                                          "summary": null,
                                          "description": null
                                        },
                                        "context": {
                                          "type": "string",
                                          "enum": [
                                            "Signature1"
                                          ]
                                        },
                                        "externalAad": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Cip8"
                                          ]
                                        },
                                        "network": {
                                          "$ref": "#/components/schemas/Network",
                                          "summary": null,
                                          "description": null
                                        },
                                        "payload": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The generic message hex encoded."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "context"
                                      ],
                                      "title": "CIP-8",
                                      "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                                    }
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "signature": {
                                  "properties": {
                                    "encoded": {
                                      "type": "string"
                                    },
                                    "r": {
                                      "type": "string"
                                    },
                                    "recid": {
                                      "type": "number"
                                    },
                                    "s": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "r",
                                    "s"
                                  ]
                                },
                                "signatures": {
                                  "items": {
                                    "properties": {
                                      "encoded": {
                                        "type": "string"
                                      },
                                      "r": {
                                        "type": "string"
                                      },
                                      "recid": {
                                        "type": "number"
                                      },
                                      "s": {
                                        "type": "string"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "r",
                                      "s"
                                    ]
                                  },
                                  "type": "array"
                                },
                                "signedData": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Pending",
                                    "Executing",
                                    "Signed",
                                    "Confirmed",
                                    "Failed",
                                    "Rejected"
                                  ]
                                },
                                "txHash": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "id",
                                "keyId",
                                "requester",
                                "requestBody",
                                "status",
                                "dateRequested"
                              ]
                            },
                            "swapRequest": {
                              "$ref": "#/components/schemas/Swap",
                              "summary": null,
                              "description": null
                            },
                            "transactionRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "dateBroadcasted": {
                                  "type": "string"
                                },
                                "dateConfirmed": {
                                  "type": "string"
                                },
                                "datePolicyResolved": {
                                  "type": "string"
                                },
                                "dateRequested": {
                                  "type": "string"
                                },
                                "externalId": {
                                  "type": "string"
                                },
                                "fee": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "network": {
                                  "$ref": "#/components/schemas/Network",
                                  "summary": null,
                                  "description": null
                                },
                                "reason": {
                                  "type": "string"
                                },
                                "requestBody": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Transaction"
                                          ]
                                        },
                                        "transaction": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                            },
                                            {
                                              "type": "object"
                                            }
                                          ],
                                          "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "transaction"
                                      ],
                                      "title": "Transaction",
                                      "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                                    },
                                    {
                                      "properties": {
                                        "data": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "gasLimit": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Evm"
                                          ]
                                        },
                                        "nonce": {
                                          "anyOf": [
                                            {
                                              "type": "integer",
                                              "minimum": 0
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ],
                                          "description": "The current nonce of the signer EOA."
                                        },
                                        "to": {
                                          "type": "string",
                                          "pattern": "^0x[0-9a-fA-F]{40}$"
                                        },
                                        "value": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "EVM Transaction",
                                      "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                                    },
                                    {
                                      "properties": {
                                        "data": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "gasLimit": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Eip1559"
                                          ]
                                        },
                                        "maxFeePerGas": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "maxPriorityFeePerGas": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "nonce": {
                                          "anyOf": [
                                            {
                                              "type": "integer",
                                              "minimum": 0
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        },
                                        "to": {
                                          "type": "string",
                                          "pattern": "^0x[0-9a-fA-F]{40}$"
                                        },
                                        "value": {
                                          "anyOf": [
                                            {
                                              "type": "string",
                                              "pattern": "^\\d+$"
                                            },
                                            {
                                              "type": "string",
                                              "pattern": "^0x[0-9a-fA-F]*$"
                                            }
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "EVM EIP-1559",
                                      "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Psbt"
                                          ]
                                        },
                                        "psbt": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "The hex encoded PSBT."
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "psbt"
                                      ],
                                      "title": "PSBT",
                                      "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "Json"
                                          ]
                                        },
                                        "transaction": {
                                          "type": "object"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "transaction"
                                      ],
                                      "title": "PSBT",
                                      "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SignDocDirect"
                                          ]
                                        },
                                        "signDoc": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "signDoc"
                                      ],
                                      "title": "SignDocDirect",
                                      "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "feeSponsorId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "UserOperations"
                                          ]
                                        },
                                        "userOperations": {
                                          "items": {
                                            "properties": {
                                              "data": {
                                                "type": "string",
                                                "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                                "description": "ABI encoded function call data in hex format."
                                              },
                                              "to": {
                                                "type": "string",
                                                "pattern": "^0x[0-9a-fA-F]{40}$",
                                                "description": "The destination address or target contract."
                                              },
                                              "value": {
                                                "type": "string",
                                                "pattern": "^\\d+$",
                                                "description": "The amount of native tokens to transfer in minimum denomination."
                                              }
                                            },
                                            "type": "object",
                                            "required": [
                                              "to"
                                            ]
                                          },
                                          "type": "array"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "userOperations",
                                        "feeSponsorId"
                                      ],
                                      "title": "EVM Sponsored transaction",
                                      "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                                    },
                                    {
                                      "properties": {
                                        "decision": {
                                          "type": "string",
                                          "enum": [
                                            "Accept",
                                            "Reject"
                                          ]
                                        },
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "SettleOffer"
                                          ]
                                        },
                                        "txHash": {
                                          "type": "string"
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind",
                                        "txHash",
                                        "decision"
                                      ],
                                      "title": "Canton Offer Settlement",
                                      "description": "Settle a Canton Offer."
                                    },
                                    {
                                      "properties": {
                                        "externalId": {
                                          "type": "string",
                                          "maxLength": 50,
                                          "minLength": 1,
                                          "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                        },
                                        "kind": {
                                          "type": "string",
                                          "enum": [
                                            "TransferPreapproval"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "kind"
                                      ],
                                      "title": "Canton Transfer Preapproval",
                                      "description": "Enable canton coin auto approval."
                                    }
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Pending",
                                    "Executing",
                                    "Broadcasted",
                                    "Confirmed",
                                    "Failed",
                                    "Rejected"
                                  ]
                                },
                                "txHash": {
                                  "type": "string"
                                },
                                "walletId": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "id",
                                "walletId",
                                "network",
                                "requester",
                                "requestBody",
                                "status",
                                "dateRequested"
                              ]
                            },
                            "transferRequest": {
                              "$ref": "#/components/schemas/TransferRequest",
                              "summary": null,
                              "description": null
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "Wallets:Sign",
                          "description": "\n      A \"`Wallets:Sign`\" activity represents any activity which involves signing with a wallet. Currently, in our API, these can be:\n\n* a Transfer Request (created using the endpoint [Transfer Asset from Wallet](https://docs.dfns.co/api-reference/wallets/transfer-asset))\n* a Transaction Request (created using the endpoint [Broadcast Transaction from Wallet](https://docs.dfns.co/api-reference/wallets/sign-and-broadcast-transaction))\n* a Signature Request (created using the endpoint [Generate Signature from Wallet](https://docs.dfns.co/api-reference/keys/generate-signature))\n"
                        },
                        {
                          "properties": {
                            "blockchainEvent": {
                              "oneOf": [
                                {
                                  "properties": {
                                    "balanceId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "decimals": {
                                      "type": "number",
                                      "description": "@deprecated use metadata.asset.decimals instead"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "NativeTransfer"
                                      ]
                                    },
                                    "liquidityPool": {
                                      "type": "string"
                                    },
                                    "memo": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "@deprecated use metadata.asset.symbol instead"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "description": "@deprecated use metadata.asset.verified instead"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "value",
                                    "symbol",
                                    "decimals"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Aip21Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "metadataAddress": {
                                      "type": "string"
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "metadataAddress",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "assetId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "clawback": {
                                      "type": "boolean"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "AsaTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "optIn": {
                                      "type": "boolean"
                                    },
                                    "optOut": {
                                      "type": "boolean"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "assetId",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "assetId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "AssetTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "assetId",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "coin": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "CoinTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "coin",
                                    "from",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "decimals": {
                                      "type": "number",
                                      "description": "@deprecated use metadata.asset.decimals instead"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Erc20Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "@deprecated use metadata.asset.symbol instead"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "description": "@deprecated use metadata.asset.verified instead"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "value",
                                    "decimals"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Erc721Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "symbol": {
                                      "type": "string",
                                      "description": "@deprecated use metadata.asset.symbol instead"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "verified": {
                                      "type": "boolean",
                                      "description": "@deprecated use metadata.asset.verified instead"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "tokenId"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Hip17Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "serialNumber": {
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "tokenId",
                                    "serialNumber"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "froms": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "HtsTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "froms",
                                    "tos",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Kip5Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "module": {
                                      "type": "string"
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "sourceChain": {
                                      "type": "string"
                                    },
                                    "targetChain": {
                                      "type": "string"
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "value",
                                    "module"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "coin": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "LockedCoinTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "coin",
                                    "from",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "assetCode": {
                                      "type": "string"
                                    },
                                    "balanceId": {
                                      "type": "string"
                                    },
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "issuer": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Sep41Transfer"
                                      ]
                                    },
                                    "liquidityPool": {
                                      "type": "string"
                                    },
                                    "memo": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "issuer",
                                    "assetCode",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "SplTransfer",
                                        "Spl2022Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "mint": {
                                      "type": "string"
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "mint",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Tep74Transfer"
                                      ]
                                    },
                                    "master": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "master",
                                    "from",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Trc10Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "tokenId",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Trc20Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "value"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "contract": {
                                      "type": "string"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "from": {
                                      "type": "string"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "Trc721Transfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "contract",
                                    "from",
                                    "to",
                                    "tokenId"
                                  ]
                                },
                                {
                                  "properties": {
                                    "blockNumber": {
                                      "type": "number"
                                    },
                                    "direction": {
                                      "type": "string",
                                      "enum": [
                                        "In",
                                        "Out"
                                      ]
                                    },
                                    "fee": {
                                      "type": "string"
                                    },
                                    "froms": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "index": {
                                      "type": "string"
                                    },
                                    "kind": {
                                      "type": "string",
                                      "enum": [
                                        "UtxoTransfer"
                                      ]
                                    },
                                    "metadata": {
                                      "properties": {
                                        "asset": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        },
                                        "fee": {
                                          "properties": {
                                            "decimals": {
                                              "type": "integer"
                                            },
                                            "quotes": {
                                              "properties": {
                                                "EUR": {
                                                  "type": "number"
                                                },
                                                "USD": {
                                                  "type": "number"
                                                }
                                              },
                                              "type": "object"
                                            },
                                            "symbol": {
                                              "type": "string"
                                            },
                                            "verified": {
                                              "type": "boolean"
                                            }
                                          },
                                          "type": "object"
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "asset"
                                      ]
                                    },
                                    "network": {
                                      "$ref": "#/components/schemas/Network",
                                      "summary": null,
                                      "description": null
                                    },
                                    "timestamp": {
                                      "type": "string"
                                    },
                                    "tos": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "txHash": {
                                      "type": "string"
                                    },
                                    "value": {
                                      "type": "string"
                                    },
                                    "walletId": {
                                      "type": "string"
                                    }
                                  },
                                  "type": "object",
                                  "required": [
                                    "walletId",
                                    "direction",
                                    "network",
                                    "blockNumber",
                                    "txHash",
                                    "timestamp",
                                    "metadata",
                                    "kind",
                                    "froms",
                                    "tos",
                                    "value"
                                  ]
                                }
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Wallets:IncomingTransaction"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "blockchainEvent"
                          ],
                          "title": "Wallets:IncomingTransaction",
                          "description": "A \"`Wallets:IncomingTransaction`\" activity represents when our indexers detected an incoming transaction into a wallet. This activity kind has to be used with the rule kind \"`ChainalysisTransactionScreening`\" (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page), and the action kind \"`NoAction`\", meaning that no actual action will be taken as a result of the Chainalysis screening, other than notifying you through a webhook event if the policy is triggered. The reason for that, is that the incoming transaction is already on-chain, so the funds are already in the wallet, we cannot block that transfer on chain."
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "body": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Alias:Modify"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Alias:Modify"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Permissions:Assign"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "permissionId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "permissionId"
                                          ]
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Permissions:Assign"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Permissions:Modify"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "permissionId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "permissionId"
                                          ]
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Permissions:Modify"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "properties": {
                                            "approvalGroups": {
                                              "items": {
                                                "properties": {
                                                  "approvers": {
                                                    "properties": {
                                                      "userId": {
                                                        "properties": {
                                                          "in": {
                                                            "items": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "type": "array",
                                                            "maxItems": 100,
                                                            "minItems": 1
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object",
                                                        "required": [
                                                          "in"
                                                        ]
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object"
                                                  },
                                                  "initiatorCanApprove": {
                                                    "type": "boolean",
                                                    "description": "Whether the initiator of the activity can participate in the approval."
                                                  },
                                                  "name": {
                                                    "type": "string"
                                                  },
                                                  "quorum": {
                                                    "type": "integer",
                                                    "minimum": 1
                                                  }
                                                },
                                                "additionalProperties": false,
                                                "type": "object",
                                                "required": [
                                                  "quorum",
                                                  "approvers"
                                                ]
                                              },
                                              "type": "array",
                                              "minItems": 1
                                            },
                                            "autoRejectTimeout": {
                                              "type": "integer",
                                              "minimum": 1
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "RequestApproval"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind",
                                            "approvalGroups"
                                          ],
                                          "title": "RequestApproval",
                                          "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Policies:Modify"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "policyId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "policyId"
                                          ]
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "properties": {
                                            "configuration": {
                                              "additionalProperties": false,
                                              "type": "object"
                                            },
                                            "kind": {
                                              "type": "string",
                                              "enum": [
                                                "AlwaysTrigger"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object",
                                          "required": [
                                            "kind"
                                          ],
                                          "title": "AlwaysTrigger",
                                          "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Policies:Modify"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "approvalGroups": {
                                                  "items": {
                                                    "properties": {
                                                      "approvers": {
                                                        "properties": {
                                                          "userId": {
                                                            "properties": {
                                                              "in": {
                                                                "items": {
                                                                  "type": "string",
                                                                  "minLength": 1
                                                                },
                                                                "type": "array",
                                                                "maxItems": 100,
                                                                "minItems": 1
                                                              }
                                                            },
                                                            "additionalProperties": false,
                                                            "type": "object",
                                                            "required": [
                                                              "in"
                                                            ]
                                                          }
                                                        },
                                                        "additionalProperties": false,
                                                        "type": "object"
                                                      },
                                                      "initiatorCanApprove": {
                                                        "type": "boolean",
                                                        "description": "Whether the initiator of the activity can participate in the approval."
                                                      },
                                                      "name": {
                                                        "type": "string"
                                                      },
                                                      "quorum": {
                                                        "type": "integer",
                                                        "minimum": 1
                                                      }
                                                    },
                                                    "additionalProperties": false,
                                                    "type": "object",
                                                    "required": [
                                                      "quorum",
                                                      "approvers"
                                                    ]
                                                  },
                                                  "type": "array",
                                                  "minItems": 1
                                                },
                                                "autoRejectTimeout": {
                                                  "type": "integer",
                                                  "minimum": 1
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "RequestApproval"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "approvalGroups"
                                              ],
                                              "title": "RequestApproval",
                                              "description": "\nThis action means that activity will first require an Approval process to be completed before it can  be executed (or be aborted if someone rejects it during the approval process).\n\nOne or several groups of approvers need to be specified. These groups define who is allowed to approve / reject an activity.\n\nThe activity will only be executed if all approver groups reach their \"quorum\" of approvals. Otherwise, if any one user within any approver group rejects, then the activity is aborted and the call is not executed.\n\nThe example below shows a `RequestApproval` action, configured with one approval group requiring 2 approvals amongst three specific users.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"RequestApproval\",\n    \"autoRejectTimeout\": 60, // minutes\n    \"approvalGroups\": [\n      {\n        \"name\": \"Admins\",\n        \"quorum\": 2, // only 2 approvers required in that group \n        \"approvers\": {\n          \"userId\": {\n            \"in\": [\"us-...1\", \"us-...2\", \"us-...3\"],\n          }\n        }\n      }\n    ],\n\n  }\n}\n```\n\nYou **cannot approve your own requests**\n\nPlease make your policies won't require a requester to approve his/her own request so you don't get blocked.\n\n*Example:* Company has 3 users allowed to modify policies. They create a policy that requires approval from 3 out of the 3 users for any future policy modification. In this case, they get cannot modify policies anymore: whoever requests a modification cannot approve, and the policy is therefore always missing one approver. They need to invite a new user and give him the rights to update the policy, so he can lower the quorum and the 3 original users can approve the modification.\n    "
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "Block"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "Block",
                                              "description": "This action means that the activity will be blocked if the policy is triggered.\n\n```json\n{\n  \"action\": {\n    \"kind\": \"Block\"\n  }\n}\n```\n"
                                            },
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NoAction"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "NoAction",
                                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Wallets:Sign"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "walletId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            },
                                            "walletTags": {
                                              "properties": {
                                                "hasAll": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                },
                                                "hasAny": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object"
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "additionalProperties": false,
                                                  "type": "object"
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "AlwaysTrigger"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "AlwaysTrigger",
                                              "description": "This rule will always be triggered, meaning that if this rule is defined on a policy, the policy will always trigger the policy action, regardless of the activity details."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "addresses": {
                                                      "items": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "type": "array",
                                                      "description": "Whitelisted recipient addresses"
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "addresses"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionRecipientWhitelist"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionRecipientWhitelist",
                                              "description": "This rule will trigger if the destination address *is NOT whitelisted*."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "currency": {
                                                      "type": "string",
                                                      "enum": [
                                                        "USD"
                                                      ],
                                                      "description": "Fiat currency, currently only `USD`"
                                                    },
                                                    "limit": {
                                                      "type": "number",
                                                      "description": "Amount limit in `currency`"
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "limit",
                                                    "currency"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionAmountLimit"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionAmountLimit",
                                              "description": "This rule will trigger if the wallet activity detected is transferring some value which amount is greater than a given limit. Note: If the fiat amount of the wallet activity cannot be evaluated for any reason (eg. market prices are not available, or eg. the amount cannot be inferred from a wallet signature request, etc.), by default the rule will trigger the policy (this is called \"failing closed\" and is generally considered a security best practice)."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "currency": {
                                                      "type": "string",
                                                      "enum": [
                                                        "USD"
                                                      ],
                                                      "description": "Currency for the amount limit above"
                                                    },
                                                    "limit": {
                                                      "type": "number",
                                                      "description": "Amount limit in `currency`"
                                                    },
                                                    "timeframe": {
                                                      "type": "integer",
                                                      "maximum": 43200,
                                                      "minimum": 1,
                                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "limit",
                                                    "currency",
                                                    "timeframe"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionAmountVelocity"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionAmountVelocity",
                                              "description": "This rule will trigger if the cumulative amount transferred from a given wallet within a given timeframe is greater than a specified limit.  The aggregate amount evaluated is based only on the wallet that triggered the policy."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "limit": {
                                                      "type": "number",
                                                      "description": "Count limit"
                                                    },
                                                    "timeframe": {
                                                      "type": "integer",
                                                      "maximum": 43200,
                                                      "minimum": 1,
                                                      "description": "Time period in minutes. Minimum 1, Maximum 43,200."
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "limit",
                                                    "timeframe"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TransactionCountVelocity"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TransactionCountVelocity",
                                              "description": "This rule will trigger if the number of wallet activities for a given wallet within a given timeframe, is greater than a specified limit. The aggregate number of transactions evaluated is based only on the wallet that triggered the policy."
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "addresses": {
                                                      "properties": {
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "categoryIds"
                                                      ]
                                                    },
                                                    "alerts": {
                                                      "properties": {
                                                        "alertLevel": {
                                                          "type": "string",
                                                          "enum": [
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH",
                                                            "SEVERE"
                                                          ]
                                                        },
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "alertLevel",
                                                        "categoryIds"
                                                      ]
                                                    },
                                                    "exposures": {
                                                      "properties": {
                                                        "direct": {
                                                          "properties": {
                                                            "categoryIds": {
                                                              "items": {
                                                                "type": "integer",
                                                                "exclusiveMinimum": 0
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object",
                                                          "required": [
                                                            "categoryIds"
                                                          ]
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "direct"
                                                      ]
                                                    },
                                                    "fallbackBehaviours": {
                                                      "properties": {
                                                        "skipChainalysisFailure": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnscreenableTransaction": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedAsset": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedNetwork": {
                                                          "type": "boolean"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "skipUnscreenableTransaction",
                                                        "skipUnsupportedNetwork",
                                                        "skipUnsupportedAsset",
                                                        "skipChainalysisFailure"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "alerts",
                                                    "exposures",
                                                    "addresses",
                                                    "fallbackBehaviours"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "ChainalysisTransactionPrescreening"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ]
                                            },
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "autoClearAfterDeliveredTimeoutSeconds": {
                                                      "type": "integer",
                                                      "minimum": 0
                                                    },
                                                    "autoTriggerTimeoutSeconds": {
                                                      "type": "integer",
                                                      "minimum": 0
                                                    },
                                                    "vendor": {
                                                      "type": "string",
                                                      "enum": [
                                                        "Notabene"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "vendor",
                                                    "autoTriggerTimeoutSeconds"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "TravelRuleTransactionPrescreening"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "TravelRuleTransactionPrescreening",
                                              "description": "This rule can only be used once the Notabene integration is activated from the Dfns dashboard settings (see more on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) integration page).\n    \n    It's a rule based on [Notabene](https://docs.dfns.co/integrations/travel-rule/notabene) [TravelRule](https://docs.dfns.co/integrations/travel-rule) integration. It ***ONLY*** applies to Dfns [Transfer Asset](https://docs.dfns.co/api-reference/wallets/transfer-asset) Api Calls. It is NOT supported for Transfers initiated via the dashboard. Upon transfer attempt with an optional [TravelRule](https://docs.dfns.co/api-reference/wallets/transfer-asset#body-travel-rule) payload, we will call Notabene's APIs on your behalf to both confirm the validity of the travel rule message and submit it for processing. Dfns then waits for a response from the counterparty (for custodial transfers) or Notabene (for non-custodial transfers).\n\nIt's called \"Pre\"-screening, because the transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                            }
                                          ]
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Wallets:Sign"
                                    },
                                    {
                                      "properties": {
                                        "action": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "NoAction"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind"
                                              ],
                                              "title": "NoAction",
                                              "description": "\n    This action kind means that nothing will happen after policy rule evaluation. It's meant to be used with policy rules \"`ChainalysisTransactionPrescreening`\" or \"`ChainalysisTransactionScreening`\". This action is for when you just want the KYT analysis rule to be run, and then if triggered, those result returned in a `policy.triggered` [Webhook Event](https://docs.dfns.co/api-reference/webhook-events).\n\n```json\n{\n  \"action\": {\n    \"kind\": \"NoAction\"\n  }\n}\n```\n    "
                                            }
                                          ]
                                        },
                                        "activityKind": {
                                          "type": "string",
                                          "enum": [
                                            "Wallets:IncomingTransaction"
                                          ]
                                        },
                                        "dateCreated": {
                                          "type": "string"
                                        },
                                        "dateUpdated": {
                                          "type": "string"
                                        },
                                        "filters": {
                                          "properties": {
                                            "walletId": {
                                              "properties": {
                                                "in": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "in"
                                              ]
                                            },
                                            "walletTags": {
                                              "properties": {
                                                "hasAll": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                },
                                                "hasAny": {
                                                  "items": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "type": "array",
                                                  "maxItems": 100,
                                                  "minItems": 1
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object"
                                            }
                                          },
                                          "additionalProperties": false,
                                          "type": "object"
                                        },
                                        "id": {
                                          "type": "string"
                                        },
                                        "name": {
                                          "type": "string"
                                        },
                                        "rule": {
                                          "oneOf": [
                                            {
                                              "properties": {
                                                "configuration": {
                                                  "properties": {
                                                    "alerts": {
                                                      "properties": {
                                                        "alertLevel": {
                                                          "type": "string",
                                                          "enum": [
                                                            "LOW",
                                                            "MEDIUM",
                                                            "HIGH",
                                                            "SEVERE"
                                                          ]
                                                        },
                                                        "categoryIds": {
                                                          "items": {
                                                            "type": "integer",
                                                            "exclusiveMinimum": 0
                                                          },
                                                          "type": "array"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "alertLevel",
                                                        "categoryIds"
                                                      ]
                                                    },
                                                    "exposures": {
                                                      "properties": {
                                                        "direct": {
                                                          "properties": {
                                                            "categoryIds": {
                                                              "items": {
                                                                "type": "integer",
                                                                "exclusiveMinimum": 0
                                                              },
                                                              "type": "array"
                                                            }
                                                          },
                                                          "type": "object",
                                                          "required": [
                                                            "categoryIds"
                                                          ]
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "direct"
                                                      ]
                                                    },
                                                    "fallbackBehaviours": {
                                                      "properties": {
                                                        "skipChainalysisFailure": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnscreenableTransaction": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedAsset": {
                                                          "type": "boolean"
                                                        },
                                                        "skipUnsupportedNetwork": {
                                                          "type": "boolean"
                                                        }
                                                      },
                                                      "type": "object",
                                                      "required": [
                                                        "skipUnscreenableTransaction",
                                                        "skipUnsupportedNetwork",
                                                        "skipUnsupportedAsset",
                                                        "skipChainalysisFailure"
                                                      ]
                                                    }
                                                  },
                                                  "additionalProperties": false,
                                                  "type": "object",
                                                  "required": [
                                                    "alerts",
                                                    "exposures",
                                                    "fallbackBehaviours"
                                                  ]
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "enum": [
                                                    "ChainalysisTransactionScreening"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false,
                                              "type": "object",
                                              "required": [
                                                "kind",
                                                "configuration"
                                              ],
                                              "title": "ChainalysisTransactionPrescreening",
                                              "description": "This rule can only be used once the Chainalysis integration is activated from the Dfns dashboard settings. (see more on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) integration page).\n    \n    It's a rule based on [Chainalysis](https://docs.dfns.co/integrations/aml-kyt/chainalysis) KYT integration (Know-Your-Transaction). Upon transfer attempt, we will first register the transfer with Chainalysis (as a [\"withdrawal attempt\"](https://docs.chainalysis.com/api/kyt/#registration-register-a-withdrawal-attempt)), and fetch the screening results (alerts, exposures, addresses detected). Based on the results, and the configuration of this rule, the policy will be triggered.\n\nIt's called \"Pre\"-screening, because the scanned transaction is not on chain yet, it's still a transaction attempt (before the transaction actually make it on chain)."
                                            }
                                          ]
                                        },
                                        "status": {
                                          "type": "string",
                                          "enum": [
                                            "Active",
                                            "Archived"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "id",
                                        "name",
                                        "status",
                                        "activityKind",
                                        "rule",
                                        "action"
                                      ],
                                      "title": "Wallets:IncomingTransaction"
                                    }
                                  ]
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "dateResolved": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "entityId": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Policy"
                                  ]
                                },
                                "operationKind": {
                                  "type": "string",
                                  "enum": [
                                    "Update"
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "appId": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Applied",
                                    "Failed",
                                    "Pending",
                                    "Rejected"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "requester",
                                "kind",
                                "operationKind",
                                "status",
                                "entityId",
                                "dateCreated",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Policies:Modify"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Policies:Modify",
                          "description": "\n      A \"`Policies:Modify`\" activity represents any activity which involves updating or archiving a policy. These activities are Policy change requests, created as a result of calling either:\n\n* the endpoint [Update Policy](https://docs.dfns.co/api-reference/policies/update-policy)\n* the endpoint [Delete Policy](https://docs.dfns.co/api-reference/policies/delete-policy)\n"
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "body": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "isArchived": {
                                      "type": "boolean"
                                    },
                                    "isImmutable": {
                                      "type": "boolean"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "operations": {
                                      "items": {
                                        "type": "string"
                                      },
                                      "type": "array"
                                    },
                                    "status": {
                                      "type": "string",
                                      "enum": [
                                        "Active"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "name",
                                    "status",
                                    "operations",
                                    "isImmutable",
                                    "isArchived"
                                  ]
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "dateResolved": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "entityId": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Permission"
                                  ]
                                },
                                "operationKind": {
                                  "type": "string",
                                  "enum": [
                                    "Update"
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "appId": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Applied",
                                    "Failed",
                                    "Pending",
                                    "Rejected"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "requester",
                                "status",
                                "entityId",
                                "dateCreated",
                                "kind",
                                "operationKind",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Permissions:Modify"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Permissions:Modify",
                          "description": "\n      A \"`Permissions:Modify`\" activity represents any activity which involves updating or archiving a permission. These activities are Permission change requests, created as a result of calling either:\n\n* the endpoint [Update Permission](https://docs.dfns.co/api-reference/permissions/update-permission)\n* the endpoint [Delete Permission](https://docs.dfns.co/api-reference/permissions/delete-permission)\n"
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "approvalId": {
                                  "type": "string"
                                },
                                "body": {
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "identityId": {
                                      "type": "string"
                                    },
                                    "isImmutable": {
                                      "type": "boolean"
                                    },
                                    "permissionId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "id",
                                    "permissionId",
                                    "identityId",
                                    "isImmutable"
                                  ]
                                },
                                "dateCreated": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "dateResolved": {
                                  "type": "string",
                                  "format": "date-time"
                                },
                                "entityId": {
                                  "type": "string"
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Assignment"
                                  ]
                                },
                                "operationKind": {
                                  "type": "string",
                                  "enum": [
                                    "Create",
                                    "Delete"
                                  ]
                                },
                                "requester": {
                                  "properties": {
                                    "appId": {
                                      "type": "string"
                                    },
                                    "tokenId": {
                                      "type": "string"
                                    },
                                    "userId": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "userId"
                                  ]
                                },
                                "status": {
                                  "type": "string",
                                  "enum": [
                                    "Applied",
                                    "Failed",
                                    "Pending",
                                    "Rejected"
                                  ]
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "required": [
                                "id",
                                "requester",
                                "status",
                                "entityId",
                                "dateCreated",
                                "kind",
                                "operationKind",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Permissions:Assign"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Permissions:Assign",
                          "description": "\n      A \"`Permissions:Assign`\" activity represents any activity which involves assigning a permission (or revoking it, aka \"deleting a permission assignment\"). These activities are Assignment change requests, created as a result of calling either:\n\n* the endpoint [Assign Permission](https://docs.dfns.co/api-reference/permissions/assign-permission)\n* the endpoint [Revoke Permission](https://docs.dfns.co/api-reference/permissions/revoke-permission)\n"
                        },
                        {
                          "properties": {
                            "changeRequest": {
                              "properties": {
                                "body": {
                                  "oneOf": [
                                    {
                                      "properties": {
                                        "alias": {
                                          "type": "string"
                                        },
                                        "description": {
                                          "type": "string",
                                          "maxLength": 200,
                                          "minLength": 1
                                        },
                                        "entityId": {
                                          "type": "string"
                                        },
                                        "operationKind": {
                                          "type": "string",
                                          "enum": [
                                            "Create"
                                          ]
                                        },
                                        "values": {
                                          "properties": {
                                            "add": {
                                              "items": {
                                                "properties": {
                                                  "memo": {
                                                    "type": "string",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9]+$"
                                                  },
                                                  "network": {
                                                    "$ref": "#/components/schemas/Network",
                                                    "summary": null,
                                                    "description": null
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "maxLength": 300,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9_:-]+$"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "network",
                                                  "value"
                                                ]
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "add"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "entityId",
                                        "alias",
                                        "operationKind",
                                        "values"
                                      ]
                                    },
                                    {
                                      "properties": {
                                        "alias": {
                                          "type": "string"
                                        },
                                        "description": {
                                          "type": "string",
                                          "maxLength": 200,
                                          "minLength": 1
                                        },
                                        "entityId": {
                                          "type": "string"
                                        },
                                        "operationKind": {
                                          "type": "string",
                                          "enum": [
                                            "Update"
                                          ]
                                        },
                                        "values": {
                                          "properties": {
                                            "add": {
                                              "items": {
                                                "properties": {
                                                  "memo": {
                                                    "type": "string",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9]+$"
                                                  },
                                                  "network": {
                                                    "$ref": "#/components/schemas/Network",
                                                    "summary": null,
                                                    "description": null
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "maxLength": 300,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9_:-]+$"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "network",
                                                  "value"
                                                ]
                                              },
                                              "type": "array"
                                            },
                                            "remove": {
                                              "items": {
                                                "properties": {
                                                  "memo": {
                                                    "type": "string",
                                                    "maxLength": 64,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9]+$"
                                                  },
                                                  "network": {
                                                    "$ref": "#/components/schemas/Network",
                                                    "summary": null,
                                                    "description": null
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "maxLength": 300,
                                                    "minLength": 1,
                                                    "pattern": "^[a-zA-Z0-9_:-]+$"
                                                  }
                                                },
                                                "type": "object",
                                                "required": [
                                                  "network",
                                                  "value"
                                                ]
                                              },
                                              "type": "array"
                                            }
                                          },
                                          "type": "object",
                                          "required": [
                                            "add",
                                            "remove"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false,
                                      "type": "object",
                                      "required": [
                                        "entityId",
                                        "alias",
                                        "operationKind",
                                        "values"
                                      ]
                                    },
                                    {
                                      "properties": {
                                        "alias": {
                                          "type": "string"
                                        },
                                        "entityId": {
                                          "type": "string"
                                        },
                                        "operationKind": {
                                          "type": "string",
                                          "enum": [
                                            "Delete"
                                          ]
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "entityId",
                                        "alias",
                                        "operationKind"
                                      ]
                                    }
                                  ]
                                },
                                "id": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string",
                                  "enum": [
                                    "Alias"
                                  ]
                                }
                              },
                              "type": "object",
                              "required": [
                                "id",
                                "kind",
                                "body"
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Alias:Modify"
                              ]
                            }
                          },
                          "type": "object",
                          "required": [
                            "kind",
                            "changeRequest"
                          ],
                          "title": "Alias:Modify",
                          "description": ""
                        }
                      ]
                    },
                    "dateCreated": {
                      "type": "string"
                    },
                    "dateResolved": {
                      "type": "string"
                    },
                    "dateUpdated": {
                      "type": "string"
                    },
                    "decisions": {
                      "items": {
                        "properties": {
                          "date": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "userId": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string",
                            "enum": [
                              "Approved",
                              "Denied"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "userId",
                          "date",
                          "reason",
                          "value"
                        ]
                      },
                      "type": "array"
                    },
                    "expirationDate": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "initiatorId": {
                      "type": "string"
                    },
                    "policyEvaluations": {
                      "items": {
                        "properties": {
                          "policyId": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          },
                          "triggered": {
                            "type": "boolean"
                          }
                        },
                        "type": "object",
                        "required": [
                          "policyId",
                          "triggered",
                          "reason"
                        ]
                      },
                      "type": "array"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Approved",
                        "Denied",
                        "Expired"
                      ]
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "id",
                    "initiatorId",
                    "activity",
                    "status",
                    "dateUpdated",
                    "policyEvaluations",
                    "decisions"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n❌ Service Account\n\n#### Required Permissions\n\n`Policies:Approvals:Approve`: Always required."
        }
      }
    },
    "/wallets": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "List Wallets",
        "description": "Retrieves the list of Wallets in your organization. You can filter the results by owner (either by owner id or owner username). Pagination is supported via limit and paginationToken parameters.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "ownerId",
            "in": "query",
            "description": "@deprecated use owner instead",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "@deprecated use owner instead"
            }
          },
          {
            "name": "ownerUsername",
            "in": "query",
            "description": "@deprecated use owner instead",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "@deprecated use owner instead"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Wallet",
                        "summary": null,
                        "description": null
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Create Wallet",
        "description": "Creates a new Wallet associated with the given chain (such as Bitcoin or Ethereum ). Returns a new wallet entity.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "delayDelegation": {
                    "type": "boolean",
                    "description": "Specify if you want to create the wallet from a service account and later [delegate it](/api-reference/keys/delegate-key) to an end user.",
                    "default": false
                  },
                  "delegateTo": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "ID of the end user to delegate this wallet to. The wallet will only be usable by the end user. More info [here](https://docs.dfns.co/advanced/delegated-signing).",
                    "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "User-defined value that can be used to correlate the entity with an external system"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100,
                    "description": "Wallet nickname."
                  },
                  "network": {
                    "type": "string",
                    "enum": [
                      "Algorand",
                      "AlgorandTestnet",
                      "Aptos",
                      "AptosTestnet",
                      "ArbitrumOne",
                      "ArbitrumSepolia",
                      "AvalancheC",
                      "AvalancheCFuji",
                      "BabylonGenesis",
                      "BabylonTestnet5",
                      "Base",
                      "BaseSepolia",
                      "Berachain",
                      "BerachainBepolia",
                      "Bitcoin",
                      "BitcoinSignet",
                      "BitcoinTestnet3",
                      "BitcoinCash",
                      "Bob",
                      "BobSepolia",
                      "Bsc",
                      "BscTestnet",
                      "Canton",
                      "CantonTestnet",
                      "Cardano",
                      "CardanoPreprod",
                      "Celo",
                      "CeloAlfajores",
                      "Codex",
                      "CodexSepolia",
                      "CosmosHub4",
                      "CosmosIcsTestnet",
                      "Dogecoin",
                      "Ethereum",
                      "EthereumGoerli",
                      "EthereumSepolia",
                      "EthereumHolesky",
                      "EthereumHoodi",
                      "FantomOpera",
                      "FantomTestnet",
                      "FlareC",
                      "FlareCCoston2",
                      "Hedera",
                      "HederaTestnet",
                      "Ink",
                      "InkSepolia",
                      "InternetComputer",
                      "Ion",
                      "IonTestnet",
                      "Iota",
                      "IotaTestnet",
                      "KadenaTestnet4",
                      "Kadena",
                      "Kaspa",
                      "Kusama",
                      "Litecoin",
                      "Near",
                      "NearTestnet",
                      "Optimism",
                      "OptimismSepolia",
                      "Origyn",
                      "Plume",
                      "PlumeSepolia",
                      "Polkadot",
                      "Polygon",
                      "PolygonAmoy",
                      "Polymesh",
                      "PolymeshTestnet",
                      "Race",
                      "RaceSepolia",
                      "SeiAtlantic2",
                      "SeiPacific1",
                      "Solana",
                      "SolanaDevnet",
                      "Stellar",
                      "StellarTestnet",
                      "Sui",
                      "SuiTestnet",
                      "Tsc",
                      "TscTestnet1",
                      "Tezos",
                      "TezosGhostnet",
                      "Ton",
                      "TonTestnet",
                      "Tron",
                      "TronNile",
                      "Westend",
                      "XrpLedger",
                      "XrpLedgerTestnet"
                    ],
                    "description": "Network used for the wallet."
                  },
                  "signingKey": {
                    "properties": {
                      "curve": {
                        "type": "string",
                        "enum": [
                          "ed25519",
                          "secp256k1",
                          "stark"
                        ],
                        "description": "Use this to specify the new key curve for networks that support multiple key formats."
                      },
                      "id": {
                        "type": "string",
                        "maxLength": 64,
                        "pattern": "key-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                        "description": "Use this parameter to create a wallet from an existing key. This enables one key to be used across multiple networks and have the same address if networks share the same address format, ex. `Ethereum` and `Polygon`. If specified, requires the `Keys:Reuse` permission. If the key is delegated to an end user, then the new wallet will be automatically delegated to the same end user.",
                        "example": "key-01snl-t56gb-j8tsok0vn802p80i"
                      },
                      "scheme": {
                        "type": "string",
                        "enum": [
                          "ECDSA",
                          "EdDSA",
                          "Schnorr"
                        ],
                        "description": "Use this to specify the new key scheme for networks that support multiple key formats. ex. use `Schnorr` to create a `Bitcoin Taproot` wallet."
                      },
                      "storeId": {
                        "type": "string",
                        "description": "Use this to specify the key store the key material is saved to."
                      }
                    },
                    "type": "object",
                    "description": "Options for the wallet's underlying key"
                  },
                  "tags": {
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_.:/+-]{1,100}$",
                      "description": "Wallet Tag."
                    },
                    "type": "array",
                    "maxItems": 10,
                    "description": "List of tags to be created for this wallet. If specified, requires the `Wallets:Tags:Add` permission, like the [Tag Wallet](https://docs.dfns.co/api-reference/wallets/tag-wallet) endpoint."
                  },
                  "validatorId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "cv-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the validator on which the wallet is created for Canton networks",
                    "example": "cv-7jeof-m584r-p35ucm37ko3cqgts"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "network"
                ]
              },
              "examples": {
                "Bitcoin Taproot": {
                  "value": {
                    "network": "BitcoinSignet",
                    "signingKey": {
                      "scheme": "Schnorr"
                    }
                  }
                },
                "Canton": {
                  "value": {
                    "network": "CantonDevnet",
                    "validatorId": "cv-12o3k-t44tq-9ecb13hivsksiafg"
                  }
                },
                "Ethereum": {
                  "value": {
                    "network": "Ethereum",
                    "name": "trading hot wallet"
                  }
                },
                "Multi chain": {
                  "value": {
                    "network": "BaseSepolia",
                    "signingKey": {
                      "id": "key-b56ng-qm1c8-pqaki69j8jmmafo"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Wallet",
                      "summary": null,
                      "description": null
                    },
                    {
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Create`: Always required   \n`Keys:Create`: Required if wallet creation also creates a new [Key entity](https://docs.dfns.co/api-reference/keys). This is the default behavior.   \n`Keys:Reuse`: Required if `signingKey.id` is specified. Wallet will reuse an existing key instead of creating a new one.   \n`Keys:Delegate`: Required if `delegateTo` is specified.   \n`Wallets:Tags:Add`: Required if `tags` are specified."
        }
      }
    },
    "/wallets/all/history": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "List Org Wallet History",
        "description": "Retrieve the transaction history across all wallets within a specified timeframe.",
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "items": {
                          "items": {
                            "properties": {
                              "amount": {
                                "type": "string"
                              },
                              "asset": {
                                "type": "string"
                              },
                              "decimals": {
                                "type": "string"
                              },
                              "direction": {
                                "type": "string"
                              },
                              "fee": {
                                "type": "string"
                              },
                              "feeDecimals": {
                                "type": "string"
                              },
                              "feeSymbol": {
                                "type": "string"
                              },
                              "from": {
                                "type": "string"
                              },
                              "network": {
                                "type": "string"
                              },
                              "symbol": {
                                "type": "string"
                              },
                              "timestamp": {
                                "type": "string"
                              },
                              "to": {
                                "type": "string"
                              },
                              "tokenId": {
                                "type": "string"
                              },
                              "txHash": {
                                "type": "string"
                              },
                              "walletId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "timestamp",
                              "walletId",
                              "network",
                              "direction",
                              "txHash"
                            ]
                          },
                          "type": "array"
                        },
                        "nextPageToken": {
                          "type": "string"
                        },
                        "orgId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "orgId",
                        "items"
                      ]
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Read`: Always required."
        }
      }
    },
    "/wallets/import": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Import Wallet",
        "description": "<Warning>\nThis endpoint is not enabled by default. [Contact Dfns](https://support.dfns.co) to have it activated.\n</Warning>\n\nDfns secures private keys by generating them as MPC key shares in our decentralized key management network.  This happens by default when you [create a wallet](https://docs.dfns.co/api-reference/wallets/create-wallet).\n\nIn some circumstances, however, you may need to import an existing wallet (an existing private key) into Dfns infrastructure, instead of creating a brand new wallet with Dfns and transfer funds to it. As an example, you might want to keep an existing wallet if its address is tied to a smart contract which you don't want to re-deploy.\n\nIn such a case, Dfns exposes this wallet import API endpoint, which can be used in conjunction with our [import SDK](https://github.com/dfns/dfns-sdk-ts/tree/m/examples/sdk/import-wallet).   Note this is intended to be used only to migrate wallets when first onboarding onto the Dfns platform.\n\n<Danger>\nDfns can not guarantee the security of imported wallets, as we have no way to control who had access to the private key prior to import.  For this reason, this feature is restricted to Enterprise customers who have signed a contractual addendum limiting our liability for imported keys.  Please contact your sales representative for more information.\n</Danger>\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "curve": {
                    "type": "string",
                    "enum": [
                      "ed25519",
                      "secp256k1",
                      "stark"
                    ]
                  },
                  "encryptedKeyShares": {
                    "items": {
                      "properties": {
                        "encryptedKeyShare": {
                          "type": "string",
                          "minLength": 1
                        },
                        "signerId": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "type": "object",
                      "required": [
                        "signerId",
                        "encryptedKeyShare"
                      ]
                    },
                    "type": "array",
                    "minItems": 1
                  },
                  "externalId": {
                    "type": "string"
                  },
                  "minSigners": {
                    "type": "integer",
                    "exclusiveMinimum": 0
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "network": {
                    "type": "string",
                    "enum": [
                      "Algorand",
                      "AlgorandTestnet",
                      "Aptos",
                      "AptosTestnet",
                      "ArbitrumOne",
                      "ArbitrumSepolia",
                      "AvalancheC",
                      "AvalancheCFuji",
                      "BabylonGenesis",
                      "BabylonTestnet5",
                      "Base",
                      "BaseSepolia",
                      "Berachain",
                      "BerachainBepolia",
                      "Bitcoin",
                      "BitcoinSignet",
                      "BitcoinTestnet3",
                      "BitcoinCash",
                      "Bob",
                      "BobSepolia",
                      "Bsc",
                      "BscTestnet",
                      "Canton",
                      "CantonTestnet",
                      "Cardano",
                      "CardanoPreprod",
                      "Celo",
                      "CeloAlfajores",
                      "Codex",
                      "CodexSepolia",
                      "CosmosHub4",
                      "CosmosIcsTestnet",
                      "Dogecoin",
                      "Ethereum",
                      "EthereumGoerli",
                      "EthereumSepolia",
                      "EthereumHolesky",
                      "EthereumHoodi",
                      "FantomOpera",
                      "FantomTestnet",
                      "FlareC",
                      "FlareCCoston2",
                      "Hedera",
                      "HederaTestnet",
                      "Ink",
                      "InkSepolia",
                      "InternetComputer",
                      "Ion",
                      "IonTestnet",
                      "Iota",
                      "IotaTestnet",
                      "KadenaTestnet4",
                      "Kadena",
                      "Kaspa",
                      "Kusama",
                      "Litecoin",
                      "Near",
                      "NearTestnet",
                      "Optimism",
                      "OptimismSepolia",
                      "Origyn",
                      "Plume",
                      "PlumeSepolia",
                      "Polkadot",
                      "Polygon",
                      "PolygonAmoy",
                      "Polymesh",
                      "PolymeshTestnet",
                      "Race",
                      "RaceSepolia",
                      "SeiAtlantic2",
                      "SeiPacific1",
                      "Solana",
                      "SolanaDevnet",
                      "Stellar",
                      "StellarTestnet",
                      "Sui",
                      "SuiTestnet",
                      "Tsc",
                      "TscTestnet1",
                      "Tezos",
                      "TezosGhostnet",
                      "Ton",
                      "TonTestnet",
                      "Tron",
                      "TronNile",
                      "Westend",
                      "XrpLedger",
                      "XrpLedgerTestnet"
                    ]
                  },
                  "protocol": {
                    "anyOf": [
                      {
                        "type": "string",
                        "enum": [
                          "CGGMP24",
                          "FROST",
                          "FROST_BITCOIN",
                          "GLOW20_DH",
                          "KU23"
                        ]
                      },
                      {
                        "type": "string",
                        "enum": [
                          "CGGMP21"
                        ]
                      }
                    ]
                  },
                  "validatorId": {
                    "type": "string",
                    "description": "Id of the validator on which the wallet is created"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "curve",
                  "protocol",
                  "minSigners",
                  "encryptedKeyShares",
                  "network"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Import`: Always required.   \n`Wallets:Create`: Always required."
        }
      }
    },
    "/wallets/{walletId}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Wallet",
        "description": "Retrieves a Wallet information by its ID.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Update Wallet",
        "description": "Updates the name of an existing wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "externalId": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  }
                },
                "additionalProperties": false,
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Wallet",
                      "summary": null,
                      "description": null
                    },
                    {
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Update`: Always required."
        }
      }
    },
    "/wallets/{walletId}/assets": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Wallet Assets",
        "description": "Retrieves a list of assets owned by the specified wallet.  Return values vary by chain as shown below.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "netWorth",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "assets": {
                      "items": {
                        "allOf": [
                          {
                            "oneOf": [
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Native"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind"
                                ]
                              },
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Aip21"
                                    ]
                                  },
                                  "metadata": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "metadata"
                                ]
                              },
                              {
                                "properties": {
                                  "assetId": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Asa"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "assetId"
                                ]
                              },
                              {
                                "properties": {
                                  "contract": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Erc20",
                                      "Trc20"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "contract"
                                ]
                              },
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Hts"
                                    ]
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "tokenId"
                                ]
                              },
                              {
                                "properties": {
                                  "coin": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Coin",
                                      "LockedCoin"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "coin"
                                ]
                              },
                              {
                                "properties": {
                                  "assetId": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Asset"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "assetId"
                                ]
                              },
                              {
                                "properties": {
                                  "assetCode": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Sep41"
                                    ]
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "issuer",
                                  "assetCode"
                                ]
                              },
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Trc10"
                                    ]
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "tokenId"
                                ]
                              },
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Spl",
                                      "Spl2022"
                                    ]
                                  },
                                  "mint": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "mint"
                                ]
                              },
                              {
                                "properties": {
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Tep74"
                                    ]
                                  },
                                  "master": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "kind",
                                  "master"
                                ]
                              }
                            ]
                          },
                          {
                            "properties": {
                              "balance": {
                                "type": "string"
                              },
                              "decimals": {
                                "type": "number"
                              },
                              "quotes": {
                                "properties": {
                                  "USD": {
                                    "type": "number"
                                  }
                                },
                                "type": "object"
                              },
                              "symbol": {
                                "type": "string"
                              },
                              "verified": {
                                "type": "boolean"
                              }
                            },
                            "type": "object",
                            "required": [
                              "decimals",
                              "balance"
                            ]
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "netWorth": {
                      "properties": {
                        "USD": {
                          "type": "number"
                        }
                      },
                      "type": "object"
                    },
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "walletId",
                    "network",
                    "assets"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/delegate": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Delegate Wallet",
        "description": "<Danger>\n  Delegate Wallet is deprecated. Please use [Delegate Key](https://docs.dfns.co/api-reference/keys/delegate-key) instead.\n  </Danger>\n\nIn most cases, when you want to implement Delegated Signing, simply have the end-user create the wallet, in which case it will the non-custodial from the start.  There are some rare cases, however, where the wallet must be created before the user has accessed the system.  To accommodate this, we've added the ability to create a wallet from a service account, and then later delegate it (ie. transfer ownership of it) to an end user via this endpoint.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "userId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Delegated"
                      ]
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "walletId",
                    "status"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Delegate`: Always required."
        }
      }
    },
    "/wallets/{walletId}/export": {
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Export Wallet",
        "description": "<Danger>\nExport Wallet is deprecated. Please use [Export Key](https://docs.dfns.co/api-reference/keys/export-key) instead.\n</Danger>",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "encryptionKey": {
                    "type": "string",
                    "minLength": 1
                  },
                  "supportedSchemes": {
                    "items": {
                      "properties": {
                        "curve": {
                          "type": "string",
                          "enum": [
                            "ed25519",
                            "secp256k1",
                            "stark"
                          ]
                        },
                        "protocol": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "CGGMP24",
                                "FROST",
                                "FROST_BITCOIN",
                                "GLOW20_DH",
                                "KU23"
                              ]
                            },
                            {
                              "type": "string",
                              "enum": [
                                "CGGMP21"
                              ]
                            }
                          ]
                        }
                      },
                      "additionalProperties": false,
                      "type": "object",
                      "required": [
                        "protocol",
                        "curve"
                      ]
                    },
                    "type": "array"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "encryptionKey",
                  "supportedSchemes"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "curve": {
                      "type": "string",
                      "enum": [
                        "ed25519",
                        "secp256k1",
                        "stark"
                      ]
                    },
                    "encryptedKeyShares": {
                      "items": {
                        "properties": {
                          "encryptedKeyShare": {
                            "type": "string",
                            "description": "Base64-encoded keyshare"
                          },
                          "signerId": {
                            "type": "string",
                            "description": "Base64-encoded ID of the signer exported the encrypted keyshare"
                          }
                        },
                        "type": "object",
                        "required": [
                          "signerId",
                          "encryptedKeyShare"
                        ]
                      },
                      "type": "array",
                      "description": "Keyshares of the exported wallet. They are encrypted with the provided encryption key. The exported private key is re-constructed from these keyshares."
                    },
                    "minSigners": {
                      "type": "number",
                      "description": "The TSS threshold of the wallet private signing key shares"
                    },
                    "protocol": {
                      "type": "string",
                      "enum": [
                        "CGGMP24",
                        "FROST",
                        "FROST_BITCOIN",
                        "GLOW20_DH",
                        "KU23"
                      ]
                    },
                    "publicKey": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "publicKey",
                    "protocol",
                    "curve",
                    "minSigners",
                    "encryptedKeyShares"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Export`: Always required."
        }
      }
    },
    "/wallets/{walletId}/history": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Wallet History",
        "description": "Retrieves a list of historical on chain activities for the specified wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "In",
                "Out"
              ]
            }
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "NativeTransfer",
                "Aip21Transfer",
                "AsaTransfer",
                "AssetTransfer",
                "CoinTransfer",
                "Erc20Transfer",
                "Erc721Transfer",
                "Hip17Transfer",
                "HtsTransfer",
                "Kip5Transfer",
                "LockedCoinTransfer",
                "Tep74Transfer",
                "Trc10Transfer",
                "Trc20Transfer",
                "Trc721Transfer",
                "Sep41Transfer",
                "SplTransfer",
                "Spl2022Transfer",
                "UtxoTransfer"
              ]
            }
          },
          {
            "name": "contract",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "properties": {
                        "items": {
                          "items": {
                            "oneOf": [
                              {
                                "properties": {
                                  "balanceId": {
                                    "type": "string"
                                  },
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "decimals": {
                                    "type": "number",
                                    "description": "@deprecated use metadata.asset.decimals instead"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "NativeTransfer"
                                    ]
                                  },
                                  "liquidityPool": {
                                    "type": "string"
                                  },
                                  "memo": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "symbol": {
                                    "type": "string",
                                    "description": "@deprecated use metadata.asset.symbol instead"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "@deprecated use metadata.asset.verified instead"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "value",
                                  "symbol",
                                  "decimals"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Aip21Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "metadataAddress": {
                                    "type": "string"
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "metadataAddress",
                                  "from",
                                  "to",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "assetId": {
                                    "type": "string"
                                  },
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "clawback": {
                                    "type": "boolean"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "AsaTransfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "optIn": {
                                    "type": "boolean"
                                  },
                                  "optOut": {
                                    "type": "boolean"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "assetId",
                                  "from",
                                  "to",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "assetId": {
                                    "type": "string"
                                  },
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "AssetTransfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "assetId",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "coin": {
                                    "type": "string"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "CoinTransfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "tos": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "coin",
                                  "from",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "contract": {
                                    "type": "string"
                                  },
                                  "decimals": {
                                    "type": "number",
                                    "description": "@deprecated use metadata.asset.decimals instead"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Erc20Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "symbol": {
                                    "type": "string",
                                    "description": "@deprecated use metadata.asset.symbol instead"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "@deprecated use metadata.asset.verified instead"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "contract",
                                  "from",
                                  "to",
                                  "value",
                                  "decimals"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "contract": {
                                    "type": "string"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Erc721Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "symbol": {
                                    "type": "string",
                                    "description": "@deprecated use metadata.asset.symbol instead"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "verified": {
                                    "type": "boolean",
                                    "description": "@deprecated use metadata.asset.verified instead"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "contract",
                                  "from",
                                  "to",
                                  "tokenId"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Hip17Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "serialNumber": {
                                    "type": "string"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "tokenId",
                                  "serialNumber"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "froms": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "HtsTransfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "tos": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "froms",
                                  "tos",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Kip5Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "module": {
                                    "type": "string"
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "sourceChain": {
                                    "type": "string"
                                  },
                                  "targetChain": {
                                    "type": "string"
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "value",
                                  "module"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "coin": {
                                    "type": "string"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "LockedCoinTransfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "tos": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "coin",
                                  "from",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "assetCode": {
                                    "type": "string"
                                  },
                                  "balanceId": {
                                    "type": "string"
                                  },
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "issuer": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Sep41Transfer"
                                    ]
                                  },
                                  "liquidityPool": {
                                    "type": "string"
                                  },
                                  "memo": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "issuer",
                                  "assetCode",
                                  "from",
                                  "to",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SplTransfer",
                                      "Spl2022Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "mint": {
                                    "type": "string"
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "mint",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Tep74Transfer"
                                    ]
                                  },
                                  "master": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "master",
                                  "from",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Trc10Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "tokenId",
                                  "from",
                                  "to",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "contract": {
                                    "type": "string"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Trc20Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "contract",
                                  "from",
                                  "to",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "contract": {
                                    "type": "string"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "from": {
                                    "type": "string"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Trc721Transfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "to": {
                                    "type": "string"
                                  },
                                  "tokenId": {
                                    "type": "string"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "contract",
                                  "from",
                                  "to",
                                  "tokenId"
                                ]
                              },
                              {
                                "properties": {
                                  "blockNumber": {
                                    "type": "number"
                                  },
                                  "direction": {
                                    "type": "string",
                                    "enum": [
                                      "In",
                                      "Out"
                                    ]
                                  },
                                  "fee": {
                                    "type": "string"
                                  },
                                  "froms": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "index": {
                                    "type": "string"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "UtxoTransfer"
                                    ]
                                  },
                                  "metadata": {
                                    "properties": {
                                      "asset": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      },
                                      "fee": {
                                        "properties": {
                                          "decimals": {
                                            "type": "integer"
                                          },
                                          "quotes": {
                                            "properties": {
                                              "EUR": {
                                                "type": "number"
                                              },
                                              "USD": {
                                                "type": "number"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "symbol": {
                                            "type": "string"
                                          },
                                          "verified": {
                                            "type": "boolean"
                                          }
                                        },
                                        "type": "object"
                                      }
                                    },
                                    "type": "object",
                                    "required": [
                                      "asset"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "timestamp": {
                                    "type": "string"
                                  },
                                  "tos": {
                                    "items": {
                                      "type": "string"
                                    },
                                    "type": "array"
                                  },
                                  "txHash": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  },
                                  "walletId": {
                                    "type": "string"
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "walletId",
                                  "direction",
                                  "network",
                                  "blockNumber",
                                  "txHash",
                                  "timestamp",
                                  "metadata",
                                  "kind",
                                  "froms",
                                  "tos",
                                  "value"
                                ]
                              }
                            ]
                          },
                          "type": "array"
                        },
                        "network": {
                          "$ref": "#/components/schemas/Network",
                          "summary": null,
                          "description": null
                        },
                        "nextPageToken": {
                          "type": "string"
                        },
                        "walletId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "walletId",
                        "network",
                        "items"
                      ]
                    },
                    {
                      "type": "string"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/nfts": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Wallet Nfts",
        "description": "Retrieves a list of NFTs owned by the specified Wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "nfts": {
                      "items": {
                        "oneOf": [
                          {
                            "properties": {
                              "assetId": {
                                "type": "string",
                                "description": "The NFT id."
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Asa"
                                ]
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The NFT symbol."
                              },
                              "tokenUri": {
                                "type": "string",
                                "description": "The NFT metadata URI."
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "assetId"
                            ],
                            "title": "Algorand NFT"
                          },
                          {
                            "properties": {
                              "contract": {
                                "type": "string",
                                "description": "contract address."
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Erc721",
                                  "Trc721"
                                ]
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The NFT symbol."
                              },
                              "tokenId": {
                                "type": "string",
                                "description": "The NFT id."
                              },
                              "tokenUri": {
                                "type": "string",
                                "description": "The NFT metadata URI."
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "contract",
                              "tokenId"
                            ],
                            "title": "ERC/TRC-721 NFT"
                          },
                          {
                            "properties": {
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Hip17"
                                ]
                              },
                              "serialNumber": {
                                "type": "string",
                                "description": "The NFT serial number."
                              },
                              "symbol": {
                                "type": "string",
                                "description": "The NFT symbol."
                              },
                              "tokenId": {
                                "type": "string",
                                "description": "The NFT id."
                              },
                              "tokenUri": {
                                "type": "string",
                                "description": "The NFT metadata URI."
                              }
                            },
                            "type": "object",
                            "required": [
                              "kind",
                              "tokenId",
                              "serialNumber"
                            ],
                            "title": "Hedera NFT"
                          }
                        ]
                      },
                      "type": "array"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "walletId",
                    "network",
                    "nfts"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/offers": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "List Offers",
        "description": "List all offers received on a specific wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Wallet id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "description": "Wallet id."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Offer",
                        "summary": null,
                        "description": null
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Offers:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/offers/{offerId}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Offer",
        "description": "Retrieve information about a specific offer received on your wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Wallet id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "description": "Wallet id."
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "description": "Offer id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "offer-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Offer id."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Offers:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/offers/{offerId}/accept": {
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Accept Offer",
        "description": "Accept an offer received on your wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Wallet id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "description": "Wallet id."
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "description": "Offer id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "offer-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Offer id."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Offers:Settle`: Always required."
        }
      }
    },
    "/wallets/{walletId}/offers/{offerId}/reject": {
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Reject Offer",
        "description": "Reject an offer received on your wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "Wallet id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "description": "Wallet id."
            }
          },
          {
            "name": "offerId",
            "in": "path",
            "description": "Offer id.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "offer-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Offer id."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Offers:Settle`: Always required."
        }
      }
    },
    "/wallets/{walletId}/signatures": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "List Signatures",
        "description": "List all signature requests for a specific wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "approvalId": {
                            "type": "string"
                          },
                          "dateConfirmed": {
                            "type": "string"
                          },
                          "datePolicyResolved": {
                            "type": "string"
                          },
                          "dateRequested": {
                            "type": "string"
                          },
                          "dateSigned": {
                            "type": "string"
                          },
                          "externalId": {
                            "type": "string"
                          },
                          "fee": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "keyId": {
                            "type": "string"
                          },
                          "network": {
                            "$ref": "#/components/schemas/Network",
                            "summary": null,
                            "description": null
                          },
                          "reason": {
                            "type": "string"
                          },
                          "requestBody": {
                            "oneOf": [
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "hash": {
                                    "type": "string",
                                    "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                                    "description": "32-byte hash in hex encoded format."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Hash"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "taprootMerkleRoot": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                                    "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "hash"
                                ],
                                "title": "Hash",
                                "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Message"
                                    ]
                                  },
                                  "message": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "An arbitrary hex encoded message."
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "message"
                                ],
                                "title": "Message",
                                "description": "Signs an arbitrary hex encoded arbitrary message."
                              },
                              {
                                "properties": {
                                  "address": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The address of the contract the signer's EOA will be delegated to."
                                  },
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "chainId": {
                                    "type": "number",
                                    "description": "Chain ID."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Eip7702"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "nonce": {
                                    "type": "number",
                                    "description": "The current nonce of the signer EOA."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "address",
                                  "nonce",
                                  "chainId"
                                ],
                                "title": "EIP-7702 Authorization",
                                "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Transaction"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "transaction": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The unsigned hex-encoded transaction."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "transaction"
                                ],
                                "title": "Transaction",
                                "description": "Signs an unsigned transaction."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "domain": {
                                    "properties": {
                                      "chainId": {
                                        "anyOf": [
                                          {
                                            "type": "integer",
                                            "exclusiveMinimum": 0
                                          },
                                          {
                                            "type": "string"
                                          }
                                        ],
                                        "description": "Chain ID."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the signing domain."
                                      },
                                      "salt": {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]{64}$",
                                        "description": "32-byte value as a last-resort domain separator."
                                      },
                                      "verifyingContract": {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]{40}$",
                                        "description": "The address of the contract that will verify the signature."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "Current major version of the signing domain."
                                      }
                                    },
                                    "additionalProperties": false,
                                    "type": "object",
                                    "description": "Domain separator."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Eip712"
                                    ]
                                  },
                                  "message": {
                                    "additionalProperties": {},
                                    "type": "object",
                                    "description": "Structured message to sign."
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "types": {
                                    "additionalProperties": {
                                      "items": {
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "required": [
                                          "name",
                                          "type"
                                        ]
                                      },
                                      "type": "array"
                                    },
                                    "type": "object",
                                    "description": "Type definitions."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "types",
                                  "domain",
                                  "message"
                                ],
                                "title": "EIP-712 TypedData",
                                "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Psbt"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "psbt": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The hex encoded PSBT."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "psbt"
                                ],
                                "title": "PSBT",
                                "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "format": {
                                    "type": "string",
                                    "enum": [
                                      "Simple",
                                      "Full"
                                    ],
                                    "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Bip322"
                                    ]
                                  },
                                  "message": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The generic message hex encoded."
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "message"
                                ],
                                "title": "BIP-322",
                                "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "command": {
                                    "type": "string",
                                    "description": "The Pact command JSON, serialized into a string."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "PactCommand"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "command"
                                ],
                                "title": "PactCommand",
                                "description": "Signs an unsigned Pact command."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SignDocDirect"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "signDoc": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The hex encoded `SignDoc` Protobuf."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "signDoc"
                                ],
                                "title": "SignDocDirect",
                                "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SignerPayload"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "payload": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                      },
                                      {
                                        "type": "object"
                                      }
                                    ],
                                    "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "payload"
                                ],
                                "title": "SignerPayload",
                                "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                              },
                              {
                                "properties": {
                                  "blockchainKind": {
                                    "$ref": "#/components/schemas/BlockchainKind",
                                    "summary": null,
                                    "description": null
                                  },
                                  "context": {
                                    "type": "string",
                                    "enum": [
                                      "Signature1"
                                    ]
                                  },
                                  "externalAad": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Cip8"
                                    ]
                                  },
                                  "network": {
                                    "$ref": "#/components/schemas/Network",
                                    "summary": null,
                                    "description": null
                                  },
                                  "payload": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The generic message hex encoded."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "context"
                                ],
                                "title": "CIP-8",
                                "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                              }
                            ]
                          },
                          "requester": {
                            "properties": {
                              "tokenId": {
                                "type": "string"
                              },
                              "userId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "userId"
                            ]
                          },
                          "signature": {
                            "properties": {
                              "encoded": {
                                "type": "string"
                              },
                              "r": {
                                "type": "string"
                              },
                              "recid": {
                                "type": "number"
                              },
                              "s": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "r",
                              "s"
                            ]
                          },
                          "signatures": {
                            "items": {
                              "properties": {
                                "encoded": {
                                  "type": "string"
                                },
                                "r": {
                                  "type": "string"
                                },
                                "recid": {
                                  "type": "number"
                                },
                                "s": {
                                  "type": "string"
                                }
                              },
                              "type": "object",
                              "required": [
                                "r",
                                "s"
                              ]
                            },
                            "type": "array"
                          },
                          "signedData": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Pending",
                              "Executing",
                              "Signed",
                              "Confirmed",
                              "Failed",
                              "Rejected"
                            ]
                          },
                          "txHash": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "keyId",
                          "requester",
                          "requestBody",
                          "status",
                          "dateRequested"
                        ]
                      },
                      "type": "array"
                    },
                    "keyId": {
                      "type": "string"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "keyId",
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Signatures:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Generate Signature",
        "description": "\n<Danger>\nGenerating Signatures from a Wallet is deprecated. Please use the Key's [Generate Signature](https://docs.dfns.co/api-reference/keys/generate-signature) endpoint instead.\n</Danger>\n",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "hash": {
                        "type": "string",
                        "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                        "description": "32-byte hash in hex encoded format."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Hash"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "taprootMerkleRoot": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                        "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "hash"
                    ],
                    "title": "Hash",
                    "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Message"
                        ]
                      },
                      "message": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "An arbitrary hex encoded message."
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "message"
                    ],
                    "title": "Message",
                    "description": "Signs an arbitrary hex encoded arbitrary message."
                  },
                  {
                    "properties": {
                      "address": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The address of the contract the signer's EOA will be delegated to."
                      },
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "chainId": {
                        "type": "number",
                        "description": "Chain ID."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Eip7702"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "nonce": {
                        "type": "number",
                        "description": "The current nonce of the signer EOA."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "address",
                      "nonce",
                      "chainId"
                    ],
                    "title": "EIP-7702 Authorization",
                    "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "transaction": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The unsigned hex-encoded transaction."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "transaction"
                    ],
                    "title": "Transaction",
                    "description": "Signs an unsigned transaction."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "domain": {
                        "properties": {
                          "chainId": {
                            "anyOf": [
                              {
                                "type": "integer",
                                "exclusiveMinimum": 0
                              },
                              {
                                "type": "string"
                              }
                            ],
                            "description": "Chain ID."
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the signing domain."
                          },
                          "salt": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{64}$",
                            "description": "32-byte value as a last-resort domain separator."
                          },
                          "verifyingContract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$",
                            "description": "The address of the contract that will verify the signature."
                          },
                          "version": {
                            "type": "string",
                            "description": "Current major version of the signing domain."
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": "Domain separator."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Eip712"
                        ]
                      },
                      "message": {
                        "additionalProperties": {},
                        "type": "object",
                        "description": "Structured message to sign."
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "types": {
                        "additionalProperties": {
                          "items": {
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "name",
                              "type"
                            ]
                          },
                          "type": "array"
                        },
                        "type": "object",
                        "description": "Type definitions."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "types",
                      "domain",
                      "message"
                    ],
                    "title": "EIP-712 TypedData",
                    "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Psbt"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "psbt": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The hex encoded PSBT."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "psbt"
                    ],
                    "title": "PSBT",
                    "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "format": {
                        "type": "string",
                        "enum": [
                          "Simple",
                          "Full"
                        ],
                        "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Bip322"
                        ]
                      },
                      "message": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The generic message hex encoded."
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "message"
                    ],
                    "title": "BIP-322",
                    "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "command": {
                        "type": "string",
                        "description": "The Pact command JSON, serialized into a string."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "PactCommand"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "command"
                    ],
                    "title": "PactCommand",
                    "description": "Signs an unsigned Pact command."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "SignDocDirect"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "signDoc": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The hex encoded `SignDoc` Protobuf."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "signDoc"
                    ],
                    "title": "SignDocDirect",
                    "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "SignerPayload"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "payload": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                          },
                          {
                            "type": "object"
                          }
                        ],
                        "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "payload"
                    ],
                    "title": "SignerPayload",
                    "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                  },
                  {
                    "properties": {
                      "blockchainKind": {
                        "$ref": "#/components/schemas/BlockchainKind",
                        "summary": null,
                        "description": null
                      },
                      "context": {
                        "type": "string",
                        "enum": [
                          "Signature1"
                        ]
                      },
                      "externalAad": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Cip8"
                        ]
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "payload": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The generic message hex encoded."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "context"
                    ],
                    "title": "CIP-8",
                    "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                  }
                ]
              },
              "examples": {
                "Bip322": {
                  "value": {
                    "network": "BitcoinSignet",
                    "kind": "Bip322",
                    "message": "0x49206c6f76652044666e73"
                  }
                },
                "Cip8": {
                  "value": {
                    "network": "CardanoPreprod",
                    "kind": "Cip8",
                    "payload": "0x48656c6c6f20436172646146616e6f21",
                    "externalAad": "0x616464697469706e616c5f64617461",
                    "context": "Signature1"
                  }
                },
                "Eip712": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Eip712",
                    "types": {
                      "Person": [
                        {
                          "name": "name",
                          "type": "string"
                        },
                        {
                          "name": "wallet",
                          "type": "address"
                        }
                      ],
                      "Mail": [
                        {
                          "name": "from",
                          "type": "Person"
                        },
                        {
                          "name": "to",
                          "type": "Person"
                        },
                        {
                          "name": "contents",
                          "type": "string"
                        }
                      ]
                    },
                    "domain": {
                      "name": "Ether Mail",
                      "version": "1",
                      "chainId": 1,
                      "verifyingContract": "0x1b352de7a926ebd1bf52194dab487c2cb0793a9b",
                      "salt": "0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558"
                    },
                    "message": {
                      "from": {
                        "name": "Chris",
                        "wallet": "0x00e3495cf6af59008f22ffaf32d4c92ac33dac47"
                      },
                      "to": {
                        "name": "Bob",
                        "wallet": "0xcc0ee1a1c5e788b61916c8f1c96c960f9a9d3db7"
                      },
                      "contents": "Hello, Bob!"
                    }
                  }
                },
                "Hash": {
                  "value": {
                    "kind": "Hash",
                    "hash": "0xd356339fa071e88335fdfab167cb600430522b71839d8556fa351fe1b4cd7556"
                  }
                },
                "Message": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Message",
                    "message": "0x49206c6f76652044666e73"
                  }
                },
                "Psbt": {
                  "value": {
                    "blockchainKind": "Bitcoin",
                    "kind": "Psbt",
                    "psbt": "0x70736274ff0100db02000000019fc89619065ef6b81415397bb9879dfc78cacbaae66072d69eb619bfd79d5cba0200000000fdffffff0350c3000000000000225120cc8f48c274c1ac263046c301cb9e028979c8e89c4060b4b857c414ed6e7b43760000000000000000496a476262743400223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd9672a99172cdc13644990aabe785f1595843de7f884249a28cc3170112e7a018b0c6fa00a2171b0000000000225120223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd9672dd5d03000001012b9ceb1b0000000000225120223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd9672011720223d31efd004ca86999dedb0b32445f8ead685b4e99d92ec19ea0e211afd967200000000"
                  }
                },
                "Schnorr Hash": {
                  "value": {
                    "kind": "Hash",
                    "hash": "0xd356339fa071e88335fdfab167cb600430522b71839d8556fa351fe1b4cd7556",
                    "taprootMerkleRoot": ""
                  }
                },
                "SignerPayload": {
                  "value": {
                    "network": "PolymeshTestnet",
                    "kind": "SignerPayload",
                    "payload": {
                      "address": "5ELwJvCPKBxLm3rve77JGDmHv2FNNE2nUW17FXhBs7Tws4Cr",
                      "blockHash": "0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6",
                      "blockNumber": "0x00000000",
                      "era": "0x00",
                      "genesisHash": "0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6",
                      "method": "0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000",
                      "mode": 0,
                      "nonce": "0x00000000",
                      "tip": "0x00000000000000000000000000000000",
                      "specVersion": "0x006adb7a",
                      "transactionVersion": "0x00000007",
                      "version": 4,
                      "signedExtensions": []
                    }
                  }
                },
                "Transaction": {
                  "value": {
                    "blockchainKind": "Evm",
                    "kind": "Transaction",
                    "transaction": "0xe703847735941a82520894f0965f5eb35ace69f01b77031f2cff22daca622887470de4df82000080"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvalId": {
                      "type": "string"
                    },
                    "dateConfirmed": {
                      "type": "string"
                    },
                    "datePolicyResolved": {
                      "type": "string"
                    },
                    "dateRequested": {
                      "type": "string"
                    },
                    "dateSigned": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "fee": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "keyId": {
                      "type": "string"
                    },
                    "network": {
                      "type": "string",
                      "enum": [
                        "Algorand",
                        "AlgorandTestnet",
                        "Aptos",
                        "AptosTestnet",
                        "ArbitrumOne",
                        "ArbitrumSepolia",
                        "AvalancheC",
                        "AvalancheCFuji",
                        "BabylonGenesis",
                        "BabylonTestnet5",
                        "Base",
                        "BaseSepolia",
                        "Berachain",
                        "BerachainBepolia",
                        "Bitcoin",
                        "BitcoinSignet",
                        "BitcoinTestnet3",
                        "BitcoinCash",
                        "Bob",
                        "BobSepolia",
                        "Bsc",
                        "BscTestnet",
                        "Canton",
                        "CantonTestnet",
                        "Cardano",
                        "CardanoPreprod",
                        "Celo",
                        "CeloAlfajores",
                        "Codex",
                        "CodexSepolia",
                        "CosmosHub4",
                        "CosmosIcsTestnet",
                        "Dogecoin",
                        "Ethereum",
                        "EthereumGoerli",
                        "EthereumSepolia",
                        "EthereumHolesky",
                        "EthereumHoodi",
                        "FantomOpera",
                        "FantomTestnet",
                        "FlareC",
                        "FlareCCoston2",
                        "Hedera",
                        "HederaTestnet",
                        "Ink",
                        "InkSepolia",
                        "InternetComputer",
                        "Ion",
                        "IonTestnet",
                        "Iota",
                        "IotaTestnet",
                        "KadenaTestnet4",
                        "Kadena",
                        "Kaspa",
                        "Kusama",
                        "Litecoin",
                        "Near",
                        "NearTestnet",
                        "Optimism",
                        "OptimismSepolia",
                        "Origyn",
                        "Plume",
                        "PlumeSepolia",
                        "Polkadot",
                        "Polygon",
                        "PolygonAmoy",
                        "Polymesh",
                        "PolymeshTestnet",
                        "Race",
                        "RaceSepolia",
                        "SeiAtlantic2",
                        "SeiPacific1",
                        "Solana",
                        "SolanaDevnet",
                        "Stellar",
                        "StellarTestnet",
                        "Sui",
                        "SuiTestnet",
                        "Tsc",
                        "TscTestnet1",
                        "Tezos",
                        "TezosGhostnet",
                        "Ton",
                        "TonTestnet",
                        "Tron",
                        "TronNile",
                        "Westend",
                        "XrpLedger",
                        "XrpLedgerTestnet"
                      ]
                    },
                    "reason": {
                      "type": "string"
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "hash": {
                              "type": "string",
                              "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                              "description": "32-byte hash in hex encoded format."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Hash"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "taprootMerkleRoot": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                              "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "hash"
                          ],
                          "title": "Hash",
                          "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Message"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "An arbitrary hex encoded message."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "Message",
                          "description": "Signs an arbitrary hex encoded arbitrary message."
                        },
                        {
                          "properties": {
                            "address": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The address of the contract the signer's EOA will be delegated to."
                            },
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "chainId": {
                              "type": "number",
                              "description": "Chain ID."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip7702"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "nonce": {
                              "type": "number",
                              "description": "The current nonce of the signer EOA."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "address",
                            "nonce",
                            "chainId"
                          ],
                          "title": "EIP-7702 Authorization",
                          "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Transaction"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "transaction": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The unsigned hex-encoded transaction."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "Transaction",
                          "description": "Signs an unsigned transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "domain": {
                              "properties": {
                                "chainId": {
                                  "anyOf": [
                                    {
                                      "type": "integer",
                                      "exclusiveMinimum": 0
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "description": "Chain ID."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the signing domain."
                                },
                                "salt": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{64}$",
                                  "description": "32-byte value as a last-resort domain separator."
                                },
                                "verifyingContract": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{40}$",
                                  "description": "The address of the contract that will verify the signature."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "Current major version of the signing domain."
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "description": "Domain separator."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip712"
                              ]
                            },
                            "message": {
                              "additionalProperties": {},
                              "type": "object",
                              "description": "Structured message to sign."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "types": {
                              "additionalProperties": {
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "type"
                                  ]
                                },
                                "type": "array"
                              },
                              "type": "object",
                              "description": "Type definitions."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "types",
                            "domain",
                            "message"
                          ],
                          "title": "EIP-712 TypedData",
                          "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Psbt"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "psbt": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded PSBT."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "psbt"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "format": {
                              "type": "string",
                              "enum": [
                                "Simple",
                                "Full"
                              ],
                              "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Bip322"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "BIP-322",
                          "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "command": {
                              "type": "string",
                              "description": "The Pact command JSON, serialized into a string."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "PactCommand"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "command"
                          ],
                          "title": "PactCommand",
                          "description": "Signs an unsigned Pact command."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignDocDirect"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "signDoc": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded `SignDoc` Protobuf."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "signDoc"
                          ],
                          "title": "SignDocDirect",
                          "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignerPayload"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "payload"
                          ],
                          "title": "SignerPayload",
                          "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "context": {
                              "type": "string",
                              "enum": [
                                "Signature1"
                              ]
                            },
                            "externalAad": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Cip8"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "context"
                          ],
                          "title": "CIP-8",
                          "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "signature": {
                      "properties": {
                        "encoded": {
                          "type": "string"
                        },
                        "r": {
                          "type": "string"
                        },
                        "recid": {
                          "type": "number"
                        },
                        "s": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "r",
                        "s"
                      ]
                    },
                    "signatures": {
                      "items": {
                        "properties": {
                          "encoded": {
                            "type": "string"
                          },
                          "r": {
                            "type": "string"
                          },
                          "recid": {
                            "type": "number"
                          },
                          "s": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "r",
                          "s"
                        ]
                      },
                      "type": "array"
                    },
                    "signedData": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Executing",
                        "Signed",
                        "Confirmed",
                        "Failed",
                        "Rejected"
                      ]
                    },
                    "txHash": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "keyId",
                    "requester",
                    "requestBody",
                    "status",
                    "network",
                    "dateRequested",
                    "walletId"
                  ]
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Signatures:Create`: Always required."
        }
      }
    },
    "/wallets/{walletId}/signatures/{signatureId}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Signature",
        "description": "Retrieves a Transaction Request information by its ID.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "signatureId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvalId": {
                      "type": "string"
                    },
                    "dateConfirmed": {
                      "type": "string"
                    },
                    "datePolicyResolved": {
                      "type": "string"
                    },
                    "dateRequested": {
                      "type": "string"
                    },
                    "dateSigned": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "fee": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "keyId": {
                      "type": "string"
                    },
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "reason": {
                      "type": "string"
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "hash": {
                              "type": "string",
                              "pattern": "^(0x)?[0-9a-fA-F]{64}$",
                              "description": "32-byte hash in hex encoded format."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Hash"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "taprootMerkleRoot": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9A-Fa-f]{64})?$",
                              "description": "Required when signing with a Schnorr key. Specify the merkle root for tweaking the signing key, or the empty string \"\" to tweak with the default merkle root."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "hash"
                          ],
                          "title": "Hash",
                          "description": "All cryptographic scheme support hash signing. Different blockchains will apply different hash functions to compute the hash."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Message"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "An arbitrary hex encoded message."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "Message",
                          "description": "Signs an arbitrary hex encoded arbitrary message."
                        },
                        {
                          "properties": {
                            "address": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The address of the contract the signer's EOA will be delegated to."
                            },
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "chainId": {
                              "type": "number",
                              "description": "Chain ID."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip7702"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "nonce": {
                              "type": "number",
                              "description": "The current nonce of the signer EOA."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "address",
                            "nonce",
                            "chainId"
                          ],
                          "title": "EIP-7702 Authorization",
                          "description": "Signs an authorization tuple for type 4 set code transaction defined in [EIP-7702](https://eips.ethereum.org/EIPS/eip-7702)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Transaction"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "transaction": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The unsigned hex-encoded transaction."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "Transaction",
                          "description": "Signs an unsigned transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "domain": {
                              "properties": {
                                "chainId": {
                                  "anyOf": [
                                    {
                                      "type": "integer",
                                      "exclusiveMinimum": 0
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ],
                                  "description": "Chain ID."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the signing domain."
                                },
                                "salt": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{64}$",
                                  "description": "32-byte value as a last-resort domain separator."
                                },
                                "verifyingContract": {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]{40}$",
                                  "description": "The address of the contract that will verify the signature."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "Current major version of the signing domain."
                                }
                              },
                              "additionalProperties": false,
                              "type": "object",
                              "description": "Domain separator."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip712"
                              ]
                            },
                            "message": {
                              "additionalProperties": {},
                              "type": "object",
                              "description": "Structured message to sign."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "types": {
                              "additionalProperties": {
                                "items": {
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  },
                                  "additionalProperties": false,
                                  "type": "object",
                                  "required": [
                                    "name",
                                    "type"
                                  ]
                                },
                                "type": "array"
                              },
                              "type": "object",
                              "description": "Type definitions."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "types",
                            "domain",
                            "message"
                          ],
                          "title": "EIP-712 TypedData",
                          "description": "Signs a typed structured data as defined in [EIP-712](https://eips.ethereum.org/EIPS/eip-712)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Psbt"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "psbt": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded PSBT."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "psbt"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "format": {
                              "type": "string",
                              "enum": [
                                "Simple",
                                "Full"
                              ],
                              "description": "Defaults to Simple if not present. The formatted signature is returned in the `signedData` field in the response."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Bip322"
                              ]
                            },
                            "message": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "message"
                          ],
                          "title": "BIP-322",
                          "description": "Signs a generic message using [BIP-322](https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki). Note: signing payload construction depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "command": {
                              "type": "string",
                              "description": "The Pact command JSON, serialized into a string."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "PactCommand"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "command"
                          ],
                          "title": "PactCommand",
                          "description": "Signs an unsigned Pact command."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignDocDirect"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "signDoc": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded `SignDoc` Protobuf."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "signDoc"
                          ],
                          "title": "SignDocDirect",
                          "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignerPayload"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "description": "The unsigned Signer Payload formatted as JSON, or as a serialized hex-encoded buffer.\n       \nPlease refer to the original Polkadot definition for more details: [SignerPayloadJson](https://github.com/polkadot-js/api/blob/v16.2.2/packages/types/src/types/extrinsic.ts#L32). Note that additional fields will be rejected.\n\n| Field                | Description                                                                              | Type - Optional      |\n| -------------------- | ---------------------------------------------------------------------------------------- | -------------------- |\n| `address`            | ss58-encoded address of the sending account.                                             | String               |\n| `blockHash`          | The hash of the checkpoint block, hex encoded.                                           | String               |\n| `blockNumber`        | The checkpoint block number, hex encoded.                                                | String               |\n| `era`                | The number of blocks after the checkpoint for which a transaction is valid, hex encoded. | String               |\n| `genesisHash`        | The genesis hash of the chain, hex encoded.                                              | String               |\n| `metadataHash`       | The metadataHash for the CheckMetadataHash SignedExtension, hex encoded.                 | String *(optional)*  |\n| `mode`               | flag indicating whether to verify the metadata hash or not.                              | Integer *(optional)* |\n| `method`             | The encoded method with arguments, hex encoded.                                          | String               |\n| `nonce`              | The nonce for the transaction, hex encoded.                                              | String               |\n| `tip`                | The tip to increase transaction priority, hex encoded.                                   | String               |\n| `version`            | The version of the extrinsic.                                                            | Integer              |\n| `specVersion`        | The current spec version for the runtime, hex encoded.                                   | String               |\n| `transactionVersion` | The current transaction version for the runtime, hex encoded.                            | String               |\n| `signedExtensions`   | The applicable signed extensions for this runtime.                                       | Array<String>       |\n\n```json\n{\n  \"network\": \"Polymesh\",\n  \"kind\": \"SignerPayload\",\n  \"payload\": {\n    \"address\": \"5H5tTnmLUqRgvTZvTwCdBKYjKLBm2gkp7u38Q9UUdJa8m6rX\",\n    \"blockHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"blockNumber\": \"0x00000000\",\n    \"era\": \"0x00\",\n    \"genesisHash\": \"0x2ace05e703aa50b48c0ccccfc8b424f7aab9a1e2c424ed12e45d20b1e8ffd0d6\",\n    \"method\": \"0x07141f3da32e72ac6eb6cb40d9e757594363a617b2c3964a2b6ec6895c6648f48d500000\",\n    \"nonce\": \"0x00000000\",\n    \"tip\": \"0x00000000000000000000000000000000\",\n    \"version\": 4,\n    \"specVersion\": \"0x006adb7a\",\n    \"transactionVersion\": \"0x00000007\",\n    \"signedExtensions\": []\n  }\n}\n```\n"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "payload"
                          ],
                          "title": "SignerPayload",
                          "description": "Signs a [generic Signer Payload](https://github.com/polkadot-js/api/blob/v15.0.1/packages/types/src/extrinsic/SignerPayload.ts#L47-L51). Note: converting the generic signer payload to a signable extrinsic requires fetching metadata from the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        },
                        {
                          "properties": {
                            "blockchainKind": {
                              "$ref": "#/components/schemas/BlockchainKind",
                              "summary": null,
                              "description": null
                            },
                            "context": {
                              "type": "string",
                              "enum": [
                                "Signature1"
                              ]
                            },
                            "externalAad": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "Allows an application to ask the user to sign some extra data but NOT put it inside the COSE structure (only as part of the data to sign)."
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Cip8"
                              ]
                            },
                            "network": {
                              "$ref": "#/components/schemas/Network",
                              "summary": null,
                              "description": null
                            },
                            "payload": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The generic message hex encoded."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "context"
                          ],
                          "title": "CIP-8",
                          "description": "Signs an arbitrary message using [CIP-8](https://cips.cardano.org/cip/CIP-0008). Note: signing address depends on the targeted blockchain. Therefore it's tied to a specific `network` rather than the blockchain kind."
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "signature": {
                      "properties": {
                        "encoded": {
                          "type": "string"
                        },
                        "r": {
                          "type": "string"
                        },
                        "recid": {
                          "type": "number"
                        },
                        "s": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "r",
                        "s"
                      ]
                    },
                    "signatures": {
                      "items": {
                        "properties": {
                          "encoded": {
                            "type": "string"
                          },
                          "r": {
                            "type": "string"
                          },
                          "recid": {
                            "type": "number"
                          },
                          "s": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "r",
                          "s"
                        ]
                      },
                      "type": "array"
                    },
                    "signedData": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Executing",
                        "Signed",
                        "Confirmed",
                        "Failed",
                        "Rejected"
                      ]
                    },
                    "txHash": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "keyId",
                    "requester",
                    "requestBody",
                    "status",
                    "dateRequested"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Keys:Signatures:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/tags": {
      "put": {
        "tags": [
          "Wallets"
        ],
        "summary": "Tag Wallet",
        "description": "Add a [Tag](https://docs.dfns.co/api-reference/wallets/tags) to a wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_.:/+-]{1,100}$",
                      "description": "Wallet Tag."
                    },
                    "type": "array",
                    "maxItems": 10,
                    "minItems": 1
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "tags"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Tags:Add`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Wallets"
        ],
        "summary": "Untag Wallet",
        "description": "Removes the specified tags from a wallet. ",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "items": {
                      "type": "string",
                      "pattern": "^[a-zA-Z0-9_.:/+-]{1,100}$",
                      "description": "Wallet Tag."
                    },
                    "type": "array",
                    "maxItems": 10,
                    "description": "List of tags."
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "tags"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Tags:Delete`: Always required."
        }
      }
    },
    "/wallets/{walletId}/transactions": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "List Transactions",
        "description": "Retrieves a list of transactions requests for the specified wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "approvalId": {
                            "type": "string"
                          },
                          "dateBroadcasted": {
                            "type": "string"
                          },
                          "dateConfirmed": {
                            "type": "string"
                          },
                          "datePolicyResolved": {
                            "type": "string"
                          },
                          "dateRequested": {
                            "type": "string"
                          },
                          "externalId": {
                            "type": "string"
                          },
                          "fee": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "network": {
                            "$ref": "#/components/schemas/Network",
                            "summary": null,
                            "description": null
                          },
                          "reason": {
                            "type": "string"
                          },
                          "requestBody": {
                            "oneOf": [
                              {
                                "properties": {
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Transaction"
                                    ]
                                  },
                                  "transaction": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                      },
                                      {
                                        "type": "object"
                                      }
                                    ],
                                    "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "transaction"
                                ],
                                "title": "Transaction",
                                "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                              },
                              {
                                "properties": {
                                  "data": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "gasLimit": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Evm"
                                    ]
                                  },
                                  "nonce": {
                                    "anyOf": [
                                      {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ],
                                    "description": "The current nonce of the signer EOA."
                                  },
                                  "to": {
                                    "type": "string",
                                    "pattern": "^0x[0-9a-fA-F]{40}$"
                                  },
                                  "value": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind"
                                ],
                                "title": "EVM Transaction",
                                "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                              },
                              {
                                "properties": {
                                  "data": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "gasLimit": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Eip1559"
                                    ]
                                  },
                                  "maxFeePerGas": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  },
                                  "maxPriorityFeePerGas": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  },
                                  "nonce": {
                                    "anyOf": [
                                      {
                                        "type": "integer",
                                        "minimum": 0
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  },
                                  "to": {
                                    "type": "string",
                                    "pattern": "^0x[0-9a-fA-F]{40}$"
                                  },
                                  "value": {
                                    "anyOf": [
                                      {
                                        "type": "string",
                                        "pattern": "^\\d+$"
                                      },
                                      {
                                        "type": "string",
                                        "pattern": "^0x[0-9a-fA-F]*$"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind"
                                ],
                                "title": "EVM EIP-1559",
                                "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                              },
                              {
                                "properties": {
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Psbt"
                                    ]
                                  },
                                  "psbt": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "The hex encoded PSBT."
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "psbt"
                                ],
                                "title": "PSBT",
                                "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                              },
                              {
                                "properties": {
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "Json"
                                    ]
                                  },
                                  "transaction": {
                                    "type": "object"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "transaction"
                                ],
                                "title": "PSBT",
                                "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                              },
                              {
                                "properties": {
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SignDocDirect"
                                    ]
                                  },
                                  "signDoc": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "signDoc"
                                ],
                                "title": "SignDocDirect",
                                "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                              },
                              {
                                "properties": {
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "feeSponsorId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "UserOperations"
                                    ]
                                  },
                                  "userOperations": {
                                    "items": {
                                      "properties": {
                                        "data": {
                                          "type": "string",
                                          "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                          "description": "ABI encoded function call data in hex format."
                                        },
                                        "to": {
                                          "type": "string",
                                          "pattern": "^0x[0-9a-fA-F]{40}$",
                                          "description": "The destination address or target contract."
                                        },
                                        "value": {
                                          "type": "string",
                                          "pattern": "^\\d+$",
                                          "description": "The amount of native tokens to transfer in minimum denomination."
                                        }
                                      },
                                      "type": "object",
                                      "required": [
                                        "to"
                                      ]
                                    },
                                    "type": "array"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "userOperations",
                                  "feeSponsorId"
                                ],
                                "title": "EVM Sponsored transaction",
                                "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                              },
                              {
                                "properties": {
                                  "decision": {
                                    "type": "string",
                                    "enum": [
                                      "Accept",
                                      "Reject"
                                    ]
                                  },
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "SettleOffer"
                                    ]
                                  },
                                  "txHash": {
                                    "type": "string"
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind",
                                  "txHash",
                                  "decision"
                                ],
                                "title": "Canton Offer Settlement",
                                "description": "Settle a Canton Offer."
                              },
                              {
                                "properties": {
                                  "externalId": {
                                    "type": "string",
                                    "maxLength": 50,
                                    "minLength": 1,
                                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                                  },
                                  "kind": {
                                    "type": "string",
                                    "enum": [
                                      "TransferPreapproval"
                                    ]
                                  }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "required": [
                                  "kind"
                                ],
                                "title": "Canton Transfer Preapproval",
                                "description": "Enable canton coin auto approval."
                              }
                            ]
                          },
                          "requester": {
                            "properties": {
                              "tokenId": {
                                "type": "string"
                              },
                              "userId": {
                                "type": "string"
                              }
                            },
                            "type": "object",
                            "required": [
                              "userId"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Pending",
                              "Executing",
                              "Broadcasted",
                              "Confirmed",
                              "Failed",
                              "Rejected"
                            ]
                          },
                          "txHash": {
                            "type": "string"
                          },
                          "walletId": {
                            "type": "string"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "walletId",
                          "network",
                          "requester",
                          "requestBody",
                          "status",
                          "dateRequested"
                        ]
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "walletId",
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Transactions:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Sign and Broadcast Transaction",
        "description": "Sign & Broadcast transaction enables communication with any arbitrary smart contract of the target blockchain. You can construct a transaction that performs a complex task and this endpoint will sign the transaction, add the signature and broadcast it to chain. It can be used to call smart contract functions like mint tokens and even deploy new smart contracts.\n  \n| Status      | Definition                                                                                                                                      |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------|\n| Pending     | The request is pending approval due to a policy applied to the wallet.                                                                          |\n| Executing   | The request is approved and is in the process of being executed. note this status is only set for a short time between pending and broadcasted. |\n| Broadcasted | The transaction has been successfully written to the mempool.                                                                                   |\n| Confirmed   | The transaction has been confirmed on-chain by our indexing pipeline.                                                                           |\n| Failed      | Indicates either a system failure to complete the request or the transaction failed on chain.                                                   |\n| Rejected    | The request has been rejected by a policy approval action.                                                                                      |\n\n\n  <Info>\n  for reading from a \"view\" function on EVM chains, please use [Read Contract](https://docs.dfns.co/api-reference/networks/read-contract) endpoint.\n  </Info>",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Transaction"
                        ]
                      },
                      "transaction": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                          },
                          {
                            "type": "object"
                          }
                        ],
                        "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "transaction"
                    ],
                    "title": "Transaction",
                    "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                  },
                  {
                    "properties": {
                      "data": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "gasLimit": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Evm"
                        ]
                      },
                      "nonce": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ],
                        "description": "The current nonce of the signer EOA."
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "value": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind"
                    ],
                    "title": "EVM Transaction",
                    "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                  },
                  {
                    "properties": {
                      "data": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "gasLimit": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Eip1559"
                        ]
                      },
                      "maxFeePerGas": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      },
                      "maxPriorityFeePerGas": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      },
                      "nonce": {
                        "anyOf": [
                          {
                            "type": "integer",
                            "minimum": 0
                          },
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "value": {
                        "anyOf": [
                          {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]*$"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind"
                    ],
                    "title": "EVM EIP-1559",
                    "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Psbt"
                        ]
                      },
                      "psbt": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                        "description": "The hex encoded PSBT."
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "psbt"
                    ],
                    "title": "PSBT",
                    "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Json"
                        ]
                      },
                      "transaction": {
                        "type": "object"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "transaction"
                    ],
                    "title": "PSBT",
                    "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "SignDocDirect"
                        ]
                      },
                      "signDoc": {
                        "type": "string",
                        "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "signDoc"
                    ],
                    "title": "SignDocDirect",
                    "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "UserOperations"
                        ]
                      },
                      "userOperations": {
                        "items": {
                          "properties": {
                            "data": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "ABI encoded function call data in hex format."
                            },
                            "to": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$",
                              "description": "The destination address or target contract."
                            },
                            "value": {
                              "type": "string",
                              "pattern": "^\\d+$",
                              "description": "The amount of native tokens to transfer in minimum denomination."
                            }
                          },
                          "type": "object",
                          "required": [
                            "to"
                          ]
                        },
                        "type": "array"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "userOperations",
                      "feeSponsorId"
                    ],
                    "title": "EVM Sponsored transaction",
                    "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                  },
                  {
                    "properties": {
                      "decision": {
                        "type": "string",
                        "enum": [
                          "Accept",
                          "Reject"
                        ]
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "SettleOffer"
                        ]
                      },
                      "txHash": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "txHash",
                      "decision"
                    ],
                    "title": "Canton Offer Settlement",
                    "description": "Settle a Canton Offer."
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "TransferPreapproval"
                        ]
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind"
                    ],
                    "title": "Canton Transfer Preapproval",
                    "description": "Enable canton coin auto approval."
                  }
                ]
              },
              "examples": {
                "EVM Transaction": {
                  "value": {
                    "kind": "Transaction",
                    "transaction": {
                      "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffb",
                      "value": "1"
                    }
                  }
                },
                "Eip1559": {
                  "value": {
                    "kind": "Eip1559",
                    "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffc",
                    "value": "1",
                    "maxFeePerGas": "1000000000",
                    "maxPriorityFeePerGas": "1000000"
                  }
                },
                "Psbt": {
                  "value": {
                    "kind": "Psbt",
                    "psbt": "0x70736274ff0100710200000001ca17431a33a13d3ef8bfb041c8546071f9d3a609abe3c91efbed83265e1426730100000000ffffffff02e803000000000000160014a40a65b46ff36c53f1afb8e35e25a4c0bcfc9979d6d1150000000000160014237ad8ba2ffd992f6ebc7ab388e77f00fc87d1c9000000000001011f54d6150000000000160014237ad8ba2ffd992f6ebc7ab388e77f00fc87d1c9000000"
                  }
                },
                "Settle Offer": {
                  "value": {
                    "kind": "SettleOffer",
                    "decision": "Accept",
                    "txHash": "1220314ced784ce9da574c84eef4cf29aa86e4318c615e1fe7c7663a72c783d1913e"
                  }
                },
                "SignDoc": {
                  "value": {
                    "kind": "SignDocDirect",
                    "signDoc": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
                  }
                },
                "Transaction": {
                  "value": {
                    "kind": "Transaction",
                    "transaction": "0xe703847735941a82520894f0965f5eb35ace69f01b77031f2cff22daca622887470de4df82000080"
                  }
                },
                "User Operations": {
                  "value": {
                    "kind": "UserOperations",
                    "userOperations": [
                      {
                        "to": "0x1c7d4b196cb0c7b01d743fbc6116a902379c7238",
                        "data": "a9059cbb000000000000000000000000d964d741998edc275f3800eed113378a391951d90000000000000000000000000000000000000000000000000000000000000001"
                      },
                      {
                        "to": "0x1c7d4b196cb0c7b01d743fbc6116a902379c7238",
                        "data": "a9059cbb000000000000000000000000e5a2ebc128e262ab1e3bd02bffbe16911adfbffb0000000000000000000000000000000000000000000000000000000000000001"
                      }
                    ],
                    "feeSponsorId": "fs-5ercu-e9r9u-8fpqi8bvu2eah0e2"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvalId": {
                      "type": "string"
                    },
                    "dateBroadcasted": {
                      "type": "string"
                    },
                    "dateConfirmed": {
                      "type": "string"
                    },
                    "datePolicyResolved": {
                      "type": "string"
                    },
                    "dateRequested": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "fee": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "reason": {
                      "type": "string"
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Transaction"
                              ]
                            },
                            "transaction": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "Transaction",
                          "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                        },
                        {
                          "properties": {
                            "data": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "gasLimit": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Evm"
                              ]
                            },
                            "nonce": {
                              "anyOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ],
                              "description": "The current nonce of the signer EOA."
                            },
                            "to": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$"
                            },
                            "value": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "EVM Transaction",
                          "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                        },
                        {
                          "properties": {
                            "data": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "gasLimit": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip1559"
                              ]
                            },
                            "maxFeePerGas": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "maxPriorityFeePerGas": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "nonce": {
                              "anyOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "to": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$"
                            },
                            "value": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "EVM EIP-1559",
                          "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Psbt"
                              ]
                            },
                            "psbt": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded PSBT."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "psbt"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Json"
                              ]
                            },
                            "transaction": {
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignDocDirect"
                              ]
                            },
                            "signDoc": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "signDoc"
                          ],
                          "title": "SignDocDirect",
                          "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "UserOperations"
                              ]
                            },
                            "userOperations": {
                              "items": {
                                "properties": {
                                  "data": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "ABI encoded function call data in hex format."
                                  },
                                  "to": {
                                    "type": "string",
                                    "pattern": "^0x[0-9a-fA-F]{40}$",
                                    "description": "The destination address or target contract."
                                  },
                                  "value": {
                                    "type": "string",
                                    "pattern": "^\\d+$",
                                    "description": "The amount of native tokens to transfer in minimum denomination."
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "to"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "userOperations",
                            "feeSponsorId"
                          ],
                          "title": "EVM Sponsored transaction",
                          "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                        },
                        {
                          "properties": {
                            "decision": {
                              "type": "string",
                              "enum": [
                                "Accept",
                                "Reject"
                              ]
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SettleOffer"
                              ]
                            },
                            "txHash": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "txHash",
                            "decision"
                          ],
                          "title": "Canton Offer Settlement",
                          "description": "Settle a Canton Offer."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "TransferPreapproval"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "Canton Transfer Preapproval",
                          "description": "Enable canton coin auto approval."
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Executing",
                        "Broadcasted",
                        "Confirmed",
                        "Failed",
                        "Rejected"
                      ]
                    },
                    "txHash": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "requester",
                    "requestBody",
                    "status",
                    "dateRequested"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Transactions:Create`: Always required   \n`FeeSponsors:Use`: Required if `feeSponsorId` is specified."
        }
      }
    },
    "/wallets/{walletId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Transaction",
        "description": "Retrieve information about a specific transaction.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "approvalId": {
                      "type": "string"
                    },
                    "dateBroadcasted": {
                      "type": "string"
                    },
                    "dateConfirmed": {
                      "type": "string"
                    },
                    "datePolicyResolved": {
                      "type": "string"
                    },
                    "dateRequested": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "fee": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "network": {
                      "$ref": "#/components/schemas/Network",
                      "summary": null,
                      "description": null
                    },
                    "reason": {
                      "type": "string"
                    },
                    "requestBody": {
                      "oneOf": [
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Transaction"
                              ]
                            },
                            "transaction": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                                },
                                {
                                  "type": "object"
                                }
                              ],
                              "description": "The unsigned hex encoded transaction. EVM transactions also accept JSON objects."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "Transaction",
                          "description": "Signs an unsigned transaction and broadcasts it to chain.\n      For EVM transactions, you may use JSON objects: \n\n| Field                | Description                                                                                                                                                                                                                         | Type - Optional              |\n|----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------|\n| type                 | Ethereum transaction type. 0 for legacy transaction; 2 for EIP-1559 transaction; 4 for EIP-7702 transaction. Default is 2 if undefined.                                                                                             | Integer (optional)           |\n| to                   | The destination address or target contract. Leave undefined when the transaction is a contract deployment.                                                                                                                          | String (optional)            |\n| value                | The amount of native tokens to transfer in minimum denomination.                                                                                                                                                                    | String (optional)            |\n| data                 | ABI encoded function call data in hex format. Can also be the encoded smart contract data when the transaction is a contract deployment.                                                                                            | String (optional)            |\n| nonce                | The transaction number to guarantee idempotency. If omitted, it will be provided automatically. Note the same nonce can be submitted multiple times with a higher maxFeePerGas to \"overwrite\" existing transactions in the mempool. | Integer or String (optional) |\n| gasLimit             | The maximum amount of gas that can be spent for executing the transaction. If omitted, it will be calculated automatically.                                                                                                         | String (optional)            |\n| gasPrice             | The amount of per unit gas. Only valid for a type 0 legacy transaction. If omitted, it will be calculated automatically.                                                                                                            | String (optional)            |\n| maxFeePerGas         | The maximum amount of per unit gas willing to be paid for the transaction. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                               | String (optional)            |\n| maxPriorityFeePerGas | The maximum amount of per unit gas to be included as a tip to the validator. Valid for type 2 and type 4 transactions. If omitted, it will be calculated automatically.                                                             | String (optional)            |\n| authorizationList    | A list that indicates what code the signer of each authorization desires to execute in the context of their EOA. Only valid for type 4 transaction.                                                                                 | Authorization (optional)     |\n\n\n```json\n{\n  \"kind\": \"Transaction\",\n  \"transaction\": {\n    \"to\": \"0x00fb58432ef9d418bf6688bcf0a226d2fcaa18e2\",\n    \"data\": \"0x40d097c3000000000000000000000000d2f77f85a50cdd650ca562f3a180284e1d5b4934\",\n    \"maxFeePerGas\": \"1626000000000\",\n    \"maxPriorityFeePerGas\": \"1332000000000\"\n  }\n}\n```\n      "
                        },
                        {
                          "properties": {
                            "data": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "gasLimit": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Evm"
                              ]
                            },
                            "nonce": {
                              "anyOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ],
                              "description": "The current nonce of the signer EOA."
                            },
                            "to": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$"
                            },
                            "value": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "EVM Transaction",
                          "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                        },
                        {
                          "properties": {
                            "data": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "gasLimit": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Eip1559"
                              ]
                            },
                            "maxFeePerGas": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "maxPriorityFeePerGas": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "nonce": {
                              "anyOf": [
                                {
                                  "type": "integer",
                                  "minimum": 0
                                },
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            },
                            "to": {
                              "type": "string",
                              "pattern": "^0x[0-9a-fA-F]{40}$"
                            },
                            "value": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "pattern": "^\\d+$"
                                },
                                {
                                  "type": "string",
                                  "pattern": "^0x[0-9a-fA-F]*$"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "EVM EIP-1559",
                          "description": "Deprecated. Only support type 2 transactions. Use the new JSON format with `Transaction` kind instead which has support for legacy and type 4 transactions."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Psbt"
                              ]
                            },
                            "psbt": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                              "description": "The hex encoded PSBT."
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "psbt"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "Json"
                              ]
                            },
                            "transaction": {
                              "type": "object"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "transaction"
                          ],
                          "title": "PSBT",
                          "description": "Signs a partially signed Bitcoin / Litecoin transaction."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SignDocDirect"
                              ]
                            },
                            "signDoc": {
                              "type": "string",
                              "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "signDoc"
                          ],
                          "title": "SignDocDirect",
                          "description": "Signs an unsigned transaction using [sign mode direct](https://docs.cosmos.network/main/learn/advanced/transactions#sign_mode_direct-preferred)."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "feeSponsorId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A fee sponsor id to sponsor the transaction fee by another wallet. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "UserOperations"
                              ]
                            },
                            "userOperations": {
                              "items": {
                                "properties": {
                                  "data": {
                                    "type": "string",
                                    "pattern": "^(0x)?([0-9a-fA-F][0-9a-fA-F])*$",
                                    "description": "ABI encoded function call data in hex format."
                                  },
                                  "to": {
                                    "type": "string",
                                    "pattern": "^0x[0-9a-fA-F]{40}$",
                                    "description": "The destination address or target contract."
                                  },
                                  "value": {
                                    "type": "string",
                                    "pattern": "^\\d+$",
                                    "description": "The amount of native tokens to transfer in minimum denomination."
                                  }
                                },
                                "type": "object",
                                "required": [
                                  "to"
                                ]
                              },
                              "type": "array"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "userOperations",
                            "feeSponsorId"
                          ],
                          "title": "EVM Sponsored transaction",
                          "description": "Signs one or more user operations and broadcasts to chain using a sponsored transaction. Used for invoking arbitrary smart contract calls, including batch operations, with a [fee sponsor](https://docs.dfns.co/features/fee-sponsors).\n\nCan only be used with a fee sponsor. Unsponsored user operations are not supported."
                        },
                        {
                          "properties": {
                            "decision": {
                              "type": "string",
                              "enum": [
                                "Accept",
                                "Reject"
                              ]
                            },
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "SettleOffer"
                              ]
                            },
                            "txHash": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind",
                            "txHash",
                            "decision"
                          ],
                          "title": "Canton Offer Settlement",
                          "description": "Settle a Canton Offer."
                        },
                        {
                          "properties": {
                            "externalId": {
                              "type": "string",
                              "maxLength": 50,
                              "minLength": 1,
                              "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key (read more [here](https://docs.dfns.co/api-reference/idempotency))."
                            },
                            "kind": {
                              "type": "string",
                              "enum": [
                                "TransferPreapproval"
                              ]
                            }
                          },
                          "additionalProperties": false,
                          "type": "object",
                          "required": [
                            "kind"
                          ],
                          "title": "Canton Transfer Preapproval",
                          "description": "Enable canton coin auto approval."
                        }
                      ]
                    },
                    "requester": {
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "userId": {
                          "type": "string"
                        }
                      },
                      "type": "object",
                      "required": [
                        "userId"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Pending",
                        "Executing",
                        "Broadcasted",
                        "Confirmed",
                        "Failed",
                        "Rejected"
                      ]
                    },
                    "txHash": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "walletId",
                    "network",
                    "requester",
                    "requestBody",
                    "status",
                    "dateRequested"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Transactions:Read`: Always required."
        }
      }
    },
    "/wallets/{walletId}/transfers": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "List Transfers",
        "description": "Retrieves a list of transfer requests for the specified wallet.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^\\d+$"
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/TransferRequest",
                        "summary": null,
                        "description": null
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    },
                    "walletId": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "walletId",
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Transfers:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Wallets"
        ],
        "summary": "Transfer Asset",
        "description": "\n    Transfer an asset out of the specified wallet to a destination address. \n    For all fungible token transfers, the transfer amount must be specified in the minimum denomination of that token. \n    For example, use the amount in Satoshi for a Bitcoin transfer, or the amount in Wei for an Ethereum transfer etc.\n    \n    See the different options in the Body description below. You can also select your kind of transfers in the payload examples in the different languages. \n    ",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "description": "The source wallet id (`wa-...`).",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The source wallet id (`wa-...`)."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of native tokens to transfer in minimum denomination."
                      },
                      "createDestinationAccount": {
                        "type": "boolean",
                        "description": "Whether to create the destination account on chains that require account creation (e.g., Stellar, Kadena). Only valid for chains that require the receiver account to exist before transfer."
                      },
                      "expiresAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Optional field for Canton, especially useful in the context of offers"
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      },
                      "memo": {
                        "type": "string",
                        "description": "The memo or destination tag. `Stellar`, `TON` and `XrpLedger` support `memo`. Not valid for other networks."
                      },
                      "offer": {
                        "type": "boolean",
                        "description": "Optional field for Canton, if true it will create a transfer offer."
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer. All EVM compatible networks and Bitcoin support `priority`. Not supported for other networks. It uses the [estimate fees](https://docs.dfns.co/api-reference/networks/estimate-fees) API to calculate the transfer fees. When not specified, defaults to `Standard` priority."
                      },
                      "targetChain": {
                        "type": "string",
                        "description": "For multi-chain networks (e.g., Kadena), specify the destination chain for cross-chain transfers."
                      },
                      "to": {
                        "type": "string",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "to",
                      "amount"
                    ],
                    "title": "Native Asset",
                    "description": "Transfer the native token of the network. All networks support the native token type."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token asset id. "
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Asa"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^[A-Z0-9]{58}$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "assetId",
                      "to",
                      "amount"
                    ],
                    "title": "Algorand Standard Asset",
                    "description": "Transfer Algorand standard assets, or [ASAs](https://developer.algorand.org/docs/get-details/asa/)."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Aip21"
                        ]
                      },
                      "metadata": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{64}$",
                        "description": "The asset metadata address. "
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{64}$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "metadata",
                      "to",
                      "amount"
                    ],
                    "title": "Aptos Fungible Asset (AIP-21)",
                    "description": "Transfer Aptos fungible asset that implement the [AIP-21 specification](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-21.md)."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetId": {
                        "type": "string",
                        "description": "The token asset id. "
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Asset"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "assetId",
                      "to",
                      "amount"
                    ],
                    "title": "Cardano Asset",
                    "description": "Transfer Cardano assets following [Mary update](https://docs.cardano.org/about-cardano/evolution/upgrades/mary)"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "coin": {
                        "type": "string",
                        "description": "The coin identifier."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Coin"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{64}$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "coin",
                      "to",
                      "amount"
                    ],
                    "title": "Sui Coin",
                    "description": "Transfer Sui fungible assets that implement [coin standard](https://docs.sui.io/standards/coin)."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "The ERC-20 contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer."
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "to",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)",
                    "description": "Transfer fungible tokens that implement the [ERC-20 specification](https://eips.ethereum.org/EIPS/eip-20)."
                  },
                  {
                    "properties": {
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "The ERC-721 contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc721"
                        ]
                      },
                      "priority": {
                        "type": "string",
                        "enum": [
                          "Slow",
                          "Standard",
                          "Fast"
                        ],
                        "description": "The priority that determines the fees paid for the transfer."
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$",
                        "description": "The destination address."
                      },
                      "tokenId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token to transfer."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "to",
                      "tokenId"
                    ],
                    "title": "EVM Non Fungible Token (ERC-721)",
                    "description": "Transfer non-fungible tokens that implement the [ERC-721 specification](https://eips.ethereum.org/EIPS/eip-721)"
                  },
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Hip17"
                        ]
                      },
                      "serialNumber": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^(0x[0-9a-fA-F]{40}|0\\.0\\.(\\d+|[0-9a-fA-F]{40}|[0-9a-fA-F]{64,}))$",
                        "description": "The destination address."
                      },
                      "tokenId": {
                        "type": "string",
                        "description": "The token to transfer."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "tokenId",
                      "serialNumber",
                      "to"
                    ],
                    "title": "Hedera Non-Fungible Token (HIP-17)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Hts"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^(0x[0-9a-fA-F]{40}|0\\.0\\.(\\d+|[0-9a-fA-F]{40}|[0-9a-fA-F]{64,}))$",
                        "description": "The destination address."
                      },
                      "tokenId": {
                        "type": "string",
                        "description": "The token to transfer."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "tokenId",
                      "to",
                      "amount"
                    ],
                    "title": "Hedera Tokens (HTS)",
                    "description": ""
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "assetCode": {
                        "type": "string",
                        "description": "The asset code."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "issuer": {
                        "type": "string",
                        "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                        "description": "The asset issuer address."
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Sep41"
                        ]
                      },
                      "memo": {
                        "type": "string",
                        "description": "The memo or destination tag."
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "issuer",
                      "assetCode",
                      "to",
                      "amount"
                    ],
                    "title": "Stellar Classic Assets (SEP-41)",
                    "description": "Transfer classic [Stellar Assets](https://developers.stellar.org/docs/issuing-assets/anatomy-of-an-asset). They all implement the [SEP-41 token interface](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0041.md)."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "createDestinationAccount": {
                        "type": "boolean",
                        "description": "If `true`, pay to create the associated token account for the recipient if it doesn't exist. Defaults to `false`."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Spl",
                          "Spl2022"
                        ]
                      },
                      "mint": {
                        "type": "string",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                        "description": "The mint account address."
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "to",
                      "amount",
                      "mint"
                    ],
                    "title": "Solana Program Library Token (SPL and SPL 2022)",
                    "description": "Transfer [SPL tokens](https://spl.solana.com/token) or [SPL 2022 tokens](https://spl.solana.com/token-2022)."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Tep74"
                        ]
                      },
                      "master": {
                        "type": "string",
                        "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                        "description": "The Jetton master contract address."
                      },
                      "memo": {
                        "type": "string",
                        "description": "The memo or destination tag."
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "to",
                      "master",
                      "amount"
                    ],
                    "title": "TON Jetton (TEP-74)",
                    "description": "Transfer [Jetton](https://github.com/ton-blockchain/TEPs/blob/master/text/0074-jettons-standard.md) tokens."
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc10"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The destination address."
                      },
                      "tokenId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token ID."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "tokenId",
                      "to",
                      "amount"
                    ],
                    "title": "TRON Native Fungible Token (TRC-10)",
                    "description": "Transfer TRON's TRC-10 fungible tokens"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The amount of tokens to transfer in minimum denomination."
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The smart contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc20"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The destination address."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "to",
                      "amount"
                    ],
                    "title": "TRON Smart Contract Fungible Token (TRC-20)",
                    "description": "Transfer fungible tokens that implement the TRC-20 smart contract specification."
                  },
                  {
                    "properties": {
                      "contract": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The smart contract address."
                      },
                      "externalId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                      },
                      "feeSponsorId": {
                        "type": "string",
                        "maxLength": 50,
                        "minLength": 1,
                        "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Trc721"
                        ]
                      },
                      "to": {
                        "type": "string",
                        "pattern": "^T[0-9a-zA-Z]{33}$",
                        "description": "The destination address."
                      },
                      "tokenId": {
                        "type": "string",
                        "pattern": "^\\d+$",
                        "description": "The token to transfer."
                      },
                      "travelRule": {
                        "oneOf": [
                          {
                            "properties": {
                              "beneficiary": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryProof": {
                                "additionalProperties": {},
                                "type": "object"
                              },
                              "beneficiaryVASPdid": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string",
                                "enum": [
                                  "Notabene"
                                ]
                              },
                              "originator": {
                                "additionalProperties": {},
                                "type": "object"
                              }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "required": [
                              "kind",
                              "originator",
                              "beneficiary"
                            ]
                          }
                        ],
                        "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                      }
                    },
                    "additionalProperties": false,
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "to",
                      "tokenId"
                    ],
                    "title": "TRON Non Fungible Token (TRC-721)",
                    "description": "Transfer non-fungible tokens that implement the TRC-721 smart contract specification."
                  }
                ]
              },
              "examples": {
                "Asa": {
                  "value": {
                    "kind": "Asa",
                    "assetId": "10458941",
                    "to": "CJLKQWNTSQU64F4OBJSQK35THVI4KE4QIT3KEYB4CRBHQAIMO2CD6JWBCY",
                    "amount": "1"
                  }
                },
                "Cardano Asset": {
                  "description": "Transfer Cardano assets following [Mary update](https://docs.cardano.org/about-cardano/evolution/upgrades/mary)",
                  "value": {
                    "kind": "Asset",
                    "assetId": "c003c63129289a15b2d87216ce7366ea1832cfb9fc967f524ff1a8b564666e73636f696e",
                    "to": "addr_test1vqucg65d0c2fmjexgeenwz4acajyfxj8qqewu9xl5vmq32casygkx",
                    "amount": "1"
                  }
                },
                "Coin": {
                  "value": {
                    "kind": "Coin",
                    "coin": "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC",
                    "to": "0x1d9c96adb0eda0b3beca44ed89143444b4147b30f06eef7bfc39cbbff848f6e5",
                    "amount": "1"
                  }
                },
                "Erc20": {
                  "value": {
                    "kind": "Erc20",
                    "contract": "0x6f14c02fc1f78322cfd7d707ab90f18bad3b54f5",
                    "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffb",
                    "amount": "1"
                  }
                },
                "Erc20 Fee Sponsor": {
                  "value": {
                    "kind": "Erc20",
                    "contract": "0xF56636F7eD43068BEbe9D5Dc7486e70D10bCa5ac",
                    "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffb",
                    "amount": "1000000000000000000",
                    "feeSponsorId": "fs-5c47l-bp7f9-82n9raruj5n3spbe"
                  }
                },
                "Erc721": {
                  "value": {
                    "kind": "Erc721",
                    "contract": "0xc98f6a0670de5029faf44db6c35d935d534708cf",
                    "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffb",
                    "tokenId": "1"
                  }
                },
                "Native": {
                  "value": {
                    "kind": "Native",
                    "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffb",
                    "amount": "1"
                  }
                },
                "Native Fee Sponsor": {
                  "value": {
                    "kind": "Native",
                    "to": "0xe5a2ebc128e262ab1e3bd02bffbe16911adfbffb",
                    "amount": "1",
                    "feeSponsorId": "fs-5c47l-bp7f9-82n9raruj5n3spbe"
                  }
                },
                "Native Offer": {
                  "description": "Set `offer` field to `true` to create a transfer offer. Currently only supported on Canton.",
                  "value": {
                    "kind": "Native",
                    "to": "dfns1::122035ead564c650e3051c6bad8e01f319b9db0acbfd2e0acf1c05baebcef16cb468",
                    "amount": "100000000000",
                    "offer": true
                  }
                },
                "Sep41": {
                  "value": {
                    "kind": "Sep41",
                    "issuer": "GCIQLRAXSY4FDEMCEPOGQICBZKJZBRZURKSD75BFKASMFUKYMFAUQVQ5",
                    "assetCode": "Dfns",
                    "to": "GCVGVFCH2ECV2KIHJ46Q5NPFMTO5RAD3KGRJ3ZBHAZ37EMMAL7DOXXRS",
                    "amount": "1"
                  }
                },
                "Sep41 Fee Sponsor": {
                  "value": {
                    "kind": "Sep41",
                    "issuer": "GBBD47IF6LWK7P7MDEVSCWR7DPUWV3NY3DTQEVFL4NAT4AQH3ZLLFLA5",
                    "assetCode": "USDC",
                    "to": "GC32HQJNYDEMOSFLA5JFW4AREK4IXV4PMAGHMNBNE7ZF4X4SIRGN5ACC",
                    "amount": "1",
                    "feeSponsorId": "fs-43hcm-1pa06-99i97tj9srfnnlla"
                  }
                },
                "Spl": {
                  "value": {
                    "kind": "Spl",
                    "mint": "BhkGzPPoadnw1sAymCj2zNH3JuBe6Lk68hNAcFNhMGeH",
                    "to": "3U6stgsD1FmA7o3omUguritCU8iWmUM7Rs6KqAHHxHVZ",
                    "amount": "1"
                  }
                },
                "Tep74": {
                  "value": {
                    "kind": "Tep74",
                    "master": "kQBFAGo2Af6omLixtgsqqte_QXpZfjbEe8VfsqW_cWLyFz-h",
                    "to": "0QAWf1Hx6ZFX6-IQ2zsZTthHWOMNQHmoKFbuhQRvV3F_b3yd",
                    "amount": "1"
                  }
                },
                "Trc10": {
                  "value": {
                    "kind": "Trc10",
                    "tokenId": "1005273",
                    "to": "TADDx31pdCFfp3XrYxp6fQGbRxriYFLTrx",
                    "amount": "1"
                  }
                },
                "Trc721": {
                  "value": {
                    "kind": "Trc721",
                    "contract": "TKgnDMWHYmwH24REe9XnrnwcNCvtb53n8Q",
                    "to": "TADDx31pdCFfp3XrYxp6fQGbRxriYFLTrx",
                    "tokenId": "0"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequest",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Transfers:Create`: Always required   \n`FeeSponsors:Use`: Required if `feeSponsorId` is specified."
        }
      }
    },
    "/wallets/{walletId}/transfers/{transferId}": {
      "get": {
        "tags": [
          "Wallets"
        ],
        "summary": "Get Transfer",
        "description": "Retrieves a Wallet Transfer Request by its ID.",
        "parameters": [
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "transferId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferRequest",
                  "summary": null,
                  "description": null
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n✅ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Wallets:Transfers:Read`: Always required."
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List Webhooks",
        "description": "List all webhooks for the authenticated user's organization. The results are paginated.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": 0
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "dateCreated": {
                            "type": "string",
                            "description": "Date when webhook was created"
                          },
                          "dateUpdated": {
                            "type": "string",
                            "description": "Date when webhook was last updated"
                          },
                          "description": {
                            "type": "string",
                            "description": "Short description this webhook's purpose"
                          },
                          "events": {
                            "items": {
                              "anyOf": [
                                {
                                  "type": "string",
                                  "enum": [
                                    "policy.triggered",
                                    "policy.approval.pending",
                                    "policy.approval.resolved",
                                    "key.created",
                                    "key.deleted",
                                    "key.delegated",
                                    "key.exported",
                                    "wallet.blockchainevent.detected",
                                    "wallet.created",
                                    "wallet.delegated",
                                    "wallet.exported",
                                    "wallet.signature.failed",
                                    "wallet.signature.rejected",
                                    "wallet.signature.requested",
                                    "wallet.signature.signed",
                                    "wallet.transaction.broadcasted",
                                    "wallet.transaction.confirmed",
                                    "wallet.transaction.failed",
                                    "wallet.transaction.rejected",
                                    "wallet.transaction.requested",
                                    "wallet.transfer.broadcasted",
                                    "wallet.transfer.confirmed",
                                    "wallet.transfer.failed",
                                    "wallet.transfer.rejected",
                                    "wallet.transfer.requested",
                                    "wallet.offer.received",
                                    "wallet.offer.accepted",
                                    "wallet.offer.rejected",
                                    "wallet.tags.modified"
                                  ],
                                  "description": "WebhookEventKind"
                                },
                                {
                                  "type": "string",
                                  "enum": [
                                    "*"
                                  ]
                                }
                              ],
                              "description": "WebhookEventKind"
                            },
                            "type": "array",
                            "description": "All events this webhook is subscribed to."
                          },
                          "id": {
                            "type": "string",
                            "description": "Webhook ID"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "Enabled",
                              "Disabled"
                            ],
                            "description": "Webhook status"
                          },
                          "url": {
                            "type": "string",
                            "description": "Webhook url"
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "url",
                          "events",
                          "status",
                          "dateCreated",
                          "dateUpdated"
                        ],
                        "description": "Webhook"
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create Webhook",
        "description": "Register a new webhook.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "type": "string",
                    "maxLength": 256
                  },
                  "events": {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "policy.triggered",
                            "policy.approval.pending",
                            "policy.approval.resolved",
                            "key.created",
                            "key.deleted",
                            "key.delegated",
                            "key.exported",
                            "wallet.blockchainevent.detected",
                            "wallet.created",
                            "wallet.delegated",
                            "wallet.exported",
                            "wallet.signature.failed",
                            "wallet.signature.rejected",
                            "wallet.signature.requested",
                            "wallet.signature.signed",
                            "wallet.transaction.broadcasted",
                            "wallet.transaction.confirmed",
                            "wallet.transaction.failed",
                            "wallet.transaction.rejected",
                            "wallet.transaction.requested",
                            "wallet.transfer.broadcasted",
                            "wallet.transfer.confirmed",
                            "wallet.transfer.failed",
                            "wallet.transfer.rejected",
                            "wallet.transfer.requested",
                            "wallet.offer.received",
                            "wallet.offer.accepted",
                            "wallet.offer.rejected",
                            "wallet.tags.modified"
                          ],
                          "description": "WebhookEventKind"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "*"
                          ]
                        }
                      ],
                      "description": "WebhookEventKind"
                    },
                    "type": "array",
                    "minItems": 1,
                    "description": "All events this webhook is subscribed to."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "Enabled",
                      "Disabled"
                    ],
                    "description": "Webhook status"
                  },
                  "url": {
                    "type": "string",
                    "description": "Webhook url"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "url",
                  "events"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string",
                      "description": "Date when webhook was created"
                    },
                    "dateUpdated": {
                      "type": "string",
                      "description": "Date when webhook was last updated"
                    },
                    "description": {
                      "type": "string",
                      "description": "Short description this webhook's purpose"
                    },
                    "events": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "policy.triggered",
                              "policy.approval.pending",
                              "policy.approval.resolved",
                              "key.created",
                              "key.deleted",
                              "key.delegated",
                              "key.exported",
                              "wallet.blockchainevent.detected",
                              "wallet.created",
                              "wallet.delegated",
                              "wallet.exported",
                              "wallet.signature.failed",
                              "wallet.signature.rejected",
                              "wallet.signature.requested",
                              "wallet.signature.signed",
                              "wallet.transaction.broadcasted",
                              "wallet.transaction.confirmed",
                              "wallet.transaction.failed",
                              "wallet.transaction.rejected",
                              "wallet.transaction.requested",
                              "wallet.transfer.broadcasted",
                              "wallet.transfer.confirmed",
                              "wallet.transfer.failed",
                              "wallet.transfer.rejected",
                              "wallet.transfer.requested",
                              "wallet.offer.received",
                              "wallet.offer.accepted",
                              "wallet.offer.rejected",
                              "wallet.tags.modified"
                            ],
                            "description": "WebhookEventKind"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "*"
                            ]
                          }
                        ],
                        "description": "WebhookEventKind"
                      },
                      "type": "array",
                      "description": "All events this webhook is subscribed to."
                    },
                    "id": {
                      "type": "string",
                      "description": "Webhook ID"
                    },
                    "secret": {
                      "type": "string",
                      "description": "The secret associated with this webhook, with which webhook requests will be signed."
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "description": "Webhook status"
                    },
                    "url": {
                      "type": "string",
                      "description": "Webhook url"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "url",
                    "events",
                    "status",
                    "dateCreated",
                    "dateUpdated",
                    "secret"
                  ],
                  "description": "Webhook"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Create`: Always required."
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook",
        "description": "Retrieve information about a specific webhook.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string",
                      "description": "Date when webhook was created"
                    },
                    "dateUpdated": {
                      "type": "string",
                      "description": "Date when webhook was last updated"
                    },
                    "description": {
                      "type": "string",
                      "description": "Short description this webhook's purpose"
                    },
                    "events": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "policy.triggered",
                              "policy.approval.pending",
                              "policy.approval.resolved",
                              "key.created",
                              "key.deleted",
                              "key.delegated",
                              "key.exported",
                              "wallet.blockchainevent.detected",
                              "wallet.created",
                              "wallet.delegated",
                              "wallet.exported",
                              "wallet.signature.failed",
                              "wallet.signature.rejected",
                              "wallet.signature.requested",
                              "wallet.signature.signed",
                              "wallet.transaction.broadcasted",
                              "wallet.transaction.confirmed",
                              "wallet.transaction.failed",
                              "wallet.transaction.rejected",
                              "wallet.transaction.requested",
                              "wallet.transfer.broadcasted",
                              "wallet.transfer.confirmed",
                              "wallet.transfer.failed",
                              "wallet.transfer.rejected",
                              "wallet.transfer.requested",
                              "wallet.offer.received",
                              "wallet.offer.accepted",
                              "wallet.offer.rejected",
                              "wallet.tags.modified"
                            ],
                            "description": "WebhookEventKind"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "*"
                            ]
                          }
                        ],
                        "description": "WebhookEventKind"
                      },
                      "type": "array",
                      "description": "All events this webhook is subscribed to."
                    },
                    "id": {
                      "type": "string",
                      "description": "Webhook ID"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "description": "Webhook status"
                    },
                    "url": {
                      "type": "string",
                      "description": "Webhook url"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "url",
                    "events",
                    "status",
                    "dateCreated",
                    "dateUpdated"
                  ],
                  "description": "Webhook"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Read`: Always required."
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update Webhook",
        "description": "Update the definition of an existing webhook.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "description": {
                    "type": "string",
                    "maxLength": 256
                  },
                  "events": {
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "enum": [
                            "policy.triggered",
                            "policy.approval.pending",
                            "policy.approval.resolved",
                            "key.created",
                            "key.deleted",
                            "key.delegated",
                            "key.exported",
                            "wallet.blockchainevent.detected",
                            "wallet.created",
                            "wallet.delegated",
                            "wallet.exported",
                            "wallet.signature.failed",
                            "wallet.signature.rejected",
                            "wallet.signature.requested",
                            "wallet.signature.signed",
                            "wallet.transaction.broadcasted",
                            "wallet.transaction.confirmed",
                            "wallet.transaction.failed",
                            "wallet.transaction.rejected",
                            "wallet.transaction.requested",
                            "wallet.transfer.broadcasted",
                            "wallet.transfer.confirmed",
                            "wallet.transfer.failed",
                            "wallet.transfer.rejected",
                            "wallet.transfer.requested",
                            "wallet.offer.received",
                            "wallet.offer.accepted",
                            "wallet.offer.rejected",
                            "wallet.tags.modified"
                          ],
                          "description": "WebhookEventKind"
                        },
                        {
                          "type": "string",
                          "enum": [
                            "*"
                          ]
                        }
                      ],
                      "description": "WebhookEventKind"
                    },
                    "type": "array",
                    "minItems": 1,
                    "description": "All events this webhook is subscribed to."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "Enabled",
                      "Disabled"
                    ],
                    "description": "Webhook status"
                  },
                  "url": {
                    "type": "string",
                    "description": "Webhook url"
                  }
                },
                "additionalProperties": false,
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "dateCreated": {
                      "type": "string",
                      "description": "Date when webhook was created"
                    },
                    "dateUpdated": {
                      "type": "string",
                      "description": "Date when webhook was last updated"
                    },
                    "description": {
                      "type": "string",
                      "description": "Short description this webhook's purpose"
                    },
                    "events": {
                      "items": {
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "policy.triggered",
                              "policy.approval.pending",
                              "policy.approval.resolved",
                              "key.created",
                              "key.deleted",
                              "key.delegated",
                              "key.exported",
                              "wallet.blockchainevent.detected",
                              "wallet.created",
                              "wallet.delegated",
                              "wallet.exported",
                              "wallet.signature.failed",
                              "wallet.signature.rejected",
                              "wallet.signature.requested",
                              "wallet.signature.signed",
                              "wallet.transaction.broadcasted",
                              "wallet.transaction.confirmed",
                              "wallet.transaction.failed",
                              "wallet.transaction.rejected",
                              "wallet.transaction.requested",
                              "wallet.transfer.broadcasted",
                              "wallet.transfer.confirmed",
                              "wallet.transfer.failed",
                              "wallet.transfer.rejected",
                              "wallet.transfer.requested",
                              "wallet.offer.received",
                              "wallet.offer.accepted",
                              "wallet.offer.rejected",
                              "wallet.tags.modified"
                            ],
                            "description": "WebhookEventKind"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "*"
                            ]
                          }
                        ],
                        "description": "WebhookEventKind"
                      },
                      "type": "array",
                      "description": "All events this webhook is subscribed to."
                    },
                    "id": {
                      "type": "string",
                      "description": "Webhook ID"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "Enabled",
                        "Disabled"
                      ],
                      "description": "Webhook status"
                    },
                    "url": {
                      "type": "string",
                      "description": "Webhook url"
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "url",
                    "events",
                    "status",
                    "dateCreated",
                    "dateUpdated"
                  ],
                  "description": "Webhook"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Update`: Always required."
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete Webhook",
        "description": "Deletes an existing webhook registration.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "deleted": {
                      "type": "boolean",
                      "enum": [
                        true
                      ]
                    }
                  },
                  "type": "object",
                  "required": [
                    "deleted"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Delete`: Always required."
        }
      }
    },
    "/webhooks/{webhookId}/events": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List Webhook Events",
        "description": "Lists all events for a given webhook. \n\n\n<Warning>\nWe only keep a trace of those Webhook Events in our system for a **retention period of 31 days**. Past that, they are discarded, so you cannot see them using [List Webhook Events](https://docs.dfns.co/api-reference/webhooks/list-webhook-events) or [Get Webhook Event](https://docs.dfns.co/api-reference/webhooks/get-webhook-event) endpoints.\n</Warning>",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "kind",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "policy.triggered",
                "policy.approval.pending",
                "policy.approval.resolved",
                "key.created",
                "key.deleted",
                "key.delegated",
                "key.exported",
                "wallet.blockchainevent.detected",
                "wallet.created",
                "wallet.delegated",
                "wallet.exported",
                "wallet.signature.failed",
                "wallet.signature.rejected",
                "wallet.signature.requested",
                "wallet.signature.signed",
                "wallet.transaction.broadcasted",
                "wallet.transaction.confirmed",
                "wallet.transaction.failed",
                "wallet.transaction.rejected",
                "wallet.transaction.requested",
                "wallet.transfer.broadcasted",
                "wallet.transfer.confirmed",
                "wallet.transfer.failed",
                "wallet.transfer.rejected",
                "wallet.transfer.requested",
                "wallet.offer.received",
                "wallet.offer.accepted",
                "wallet.offer.rejected",
                "wallet.tags.modified"
              ]
            }
          },
          {
            "name": "deliveryFailed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 200,
              "exclusiveMinimum": 0
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "properties": {
                          "data": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "date": {
                            "type": "string",
                            "description": "ISO date string when event was raised"
                          },
                          "error": {
                            "type": "string",
                            "description": "Error message if any error happened during the webhook request."
                          },
                          "id": {
                            "type": "string",
                            "description": "WebhookEvent ID"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "policy.triggered",
                              "policy.approval.pending",
                              "policy.approval.resolved",
                              "key.created",
                              "key.deleted",
                              "key.delegated",
                              "key.exported",
                              "wallet.blockchainevent.detected",
                              "wallet.created",
                              "wallet.delegated",
                              "wallet.exported",
                              "wallet.signature.failed",
                              "wallet.signature.rejected",
                              "wallet.signature.requested",
                              "wallet.signature.signed",
                              "wallet.transaction.broadcasted",
                              "wallet.transaction.confirmed",
                              "wallet.transaction.failed",
                              "wallet.transaction.rejected",
                              "wallet.transaction.requested",
                              "wallet.transfer.broadcasted",
                              "wallet.transfer.confirmed",
                              "wallet.transfer.failed",
                              "wallet.transfer.rejected",
                              "wallet.transfer.requested",
                              "wallet.offer.received",
                              "wallet.offer.accepted",
                              "wallet.offer.rejected",
                              "wallet.tags.modified"
                            ],
                            "description": "Webhook event"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status code of the webhook request"
                          },
                          "timestampSent": {
                            "type": "integer",
                            "exclusiveMinimum": 0,
                            "description": "Unix timestamp when the event was forwarded to the webhook url by our servers."
                          }
                        },
                        "type": "object",
                        "required": [
                          "id",
                          "date",
                          "kind",
                          "data",
                          "status",
                          "timestampSent"
                        ],
                        "description": "WebhookEvent"
                      },
                      "type": "array"
                    },
                    "nextPageToken": {
                      "type": "string"
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Events:Read`: Always required."
        }
      }
    },
    "/webhooks/{webhookId}/events/{webhookEventId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get Webhook Event",
        "description": "Retrieve a specific webhook event details by its ID.\n  \n<Warning>\nWe only keep a trace of those Webhook Events in our system for a **retention period of 31 days**. Past that, they are discarded, so you cannot see them using [List Webhook Events](https://docs.dfns.co/api-reference/webhooks/list-webhook-events) or [Get Webhook Event](https://docs.dfns.co/api-reference/webhooks/get-webhook-event) endpoints.\n</Warning>",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "webhookEventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "additionalProperties": {},
                      "type": "object"
                    },
                    "date": {
                      "type": "string",
                      "description": "ISO date string when event was raised"
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message if any error happened during the webhook request."
                    },
                    "id": {
                      "type": "string",
                      "description": "WebhookEvent ID"
                    },
                    "kind": {
                      "type": "string",
                      "enum": [
                        "policy.triggered",
                        "policy.approval.pending",
                        "policy.approval.resolved",
                        "key.created",
                        "key.deleted",
                        "key.delegated",
                        "key.exported",
                        "wallet.blockchainevent.detected",
                        "wallet.created",
                        "wallet.delegated",
                        "wallet.exported",
                        "wallet.signature.failed",
                        "wallet.signature.rejected",
                        "wallet.signature.requested",
                        "wallet.signature.signed",
                        "wallet.transaction.broadcasted",
                        "wallet.transaction.confirmed",
                        "wallet.transaction.failed",
                        "wallet.transaction.rejected",
                        "wallet.transaction.requested",
                        "wallet.transfer.broadcasted",
                        "wallet.transfer.confirmed",
                        "wallet.transfer.failed",
                        "wallet.transfer.rejected",
                        "wallet.transfer.requested",
                        "wallet.offer.received",
                        "wallet.offer.accepted",
                        "wallet.offer.rejected",
                        "wallet.tags.modified"
                      ],
                      "description": "Webhook event"
                    },
                    "status": {
                      "type": "string",
                      "description": "Status code of the webhook request"
                    },
                    "timestampSent": {
                      "type": "integer",
                      "exclusiveMinimum": 0,
                      "description": "Unix timestamp when the event was forwarded to the webhook url by our servers."
                    }
                  },
                  "type": "object",
                  "required": [
                    "id",
                    "date",
                    "kind",
                    "data",
                    "status",
                    "timestampSent"
                  ],
                  "description": "WebhookEvent"
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Events:Read`: Always required."
        }
      }
    },
    "/webhooks/{webhookId}/ping": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Ping Webhook",
        "description": "This endpoint is meant for webhook setup and troubleshooting. Calling the endpoint will trigger a fake test event that will be pushed to the webhook url. The fake event will not be saved and not appear in further requests to Webhook Events.",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "type": "object",
                  "required": [
                    "status"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Webhooks:Ping`: Always required."
        }
      }
    },
    "/yields": {
      "get": {
        "tags": [
          "Yields"
        ],
        "summary": "List Yields",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/Yield",
                        "summary": null,
                        "description": null
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Yields:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Yields"
        ],
        "summary": "Create Yield",
        "description": "Create a new yield.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "properties": {
                      "externalId": {
                        "type": "string",
                        "description": "An optional external identifier provided by the client to ensure idempotency and prevent duplicate operations."
                      },
                      "protocol": {
                        "type": "string",
                        "enum": [
                          "0fns"
                        ],
                        "description": "Ofns protocol"
                      },
                      "slippageBps": {
                        "type": "number",
                        "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
                      },
                      "sourceAsset": {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      },
                      "targetAsset": {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      },
                      "walletId": {
                        "type": "string",
                        "maxLength": 64,
                        "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                        "description": "Wallet id.",
                        "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                      }
                    },
                    "type": "object",
                    "required": [
                      "walletId",
                      "protocol",
                      "sourceAsset",
                      "targetAsset",
                      "slippageBps"
                    ],
                    "title": "0fns Yield Request",
                    "description": "Request body for creating a yield investment using the 0fns protocol."
                  }
                ],
                "description": "Request body for creating a yield investment. Different protocols may have different requirements."
              },
              "examples": {
                "Ofns": {
                  "value": {
                    "externalId": "ext-123",
                    "sourceAsset": {
                      "kind": "Erc20",
                      "contract": "0x6b175474e89094c44da98b954eedeac495271d0f",
                      "amount": "1000000000000000000"
                    },
                    "targetAsset": {
                      "kind": "Erc20",
                      "contract": "0x5d3a536e4d6dbd6114cc1ead35777bab948e3643",
                      "amount": "32000000000000000000"
                    },
                    "slippageBps": 50,
                    "walletId": "wa-4g991-s29to-9hrq4nbuto6ih33b",
                    "protocol": "0fns"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Yield",
                      "summary": null,
                      "description": null
                    },
                    {
                      "properties": {
                        "actions": {
                          "items": {
                            "$ref": "#/components/schemas/YieldAction",
                            "summary": null,
                            "description": null
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "actions"
                      ]
                    }
                  ],
                  "description": "A yield investment representing funds deposited to earn interest from a DeFi protocol."
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Yields:Create`: Always required."
        }
      }
    },
    "/yields/{yieldId}": {
      "get": {
        "tags": [
          "Yields"
        ],
        "summary": "Get Yield",
        "description": "Retrieve the details of a specific yield.",
        "parameters": [
          {
            "name": "yieldId",
            "in": "path",
            "description": "Unique identifier for the yield investment.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "yld-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Unique identifier for the yield investment."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Yield",
                      "summary": null,
                      "description": null
                    },
                    {
                      "properties": {
                        "actions": {
                          "items": {
                            "$ref": "#/components/schemas/YieldAction",
                            "summary": null,
                            "description": null
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "actions"
                      ]
                    }
                  ],
                  "description": "A yield investment representing funds deposited to earn interest from a DeFi protocol."
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Yields:Read`: Always required."
        }
      }
    },
    "/yields/{yieldId}/actions": {
      "get": {
        "tags": [
          "Yields"
        ],
        "summary": "List Yield Actions",
        "description": "Retrieve the list of actions for a specific yield.",
        "parameters": [
          {
            "name": "yieldId",
            "in": "path",
            "description": "Unique identifier for the yield investment.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "yld-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Unique identifier for the yield investment."
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of items to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 500,
              "minimum": 1,
              "exclusiveMinimum": 0,
              "description": "Maximum number of items to return.",
              "default": 50
            }
          },
          {
            "name": "paginationToken",
            "in": "query",
            "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request.",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "Opaque token used to retrieve the next page. Returned as `nextPageToken` from the previous request."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "items": {
                      "items": {
                        "$ref": "#/components/schemas/YieldAction",
                        "summary": null,
                        "description": null
                      },
                      "type": "array",
                      "description": "Current page items."
                    },
                    "nextPageToken": {
                      "type": "string",
                      "description": "token to use as `paginationToken` to request the next page."
                    }
                  },
                  "type": "object",
                  "required": [
                    "items"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Yields:Read`: Always required."
        }
      },
      "post": {
        "tags": [
          "Yields"
        ],
        "summary": "Create Yield Action",
        "description": "Create a new action for an existing yield.",
        "parameters": [
          {
            "name": "yieldId",
            "in": "path",
            "description": "Unique identifier for the yield investment.",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 64,
              "pattern": "yld-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
              "description": "Unique identifier for the yield investment."
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "externalId": {
                    "type": "string",
                    "description": "An optional external identifier provided by the client to ensure idempotency and prevent duplicate operations."
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Deposit",
                      "Withdraw"
                    ],
                    "description": "The type of action being performed on the yield investment: Deposit to add funds or Withdraw to remove funds."
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
                  },
                  "sourceAsset": {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  },
                  "targetAsset": {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                },
                "type": "object",
                "required": [
                  "kind",
                  "sourceAsset",
                  "targetAsset",
                  "slippageBps"
                ],
                "title": "0fns Yield Action Request",
                "description": "Request body for creating a yield action. Different protocols may have different requirements."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Yield",
                      "summary": null,
                      "description": null
                    },
                    {
                      "properties": {
                        "actions": {
                          "items": {
                            "$ref": "#/components/schemas/YieldAction",
                            "summary": null,
                            "description": null
                          },
                          "type": "array"
                        }
                      },
                      "type": "object",
                      "required": [
                        "actions"
                      ]
                    }
                  ],
                  "description": "A yield investment representing funds deposited to earn interest from a DeFi protocol."
                }
              }
            }
          }
        },
        "security": [
          {
            "authenticationToken": [],
            "userActionSignature": []
          }
        ],
        "x-mint": {
          "content": "#### Authentication\n\n✅ Organization User (`CustomerEmployee`)    \n❌ Delegated User (`EndUser`)    \n✅ Service Account\n\n#### Required Permissions\n\n`Yields:Update`: Always required."
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BlockchainKind": {
        "type": "string",
        "enum": [
          "Algorand",
          "Aptos",
          "Bitcoin",
          "BitcoinCash",
          "Canton",
          "Cardano",
          "Cosmos",
          "Evm",
          "Hedera",
          "Icp",
          "Iota",
          "Kadena",
          "Kaspa",
          "Near",
          "Polymesh",
          "Solana",
          "Stellar",
          "Substrate",
          "Sui",
          "Tezos",
          "Ton",
          "Tron",
          "Xrpl"
        ]
      },
      "CantonValidator": {
        "properties": {
          "dateCreated": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "cv-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "example": "cv-7jeof-m584r-p35ucm37ko3cqgts"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Shared",
              "Custom"
            ]
          },
          "name": {
            "type": "string"
          },
          "network": {
            "type": "string",
            "enum": [
              "Canton",
              "CantonDevnet",
              "CantonTestnet"
            ]
          },
          "orgId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "or-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Organization id.",
            "example": "or-30tnh-itmjs-s235s5ontr3r23h2"
          },
          "partyHint": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "orgId",
          "network",
          "kind",
          "dateCreated",
          "partyHint"
        ]
      },
      "Network": {
        "type": "string",
        "enum": [
          "Algorand",
          "AlgorandTestnet",
          "Aptos",
          "AptosTestnet",
          "ArbitrumOne",
          "ArbitrumSepolia",
          "AvalancheC",
          "AvalancheCFuji",
          "BabylonGenesis",
          "BabylonTestnet5",
          "Base",
          "BaseSepolia",
          "Berachain",
          "BerachainBepolia",
          "Bitcoin",
          "BitcoinSignet",
          "BitcoinTestnet3",
          "BitcoinCash",
          "Bob",
          "BobSepolia",
          "Bsc",
          "BscTestnet",
          "Canton",
          "CantonTestnet",
          "Cardano",
          "CardanoPreprod",
          "Celo",
          "CeloAlfajores",
          "Codex",
          "CodexSepolia",
          "CosmosHub4",
          "CosmosIcsTestnet",
          "Dogecoin",
          "Ethereum",
          "EthereumGoerli",
          "EthereumSepolia",
          "EthereumHolesky",
          "EthereumHoodi",
          "FantomOpera",
          "FantomTestnet",
          "FlareC",
          "FlareCCoston2",
          "Hedera",
          "HederaTestnet",
          "Ink",
          "InkSepolia",
          "InternetComputer",
          "Ion",
          "IonTestnet",
          "Iota",
          "IotaTestnet",
          "KadenaTestnet4",
          "Kadena",
          "Kaspa",
          "Kusama",
          "Litecoin",
          "Near",
          "NearTestnet",
          "Optimism",
          "OptimismSepolia",
          "Origyn",
          "Plume",
          "PlumeSepolia",
          "Polkadot",
          "Polygon",
          "PolygonAmoy",
          "Polymesh",
          "PolymeshTestnet",
          "Race",
          "RaceSepolia",
          "SeiAtlantic2",
          "SeiPacific1",
          "Solana",
          "SolanaDevnet",
          "Stellar",
          "StellarTestnet",
          "Sui",
          "SuiTestnet",
          "Tsc",
          "TscTestnet1",
          "Tezos",
          "TezosGhostnet",
          "Ton",
          "TonTestnet",
          "Tron",
          "TronNile",
          "Westend",
          "XrpLedger",
          "XrpLedgerTestnet"
        ],
        "title": "Network"
      },
      "Offer": {
        "properties": {
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "offer-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Offer id.",
            "example": "offer-3ugfu-o8duj-vqu770ckmg7ilhp4"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Native",
              "Aip21",
              "Asa",
              "Coin",
              "Erc20",
              "Erc721",
              "Asset",
              "Hip17",
              "Hts",
              "Sep41",
              "Spl",
              "Spl2022",
              "Tep74",
              "Trc10",
              "Trc20",
              "Trc721"
            ]
          },
          "metadata": {
            "properties": {
              "asset": {
                "properties": {
                  "decimals": {
                    "type": "integer"
                  },
                  "quotes": {
                    "properties": {
                      "EUR": {
                        "type": "number"
                      },
                      "USD": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "symbol": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "required": [
              "asset"
            ]
          },
          "network": {
            "$ref": "#/components/schemas/Network",
            "summary": null,
            "description": null
          },
          "orgId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "or-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Organization id.",
            "example": "or-30tnh-itmjs-s235s5ontr3r23h2"
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Accepted",
              "Rejected",
              "Expired"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string"
          },
          "txHash": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "pattern": "^\\d+(\\.\\d+)?$"
          },
          "walletId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Wallet id.",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          }
        },
        "type": "object",
        "required": [
          "id",
          "orgId",
          "walletId",
          "network",
          "kind",
          "metadata",
          "txHash",
          "status",
          "from",
          "to",
          "value",
          "timestamp"
        ]
      },
      "Swap": {
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the swap was initiated."
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "swap-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Swap id.",
            "example": "swap-5ch70-fc3n7-3k2cbo8d7q5lnts4"
          },
          "provider": {
            "type": "string",
            "enum": [
              "UniswapX",
              "UniswapClassic"
            ],
            "description": "Swap provider."
          },
          "quoteId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "swapQuote-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Id of the quote this swap is based on.",
            "example": "swapQuote-7n9p0-cth75-6l74n2sj7u73ooeq"
          },
          "quotedSourceAsset": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount"
                    ],
                    "title": "Native Asset"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                ]
              },
              {
                "properties": {
                  "metadata": {
                    "properties": {
                      "decimals": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "symbol": {
                        "type": "string"
                      },
                      "tid": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "network",
                      "decimals"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "metadata"
                ]
              }
            ],
            "description": "The source asset for this swap transaction."
          },
          "quotedTargetAsset": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount"
                    ],
                    "title": "Native Asset"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                ]
              },
              {
                "properties": {
                  "metadata": {
                    "properties": {
                      "decimals": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "symbol": {
                        "type": "string"
                      },
                      "tid": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "network",
                      "decimals"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "metadata"
                ]
              }
            ],
            "description": "The target asset for this swap transaction."
          },
          "reference": {
            "type": "string",
            "description": "Optional user-defined reference for this Swap."
          },
          "requestBody": {
            "anyOf": [
              {
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "UniswapX",
                      "UniswapClassic"
                    ],
                    "description": "Provided for this swap. Used for attesting that the swap is being created with the same parameters as the quote."
                  },
                  "quoteId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "swapQuote-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Quote to use for this swap.",
                    "example": "swapQuote-7n9p0-cth75-6l74n2sj7u73ooeq"
                  },
                  "reference": {
                    "type": "string",
                    "description": "An optional reference for this Swap."
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you are willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%. Used for attesting that the swap is being created with the same parameters as the quote. "
                  },
                  "sourceAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "amount"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The source asset that will be spent on the Swap transaction. Used for attesting that the swap is being created with the same parameters as the quote."
                  },
                  "targetAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "amount"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The target asset that will be received with the Swap transaction. Used for attesting that the swap is being created with the same parameters as the quote."
                  },
                  "targetWalletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet receiving the target asset. Currently this value must be the same as the `walletId`. Used for attesting that the swap is being created with the same parameters as the quote.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  },
                  "walletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet spending the sourceAsset. Used for attesting that the swap is being created with the same parameters as the quote.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  }
                },
                "type": "object",
                "required": [
                  "quoteId",
                  "provider",
                  "walletId",
                  "slippageBps",
                  "sourceAsset",
                  "targetAsset"
                ]
              },
              {
                "type": "object"
              }
            ],
            "description": "The full request used for initiating this swap."
          },
          "requester": {
            "properties": {
              "tokenId": {
                "type": "string",
                "maxLength": 64,
                "pattern": "to-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "Service Account token or Personal Access token used when requesting the resource.",
                "example": "to-202a0-cdo33-o65mbt6q758lvvnt"
              },
              "userId": {
                "type": "string",
                "maxLength": 64,
                "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "User (could be a service account) who requested the resource.",
                "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
              }
            },
            "type": "object",
            "required": [
              "userId"
            ]
          },
          "slippageBps": {
            "type": "number",
            "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you are willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
          },
          "status": {
            "type": "string",
            "enum": [
              "PendingPolicyApproval",
              "InProgress",
              "Completed",
              "Failed",
              "Rejected"
            ],
            "description": "Swap status."
          },
          "targetWalletId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Id of the Dfns wallet receiving the target asset. Currently this value must be the same as the `walletId`.",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          },
          "walletId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Id of the Dfns wallet spending the sourceAsset.",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          }
        },
        "type": "object",
        "required": [
          "id",
          "quoteId",
          "reference",
          "walletId",
          "targetWalletId",
          "status",
          "provider",
          "quotedSourceAsset",
          "quotedTargetAsset",
          "slippageBps",
          "dateCreated",
          "requestBody",
          "requester"
        ],
        "example": {
          "id": "swap-6a3ku-bn8d7-8u5rs1oukojms7k8",
          "quoteId": "swapQuote-3hgv4-q8tbf-8v2ajmrbmg6m4i9t",
          "reference": null,
          "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
          "targetWalletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
          "status": "PendingPolicyApproval",
          "provider": "UniswapClassic",
          "quotedSourceAsset": {
            "kind": "Native",
            "amount": "10000000000",
            "metadata": {
              "network": "EthereumSepolia",
              "name": "Ethereum",
              "symbol": "SepoliaETH",
              "decimals": 18,
              "tid": "native:eth"
            }
          },
          "quotedTargetAsset": {
            "kind": "Erc20",
            "contract": "0xda0be7efd234295395d4204d0df4358339b57b27",
            "amount": "6467571553831928182",
            "metadata": {
              "network": "EthereumSepolia",
              "name": "Test",
              "symbol": "Test",
              "decimals": 18,
              "tid": "erc20:0xda0be7efd234295395d4204d0df4358339b57b27"
            }
          },
          "slippageBps": 100,
          "dateCreated": "2025-09-11T10:57:55.758Z",
          "requestBody": {
            "quoteId": "swapQuote-3hgv4-q8tbf-8v2ajmrbmg6m4i9t",
            "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
            "targetWalletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
            "provider": "UniswapClassic",
            "slippageBps": 100,
            "sourceAsset": {
              "kind": "Native",
              "amount": "10000000000"
            },
            "targetAsset": {
              "kind": "Erc20",
              "contract": "0xda0be7efd234295395d4204d0df4358339b57b27",
              "amount": "653003161"
            }
          },
          "requester": {
            "userId": "us-48r5q-eshfg-9pmr2lo6bmpr4i4i",
            "tokenId": "to-4etah-smoal-9n3rmhul4dpaueg5"
          }
        }
      },
      "SwapQuote": {
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). When the quote was created."
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "swapQuote-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "ID of the Swap Quote.",
            "example": "swapQuote-7n9p0-cth75-6l74n2sj7u73ooeq"
          },
          "provider": {
            "type": "string",
            "enum": [
              "UniswapX",
              "UniswapClassic"
            ],
            "description": "Swap provider."
          },
          "requestBody": {
            "anyOf": [
              {
                "properties": {
                  "provider": {
                    "type": "string",
                    "enum": [
                      "UniswapX",
                      "UniswapClassic"
                    ],
                    "description": "Swap provider."
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
                  },
                  "sourceAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "amount"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "amount": {
                            "type": "string",
                            "pattern": "^\\d+$"
                          },
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract",
                          "amount"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The source asset that will be spent on the Swap transaction, following the same stucture as the [transfer API](https://docs.dfns.co/api-reference/wallets/transfer-asset)."
                  },
                  "targetAsset": {
                    "oneOf": [
                      {
                        "properties": {
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Native"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind"
                        ],
                        "title": "Native Asset"
                      },
                      {
                        "properties": {
                          "contract": {
                            "type": "string",
                            "pattern": "^0x[0-9a-fA-F]{40}$"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Erc20"
                            ]
                          }
                        },
                        "type": "object",
                        "required": [
                          "kind",
                          "contract"
                        ],
                        "title": "EVM Fungible Token (ERC-20)"
                      }
                    ],
                    "description": "The target asset that will be received with the Swap transaction, follows the same structure as sourceAsset, but doesn't include the amount."
                  },
                  "targetWalletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet receiving the target asset. Currently this value must be the same as the `walletId`.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  },
                  "walletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Id of the Dfns wallet spending the sourceAsset.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  }
                },
                "type": "object",
                "required": [
                  "provider",
                  "walletId",
                  "sourceAsset",
                  "targetAsset",
                  "slippageBps"
                ]
              },
              {
                "type": "object"
              }
            ],
            "description": "The full request used for obtaining this quote."
          },
          "requester": {
            "properties": {
              "tokenId": {
                "type": "string",
                "maxLength": 64,
                "pattern": "to-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "Service Account token or Personal Access token used when requesting the quote.",
                "example": "to-202a0-cdo33-o65mbt6q758lvvnt"
              },
              "userId": {
                "type": "string",
                "maxLength": 64,
                "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "User (could be a service account) who requested the quote.",
                "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
              }
            },
            "type": "object",
            "required": [
              "userId"
            ]
          },
          "slippageBps": {
            "type": "number",
            "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
          },
          "sourceAsset": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount"
                    ],
                    "title": "Native Asset"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                ]
              },
              {
                "properties": {
                  "metadata": {
                    "properties": {
                      "decimals": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "symbol": {
                        "type": "string"
                      },
                      "tid": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "network",
                      "decimals"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "metadata"
                ]
              }
            ],
            "description": "The source asset that will be spent on the swap transaction."
          },
          "targetAsset": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount"
                    ],
                    "title": "Native Asset"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                ]
              },
              {
                "properties": {
                  "metadata": {
                    "properties": {
                      "decimals": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "symbol": {
                        "type": "string"
                      },
                      "tid": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "network",
                      "decimals"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "metadata"
                ]
              }
            ],
            "description": "The target asset that will be received with the swap transaction."
          },
          "targetWalletId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "If not provided, the walletId is used as the target wallet. If provided, this field is currently required to be the same as walletId",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          },
          "walletId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Id of the Dfns wallet spending the sourceAsset.",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          }
        },
        "type": "object",
        "required": [
          "id",
          "walletId",
          "provider",
          "sourceAsset",
          "targetAsset",
          "slippageBps",
          "dateCreated",
          "requestBody",
          "requester"
        ],
        "example": {
          "id": "swapQuote-3hgv4-q8tbf-8v2ajmrbmg6m4i9t",
          "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
          "targetWalletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
          "provider": "UniswapClassic",
          "sourceAsset": {
            "kind": "Native",
            "amount": "10000000000",
            "metadata": {
              "network": "EthereumSepolia",
              "name": "Ethereum",
              "symbol": "SepoliaETH",
              "decimals": 18,
              "tid": "native:eth"
            }
          },
          "targetAsset": {
            "kind": "Erc20",
            "contract": "0xda0be7efd234295395d4204d0df4358339b57b27",
            "amount": "6467571553831928182",
            "metadata": {
              "network": "EthereumSepolia",
              "name": "Test",
              "symbol": "Test",
              "decimals": 18,
              "tid": "erc20:0xda0be7efd234295395d4204d0df4358339b57b27"
            }
          },
          "slippageBps": 100,
          "dateCreated": "2025-09-11T10:52:15.039Z",
          "requestBody": {
            "provider": "UniswapClassic",
            "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
            "targetWalletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
            "sourceAsset": {
              "kind": "Native",
              "amount": "10000000000"
            },
            "targetAsset": {
              "kind": "Erc20",
              "contract": "0xda0be7efd234295395d4204d0df4358339b57b27"
            },
            "slippageBps": 100
          },
          "requester": {
            "userId": "us-48r5q-eshfg-9pmr2lo6bmpr4i4i",
            "tokenId": "to-4etah-smoal-9n3rmhul4dpaueg5"
          }
        }
      },
      "TransferRequest": {
        "properties": {
          "approvalId": {
            "type": "string"
          },
          "dateBroadcasted": {
            "type": "string"
          },
          "dateConfirmed": {
            "type": "string"
          },
          "datePolicyResolved": {
            "type": "string"
          },
          "dateRequested": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "fee": {
            "type": "string"
          },
          "feeSponsorId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "metadata": {
            "properties": {
              "asset": {
                "properties": {
                  "decimals": {
                    "type": "integer"
                  },
                  "quotes": {
                    "properties": {
                      "EUR": {
                        "type": "number"
                      },
                      "USD": {
                        "type": "number"
                      }
                    },
                    "type": "object"
                  },
                  "symbol": {
                    "type": "string"
                  },
                  "verified": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              }
            },
            "type": "object",
            "required": [
              "asset"
            ]
          },
          "network": {
            "$ref": "#/components/schemas/Network",
            "summary": null,
            "description": null
          },
          "reason": {
            "type": "string"
          },
          "requestBody": {
            "oneOf": [
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of native tokens to transfer in minimum denomination."
                  },
                  "createDestinationAccount": {
                    "type": "boolean",
                    "description": "Whether to create the destination account on chains that require account creation (e.g., Stellar, Kadena). Only valid for chains that require the receiver account to exist before transfer."
                  },
                  "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional field for Canton, especially useful in the context of offers"
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Native"
                    ]
                  },
                  "memo": {
                    "type": "string",
                    "description": "The memo or destination tag. `Stellar`, `TON` and `XrpLedger` support `memo`. Not valid for other networks."
                  },
                  "offer": {
                    "type": "boolean",
                    "description": "Optional field for Canton, if true it will create a transfer offer."
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "Slow",
                      "Standard",
                      "Fast"
                    ],
                    "description": "The priority that determines the fees paid for the transfer. All EVM compatible networks and Bitcoin support `priority`. Not supported for other networks. It uses the [estimate fees](https://docs.dfns.co/api-reference/networks/estimate-fees) API to calculate the transfer fees. When not specified, defaults to `Standard` priority."
                  },
                  "targetChain": {
                    "type": "string",
                    "description": "For multi-chain networks (e.g., Kadena), specify the destination chain for cross-chain transfers."
                  },
                  "to": {
                    "type": "string",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "to",
                  "amount"
                ],
                "title": "Native Asset",
                "description": "Transfer the native token of the network. All networks support the native token type."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "assetId": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The token asset id. "
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Asa"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^[A-Z0-9]{58}$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "assetId",
                  "to",
                  "amount"
                ],
                "title": "Algorand Standard Asset",
                "description": "Transfer Algorand standard assets, or [ASAs](https://developer.algorand.org/docs/get-details/asa/)."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Aip21"
                    ]
                  },
                  "metadata": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{64}$",
                    "description": "The asset metadata address. "
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{64}$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "metadata",
                  "to",
                  "amount"
                ],
                "title": "Aptos Fungible Asset (AIP-21)",
                "description": "Transfer Aptos fungible asset that implement the [AIP-21 specification](https://github.com/aptos-foundation/AIPs/blob/main/aips/aip-21.md)."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "assetId": {
                    "type": "string",
                    "description": "The token asset id. "
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Asset"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "assetId",
                  "to",
                  "amount"
                ],
                "title": "Cardano Asset",
                "description": "Transfer Cardano assets following [Mary update](https://docs.cardano.org/about-cardano/evolution/upgrades/mary)"
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "coin": {
                    "type": "string",
                    "description": "The coin identifier."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Coin"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{64}$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "coin",
                  "to",
                  "amount"
                ],
                "title": "Sui Coin",
                "description": "Transfer Sui fungible assets that implement [coin standard](https://docs.sui.io/standards/coin)."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "contract": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The ERC-20 contract address."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Erc20"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "Slow",
                      "Standard",
                      "Fast"
                    ],
                    "description": "The priority that determines the fees paid for the transfer."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "contract",
                  "to",
                  "amount"
                ],
                "title": "EVM Fungible Token (ERC-20)",
                "description": "Transfer fungible tokens that implement the [ERC-20 specification](https://eips.ethereum.org/EIPS/eip-20)."
              },
              {
                "properties": {
                  "contract": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The ERC-721 contract address."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Erc721"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "Slow",
                      "Standard",
                      "Fast"
                    ],
                    "description": "The priority that determines the fees paid for the transfer."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[0-9a-fA-F]{40}$",
                    "description": "The destination address."
                  },
                  "tokenId": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The token to transfer."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "contract",
                  "to",
                  "tokenId"
                ],
                "title": "EVM Non Fungible Token (ERC-721)",
                "description": "Transfer non-fungible tokens that implement the [ERC-721 specification](https://eips.ethereum.org/EIPS/eip-721)"
              },
              {
                "properties": {
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Hip17"
                    ]
                  },
                  "serialNumber": {
                    "type": "string",
                    "pattern": "^\\d+$"
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^(0x[0-9a-fA-F]{40}|0\\.0\\.(\\d+|[0-9a-fA-F]{40}|[0-9a-fA-F]{64,}))$",
                    "description": "The destination address."
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "The token to transfer."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "tokenId",
                  "serialNumber",
                  "to"
                ],
                "title": "Hedera Non-Fungible Token (HIP-17)",
                "description": ""
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Hts"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^(0x[0-9a-fA-F]{40}|0\\.0\\.(\\d+|[0-9a-fA-F]{40}|[0-9a-fA-F]{64,}))$",
                    "description": "The destination address."
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "The token to transfer."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "tokenId",
                  "to",
                  "amount"
                ],
                "title": "Hedera Tokens (HTS)",
                "description": ""
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "assetCode": {
                    "type": "string",
                    "description": "The asset code."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "issuer": {
                    "type": "string",
                    "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                    "description": "The asset issuer address."
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Sep41"
                    ]
                  },
                  "memo": {
                    "type": "string",
                    "description": "The memo or destination tag."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^(G[A-Z0-9]{55}|M[A-Z0-9]{68})$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "issuer",
                  "assetCode",
                  "to",
                  "amount"
                ],
                "title": "Stellar Classic Assets (SEP-41)",
                "description": "Transfer classic [Stellar Assets](https://developers.stellar.org/docs/issuing-assets/anatomy-of-an-asset). They all implement the [SEP-41 token interface](https://github.com/stellar/stellar-protocol/blob/master/ecosystem/sep-0041.md)."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "createDestinationAccount": {
                    "type": "boolean",
                    "description": "If `true`, pay to create the associated token account for the recipient if it doesn't exist. Defaults to `false`."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Spl",
                      "Spl2022"
                    ]
                  },
                  "mint": {
                    "type": "string",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                    "description": "The mint account address."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^[1-9A-HJ-NP-Za-km-z]{32,44}$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "to",
                  "amount",
                  "mint"
                ],
                "title": "Solana Program Library Token (SPL and SPL 2022)",
                "description": "Transfer [SPL tokens](https://spl.solana.com/token) or [SPL 2022 tokens](https://spl.solana.com/token-2022)."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Tep74"
                    ]
                  },
                  "master": {
                    "type": "string",
                    "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                    "description": "The Jetton master contract address."
                  },
                  "memo": {
                    "type": "string",
                    "description": "The memo or destination tag."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^(?:[A-Za-z0-9\\-_]{48}|\\d+:[a-fA-F0-9]{64})$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "to",
                  "master",
                  "amount"
                ],
                "title": "TON Jetton (TEP-74)",
                "description": "Transfer [Jetton](https://github.com/ton-blockchain/TEPs/blob/master/text/0074-jettons-standard.md) tokens."
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Trc10"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^T[0-9a-zA-Z]{33}$",
                    "description": "The destination address."
                  },
                  "tokenId": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The token ID."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "tokenId",
                  "to",
                  "amount"
                ],
                "title": "TRON Native Fungible Token (TRC-10)",
                "description": "Transfer TRON's TRC-10 fungible tokens"
              },
              {
                "properties": {
                  "amount": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The amount of tokens to transfer in minimum denomination."
                  },
                  "contract": {
                    "type": "string",
                    "pattern": "^T[0-9a-zA-Z]{33}$",
                    "description": "The smart contract address."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Trc20"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^T[0-9a-zA-Z]{33}$",
                    "description": "The destination address."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "contract",
                  "to",
                  "amount"
                ],
                "title": "TRON Smart Contract Fungible Token (TRC-20)",
                "description": "Transfer fungible tokens that implement the TRC-20 smart contract specification."
              },
              {
                "properties": {
                  "contract": {
                    "type": "string",
                    "pattern": "^T[0-9a-zA-Z]{33}$",
                    "description": "The smart contract address."
                  },
                  "externalId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "A unique ID from your system. It can be leveraged to be used as an idempotency key. (read more [here](https://docs.dfns.co/api-reference/idempotency))"
                  },
                  "feeSponsorId": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 1,
                    "description": "Id of the fee sponsor that will be used to pay for your transfer fees, it might not be available for all blockchains. (read more [here](https://docs.dfns.co/features/fee-sponsors))"
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Trc721"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^T[0-9a-zA-Z]{33}$",
                    "description": "The destination address."
                  },
                  "tokenId": {
                    "type": "string",
                    "pattern": "^\\d+$",
                    "description": "The token to transfer."
                  },
                  "travelRule": {
                    "oneOf": [
                      {
                        "properties": {
                          "beneficiary": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryProof": {
                            "additionalProperties": {},
                            "type": "object"
                          },
                          "beneficiaryVASPdid": {
                            "type": "string"
                          },
                          "kind": {
                            "type": "string",
                            "enum": [
                              "Notabene"
                            ]
                          },
                          "originator": {
                            "additionalProperties": {},
                            "type": "object"
                          }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "required": [
                          "kind",
                          "originator",
                          "beneficiary"
                        ]
                      }
                    ],
                    "description": "A travel rule payload to associate with the transfer. (read more [here](https://docs.dfns.co/features/travel-rule))"
                  }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                  "kind",
                  "contract",
                  "to",
                  "tokenId"
                ],
                "title": "TRON Non Fungible Token (TRC-721)",
                "description": "Transfer non-fungible tokens that implement the TRC-721 smart contract specification."
              }
            ]
          },
          "requester": {
            "properties": {
              "tokenId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            },
            "type": "object",
            "required": [
              "userId"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "Pending",
              "Executing",
              "Broadcasted",
              "Confirmed",
              "Failed",
              "Rejected"
            ]
          },
          "txHash": {
            "type": "string"
          },
          "walletId": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "id",
          "walletId",
          "network",
          "requester",
          "requestBody",
          "metadata",
          "status",
          "dateRequested"
        ]
      },
      "User": {
        "properties": {
          "credentialUuid": {
            "type": "string"
          },
          "isActive": {
            "type": "boolean"
          },
          "isRegistered": {
            "type": "boolean"
          },
          "isSSORequired": {
            "type": "boolean"
          },
          "isServiceAccount": {
            "type": "boolean"
          },
          "kind": {
            "type": "string",
            "enum": [
              "CustomerEmployee",
              "EndUser"
            ],
            "description": "User kind."
          },
          "name": {
            "type": "string"
          },
          "orgId": {
            "type": "string"
          },
          "permissionAssignments": {
            "items": {
              "properties": {
                "assignmentId": {
                  "type": "string"
                },
                "operations": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "permissionId": {
                  "type": "string"
                },
                "permissionName": {
                  "type": "string"
                }
              },
              "type": "object",
              "required": [
                "permissionName",
                "permissionId",
                "assignmentId"
              ]
            },
            "type": "array"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "userId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "User id.",
            "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
          },
          "username": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "username",
          "name",
          "userId",
          "kind",
          "credentialUuid",
          "orgId",
          "isActive",
          "isServiceAccount",
          "isRegistered",
          "isSSORequired",
          "permissionAssignments"
        ]
      },
      "Wallet": {
        "properties": {
          "address": {
            "type": "string",
            "description": "Wallet address on its corresponding network."
          },
          "custodial": {
            "type": "boolean",
            "description": "Whether the wallet is owned by an end user (non-custodial), or by your organization (custodial)."
          },
          "dateCreated": {
            "type": "string",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date string when wallet was created.",
            "example": "2023-04-14T20:41:28.715Z"
          },
          "dateDeleted": {
            "type": "string",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date string when wallet was deleted.",
            "example": "2023-04-14T20:41:28.715Z"
          },
          "externalId": {
            "type": "string",
            "maxLength": 100,
            "description": "User-defined value that can be used to correlate the entity with an external system."
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "ID of the wallet.",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "Wallet nickname."
          },
          "network": {
            "type": "string",
            "enum": [
              "Algorand",
              "AlgorandTestnet",
              "Aptos",
              "AptosTestnet",
              "ArbitrumOne",
              "ArbitrumSepolia",
              "AvalancheC",
              "AvalancheCFuji",
              "BabylonGenesis",
              "BabylonTestnet5",
              "Base",
              "BaseSepolia",
              "Berachain",
              "BerachainBepolia",
              "Bitcoin",
              "BitcoinSignet",
              "BitcoinTestnet3",
              "BitcoinCash",
              "Bob",
              "BobSepolia",
              "Bsc",
              "BscTestnet",
              "Canton",
              "CantonTestnet",
              "Cardano",
              "CardanoPreprod",
              "Celo",
              "CeloAlfajores",
              "Codex",
              "CodexSepolia",
              "CosmosHub4",
              "CosmosIcsTestnet",
              "Dogecoin",
              "Ethereum",
              "EthereumGoerli",
              "EthereumSepolia",
              "EthereumHolesky",
              "EthereumHoodi",
              "FantomOpera",
              "FantomTestnet",
              "FlareC",
              "FlareCCoston2",
              "Hedera",
              "HederaTestnet",
              "Ink",
              "InkSepolia",
              "InternetComputer",
              "Ion",
              "IonTestnet",
              "Iota",
              "IotaTestnet",
              "KadenaTestnet4",
              "Kadena",
              "Kaspa",
              "Kusama",
              "Litecoin",
              "Near",
              "NearTestnet",
              "Optimism",
              "OptimismSepolia",
              "Origyn",
              "Plume",
              "PlumeSepolia",
              "Polkadot",
              "Polygon",
              "PolygonAmoy",
              "Polymesh",
              "PolymeshTestnet",
              "Race",
              "RaceSepolia",
              "SeiAtlantic2",
              "SeiPacific1",
              "Solana",
              "SolanaDevnet",
              "Stellar",
              "StellarTestnet",
              "Sui",
              "SuiTestnet",
              "Tsc",
              "TscTestnet1",
              "Tezos",
              "TezosGhostnet",
              "Ton",
              "TonTestnet",
              "Tron",
              "TronNile",
              "Westend",
              "XrpLedger",
              "XrpLedgerTestnet"
            ],
            "description": "Network this wallet is bound to."
          },
          "signingKey": {
            "properties": {
              "curve": {
                "type": "string",
                "enum": [
                  "ed25519",
                  "secp256k1",
                  "stark"
                ]
              },
              "delegatedTo": {
                "type": "string",
                "maxLength": 64,
                "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "The end user ID the key (and wallet) is delegated to.",
                "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
              },
              "id": {
                "type": "string",
                "maxLength": 64,
                "pattern": "key-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "Key id.",
                "example": "key-01snl-t56gb-j8tsok0vn802p80i"
              },
              "publicKey": {
                "type": "string",
                "description": "Hex-encoded value of the public key.",
                "example": "e2375c8c9e87bfcd0be8f29d76c818cabacd51584f72cb2222d49a13b036d84d3d"
              },
              "scheme": {
                "type": "string",
                "enum": [
                  "ECDSA",
                  "EdDSA",
                  "Schnorr"
                ],
                "description": "Key scheme."
              }
            },
            "type": "object",
            "required": [
              "id",
              "scheme",
              "curve",
              "publicKey"
            ],
            "description": "Details about the key underlying the wallet."
          },
          "status": {
            "type": "string",
            "enum": [
              "Active",
              "Archived"
            ],
            "description": "Wallet status."
          },
          "tags": {
            "items": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9_.:/+-]{1,100}$",
              "description": "Wallet Tag."
            },
            "type": "array",
            "maxItems": 10,
            "description": "List of tags."
          },
          "validatorId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "cv-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Id of the validator on which the wallet is created for Canton networks",
            "example": "cv-7jeof-m584r-p35ucm37ko3cqgts"
          }
        },
        "type": "object",
        "required": [
          "id",
          "network",
          "signingKey",
          "status",
          "dateCreated",
          "custodial",
          "tags"
        ],
        "example": {
          "id": "wa-1f04s-lqc9q-xxxxxxxxxxxxxxxx",
          "network": "Ethereum",
          "address": "0x00e3495cf6af59008f22ffaf32d4c92ac33dac47",
          "name": "trading hot wallet",
          "signingKey": {
            "id": "key-6ece3-9l565-xxxxxxxxxxxxxxxx",
            "scheme": "ECDSA",
            "curve": "secp256k1",
            "publicKey": "e2375c8c9e87bfcd0be8f29d76c818cabacd51584f72cb2222d49a13b036d84d3d"
          },
          "status": "Active",
          "dateCreated": "2023-04-14T20:41:28.715Z",
          "custodial": true,
          "tags": []
        }
      },
      "Yield": {
        "properties": {
          "amount": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount"
                    ],
                    "title": "Native Asset"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                ]
              },
              {
                "properties": {
                  "metadata": {
                    "properties": {
                      "decimals": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "symbol": {
                        "type": "string"
                      },
                      "tid": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "network",
                      "decimals"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "metadata"
                ]
              }
            ],
            "description": "The total amount currently invested in this yield."
          },
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date. When the yield was created.",
            "example": "2023-04-14T20:41:28.715Z"
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "yld-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Unique identifier for the yield investment.",
            "example": "yld-2rrvm-d90av-s7n3hi738i43gdh3"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "0fns"
            ],
            "description": "The DeFi protocol used for yield generation. Currently supports OFNS protocol"
          },
          "rewards": {
            "allOf": [
              {
                "oneOf": [
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Native"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "amount"
                    ],
                    "title": "Native Asset"
                  },
                  {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                ]
              },
              {
                "properties": {
                  "metadata": {
                    "properties": {
                      "decimals": {
                        "type": "number"
                      },
                      "name": {
                        "type": "string"
                      },
                      "network": {
                        "$ref": "#/components/schemas/Network",
                        "summary": null,
                        "description": null
                      },
                      "symbol": {
                        "type": "string"
                      },
                      "tid": {
                        "type": "string"
                      }
                    },
                    "type": "object",
                    "required": [
                      "network",
                      "decimals"
                    ]
                  }
                },
                "type": "object",
                "required": [
                  "metadata"
                ]
              }
            ],
            "description": "The total interest earned so far in this yield."
          },
          "walletId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Wallet id.",
            "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
          }
        },
        "type": "object",
        "required": [
          "id",
          "walletId",
          "protocol",
          "amount",
          "rewards",
          "dateCreated"
        ],
        "description": "A yield investment representing funds deposited to earn interest from a DeFi protocol.",
        "example": {
          "id": "yld-6a3ku-bn8d7-8u5rs1oukojms7k8",
          "walletId": "wa-3l3cj-l8mq7-8q78f9nopq7f1qjv",
          "protocol": "0fns",
          "amount": {
            "kind": "Erc20",
            "contract": "0x0A7660979A67E4bC51E750C628C8479ff9F458aE",
            "amount": "1000000000",
            "metadata": {
              "network": "EthereumSepolia",
              "name": "0fns",
              "symbol": "0fnsSepolia",
              "decimals": 6,
              "tid": "erc20:0x0A7660979A67E4bC51E750C628C8479ff9F458aE"
            }
          },
          "rewards": {
            "kind": "Erc20",
            "contract": "0x0A7660979A67E4bC51E750C628C8479ff9F458aE",
            "amount": "5000000",
            "metadata": {
              "network": "EthereumSepolia",
              "name": "0fns",
              "symbol": "0fnsSepolia",
              "decimals": 6,
              "tid": "erc20:0x0A7660979A67E4bC51E750C628C8479ff9F458aE"
            }
          },
          "dateCreated": "2025-10-09T10:57:55.758Z"
        }
      },
      "YieldAction": {
        "properties": {
          "dateCreated": {
            "type": "string",
            "format": "date-time",
            "description": "[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date (must be UTC). [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date. When the yield action was created.",
            "example": "2023-04-14T20:41:28.715Z"
          },
          "externalId": {
            "type": "string",
            "description": "An optional external identifier provided by the client to ensure idempotency and prevent duplicate operations."
          },
          "id": {
            "type": "string",
            "maxLength": 64,
            "pattern": "ylda-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Unique identifier for the yield action.",
            "example": "ylda-2d6rq-6jvb0-q1qffhc3guna7v3d"
          },
          "kind": {
            "type": "string",
            "enum": [
              "Deposit",
              "Withdraw"
            ],
            "description": "The type of action being performed on the yield investment: Deposit to add funds or Withdraw to remove funds."
          },
          "requestBody": {
            "anyOf": [
              {
                "properties": {
                  "externalId": {
                    "type": "string",
                    "description": "An optional external identifier provided by the client to ensure idempotency and prevent duplicate operations."
                  },
                  "kind": {
                    "type": "string",
                    "enum": [
                      "Deposit",
                      "Withdraw"
                    ],
                    "description": "The type of action being performed on the yield investment: Deposit to add funds or Withdraw to remove funds."
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
                  },
                  "sourceAsset": {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  },
                  "targetAsset": {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  }
                },
                "type": "object",
                "required": [
                  "kind",
                  "sourceAsset",
                  "targetAsset",
                  "slippageBps"
                ],
                "title": "0fns Yield Action Request",
                "description": "Request body for creating a yield action. Different protocols may have different requirements."
              },
              {
                "properties": {
                  "externalId": {
                    "type": "string",
                    "description": "An optional external identifier provided by the client to ensure idempotency and prevent duplicate operations."
                  },
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "0fns"
                    ],
                    "description": "Ofns protocol"
                  },
                  "slippageBps": {
                    "type": "number",
                    "description": "The slippage tolerance for this trade in [basis point](https://en.wikipedia.org/wiki/Basis_point) (BPS). Slippage tolerance defines the maximum price difference you're willing to accept during a trade from the estimated quote, ensuring you still receive at least a minimum number of tokens if the price shifts. One basis point equals one-hundredth of a percentage point, or 0.01%."
                  },
                  "sourceAsset": {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  },
                  "targetAsset": {
                    "properties": {
                      "amount": {
                        "type": "string",
                        "pattern": "^\\d+$"
                      },
                      "contract": {
                        "type": "string",
                        "pattern": "^0x[0-9a-fA-F]{40}$"
                      },
                      "kind": {
                        "type": "string",
                        "enum": [
                          "Erc20"
                        ]
                      }
                    },
                    "type": "object",
                    "required": [
                      "kind",
                      "contract",
                      "amount"
                    ],
                    "title": "EVM Fungible Token (ERC-20)"
                  },
                  "walletId": {
                    "type": "string",
                    "maxLength": 64,
                    "pattern": "wa-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                    "description": "Wallet id.",
                    "example": "wa-5pfuu-9euek-h0odgb6snva8ph3k"
                  }
                },
                "type": "object",
                "required": [
                  "walletId",
                  "protocol",
                  "sourceAsset",
                  "targetAsset",
                  "slippageBps"
                ],
                "title": "0fns Yield Request",
                "description": "Request body for creating a yield investment using the 0fns protocol."
              }
            ],
            "description": "The full request used for initiating this yield action."
          },
          "requester": {
            "properties": {
              "tokenId": {
                "type": "string",
                "maxLength": 64,
                "pattern": "to-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "Service Account token or Personal Access token used when requesting the resource.",
                "example": "to-202a0-cdo33-o65mbt6q758lvvnt"
              },
              "userId": {
                "type": "string",
                "maxLength": 64,
                "pattern": "us-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
                "description": "User (could be a service account) who requested the resource.",
                "example": "us-6b58p-r53sr-rlrd3l5cj3uc4ome"
              }
            },
            "type": "object",
            "required": [
              "userId"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "PendingPolicyApproval",
              "InProgress",
              "Completed",
              "Failed",
              "Rejected"
            ],
            "description": "Status of the yield action. Once initiated, the status will be InProgress, after processing it will be Completed or Failed."
          },
          "yieldId": {
            "type": "string",
            "maxLength": 64,
            "pattern": "yld-[a-z0-9]{5}-[a-z0-9]{5}-[a-z0-9]{14,16}",
            "description": "Unique identifier for the yield investment.",
            "example": "yld-2rrvm-d90av-s7n3hi738i43gdh3"
          }
        },
        "type": "object",
        "required": [
          "id",
          "yieldId",
          "kind",
          "status",
          "requester",
          "requestBody",
          "dateCreated"
        ],
        "description": "A specific action performed on a yield investment, such as depositing or withdrawing funds.",
        "example": {
          "id": "ylda-6a3ku-bn8d7-8u5rs1oukojms7k8",
          "yieldId": "yld-6a3ku-bn8d7-8u5rs1oukojms7k8",
          "externalId": "external-action-123",
          "kind": "Deposit",
          "status": "InProgress",
          "requester": {
            "userId": "us-3v1ag-v6b36-afhm4zy59kjrn1fds",
            "tokenId": "ut-341e5-12nj6-9a82ld2hjxqzkpji"
          },
          "requestBody": {
            "kind": "Deposit",
            "sourceAsset": {
              "kind": "Erc20",
              "contract": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
              "amount": "500000000"
            },
            "targetAsset": {
              "kind": "Erc20",
              "contract": "0x0A7660979A67E4bC51E750C628C8479ff9F458aE",
              "amount": "500000000"
            },
            "slippageBps": 100
          },
          "dateCreated": "2025-10-09T11:15:33.421Z"
        }
      }
    },
    "securitySchemes": {
      "authenticationToken": {
        "type": "http",
        "description": "**Bearer Token:** Used to authenticate API requests.\nMore details how to generate the token: [Authentication flows](https://docs.dfns.co/api-reference/auth/flows)",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "userActionSignature": {
        "type": "apiKey",
        "description": "**User Action Signature:** Used to sign the change-inducing API requests.\nMore details how to generate the token: [User Action Signing flows](https://docs.dfns.co/api-reference/signing-flows)",
        "name": "X-DFNS-USERACTION",
        "in": "header"
      }
    }
  }
}